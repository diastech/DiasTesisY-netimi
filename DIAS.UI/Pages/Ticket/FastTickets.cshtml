@page
@using static DiasShared.Enums.Standart.TicketEnums
@using DiasShared.Data.EF_Data.DiasFacilityManagement.SqlServer.DataTransferObjects.Development.Shared.Custom
@using DiasShared.Data.EF_Data.DiasFacilityManagement.SqlServer.DataTransferObjects.Development.Shared.Standard
@model DIAS.UI.Pages.Ticket.CustomBasicTicketDto
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@{
}
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/polyfills.umd.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.14/jspdf.plugin.autotable.min.js"></script>
<script src="https://unpkg.com/jspdf@latest/dist/jspdf.umd.min.js"></script>
<script src="https://unpkg.com/jspdf@2.5.1/dist/jspdf.es.min.js"></script>
<script src="https://unpkg.com/jspdf-autotable@3.5.23/dist/jspdf.plugin.autotable.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/exceljs/3.8.0/exceljs.min.js" defer></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.5/FileSaver.min.js" defer></script>
<script src="~/helper/trCharHelper.js"></script>
<script>
    window.jsPDF = window.jspdf.jsPDF;
    applyPlugin(window.jsPDF);
</script>

<div class="card">
    <div class="card-header" role="tab" id="accord1">
        <h5 class="mb-0">
            <a data-toggle="collapse" href="#collapse-pane-1" role="button" aria-expanded="true" aria-controls="collapse-pane-1">
                <i style="margin-right:5px" class="fa fa-filter" aria-hidden="true"></i>Filtre
            </a>
        </h5>
    </div>

    <div id="collapse-pane-1" class="collapse " role="tabpanel" aria-labelledby="accord1">
        <div class="card-body">
            @(Html.DevExtreme().Form().ID("#frmFastTicket").ColCount(12).ShowColonAfterLabel(false).Items(items =>
            {
                items.AddSimple().ColSpan(4).Label(l => l.Text("Bildiren Kişi"))
                .Template(@<text> @await Html.PartialAsync("../Shared/Basic/_BasicTicketFilterReportedUserTemplate")</text>);

                items.AddSimple().ColSpan(4).Label(l => l.Text("Ekleyen Kişi"))
                .Template(@<text> @await Html.PartialAsync("../Shared/Basic/_BasicTicketFilterAddedUserTemplate")</text>);

                items.AddSimple().ColSpan(4).Label(l => l.Text("Açıklama")).Editor(e => e.TextBox().ID("fastTicketDescriptionFilter").ShowClearButton(true));

                items.AddSimple().ColSpan(4).Label(l => l.Text("Kayıt Tarihi"))
                .Editor(e => e.DateBox().ID("filterTicketAddedTime")
                .ShowClearButton(true)
                .Type(DateBoxType.DateTime)
                .DisplayFormat("dd/MM/yyyy HH:mm:ss")
                .Placeholder("Kayıt Tarihi Seçiniz."));

                items.AddEmpty().ColSpan(8);
                items.AddEmpty().ColSpan(10);

                items.AddButton().ColSpan(1)
                .ButtonOptions(a => a.Text("Ara")
                .ID("fastTicketFilterSearch")
                .Icon("fas fa-search")
                .Type(ButtonType.Default)
                .OnClick("onClickFastTicketFilterFind")
                .UseSubmitBehavior(true)
                .Hint("Kayıtları Filtrele"))
                .HorizontalAlignment(HorizontalAlignment.Right);

                items.AddButton().ColSpan(1)
                .ButtonOptions(a => a.Text("Temizle")
                .ID("fastTicketFilterClean")
                .Type(ButtonType.Default)
                .Icon("fas fa-broom")
                .Type(ButtonType.Default)
                .OnClick("onClickFastTicketFilterClearAll")
                .UseSubmitBehavior(true)
                .Hint("Filtre Temizle"))
                .HorizontalAlignment(HorizontalAlignment.Right);
            }))
        </div>
    </div>
</div>

<div class="card">
    <div class="card-header" role="tab" id="accord2">
        <h5 class="mb-0">
            <a class="collapsed" data-toggle="collapse" href="#collapse-pane-2" role="button" aria-expanded="false" aria-controls="collapse-pane-2">
                <i style="margin-right:5px" class="fas fa-ticket-alt"></i>Liste
            </a>
        </h5>
    </div>
    <div id="collapse-pane-2" class="collapse show" role="tabpanel" aria-labelledby="accord2">
        <div class="card-body">
            @(Html.DevExtreme().DataGrid<CustomBasicTicketDto>()
            .ID("gridFastTicket")
            .OnInitialized("onInitializedFastTicket")
            .OnCellPrepared("onCellPreparedFastTicket")
            .OnExporting("fastTicketGridDataExporting")
            .OnContentReady("onContentReadyBasicTicketGrid")
            .OnSelectionChanged("onSelectionChangedBasicTicket")
            .Selection(s => s.Mode(SelectionMode.Single))
            .Export(o => o.Enabled(true).AllowExportSelectedData(true))
            .ColumnChooser(c => c.Enabled(true).AllowSearch(true).Mode(GridColumnChooserMode.Select).Title("Sütün Ekleme/Kaldırma"))
            .AllowColumnReordering(true)
            .HeaderFilter(o => o.AllowSearch(true))
            .Selection(s => s.Mode(SelectionMode.Single))
            .FilterRow(o => o.Visible(true).ShowOperationChooser(true))
            .ShowBorders(true)
            .DataSource(ds=>ds.RemoteController()
                .Key("Id")
                .OnBeforeSend("fastTicketbeforeSend")
                .LoadUrl(Url.Page(null, "GridData"))
                .InsertUrl(Url.Page(null, "GridRow"))
            )
            .ErrorRowEnabled(false)
            .OnToolbarPreparing("fastTicketOnToolbarPreparing")
            .RemoteOperations(true)
            .Paging(p => p.PageSize(10).Enabled(true))
            .Pager(pager => pager.ShowNavigationButtons(true).Visible(true).ShowInfo(true).ShowPageSizeSelector(true).AllowedPageSizes(new JS("[10, 50, 100]")))
            .Editing(e => e.Mode(GridEditMode.Popup)
            .AllowAdding(true)
            .AllowUpdating(true)
            .UseIcons(true)
            .Popup(p => p
            .Title("Hızlı İş Emri Düzenle")
            .ID("popupFastTicketContainer")
            .ShowTitle(true)
            .MaxWidth("700px")
            .MinWidth("600px")
            .Height("60%")
            .OnShowing("setPopupTitleFastTicket")
            .ShowCloseButton(false))
            .Form(f => f.Items(items=>
            {
            items.AddGroup().Items(groupItems =>
            {
            groupItems.AddTabbed()
                            .TabPanelOptions(o =>
                            {
                                o.DeferRendering(false);
                                o.AnimationEnabled(true);
                                o.ID("ticketTab");
                                o.Width(900);
                                o.OnInitialized("fastTicketTabs_Initialized");
                                o.AnimationEnabled(true);
                                o.ShowNavButtons(true);
                                o.Height("100%");
                            })
                            .Tabs(tabItems =>
                            {
                            tabItems.Add().Title("Oluştur").Items(tabItem =>
                            {
                                tabItem.AddSimpleFor(m => m.ReportedUserId).ColSpan(1)
                            .Label(l => l.Text("Bildiren Kişi").Visible(true))
                            .Editor(e => e.SelectBox()
                            .ID("sbBasicTicketReportesUser")
                            .DataSource(d => d.RemoteController()
                            .Key("Id")
                            .LoadUrl(Url.Page(null, "UserData")))
                            .DataSourceOptions(o => o.Paginate(true).PageSize(20))
                            .DeferRendering(false)
                            .ValueExpr("Id")                            
                            .DisplayExpr(new JS("Shared.sbTicketUserDiplayExpr"))
                            .ShowClearButton(true)
                            .SearchEnabled(true)
                            .OnValueChanged("fastTicketOnValueChanged")
                            .Placeholder("Bildiren kişi seçiniz.")
                            .SearchExpr("FirstName", "LastName", "UserName", "Email"))
                            .ValidationRules(v =>
                            {
                                v.AddRequired().Message("Bildiren Kişi Boş Geçilemez");
                            });

                                tabItem.AddSimpleFor(m => m.MobilePhoneNumber)
                            .Label(l => l.Text("Telefon Numarası").Visible(true))
                            .Editor(e => e.TextBox().Disabled(true).ID("txtPhoneFastTicket")
                            //.Mask("+1 (X00) 000-0000")
                            .MaskRules(new { X = new JS("/[02-9]/") })).ValidationRules(v =>
                            {
                                v.AddRequired().Message("Telefon Alanı Boş Geçilemez");
                            });

                                tabItem.AddSimpleFor(m => m.TicketDescription)
                            .Label(l => l.Text("Açıklama").Visible(true))
                            .Editor(e => e.TextArea().ID("fastTicketDescription")
                            .Placeholder("Açıklama giriniz...")
                            .Height(150))
                            .ValidationRules(v =>
                            {
                                v.AddRequired().Message("Açıklama Alanı Boş Geçilemez");
                            });

                                tabItem.AddSimpleFor(m => m.AttachmentsFile)
                            .Label(l => l.Text("Dosya").Visible(true))
                            .Template(@<text>
                                <div id="fastTicketFileuploaderDivAdd">
                                    @(Html.DevExtreme().FileUploader()
                                                    .ID("fastTicketFileuploaderContainerAdd")
                                                    .Name("fastTicketFileuploaderContainerAdd")
                                                    .Multiple(false)
                                                    .Accept("*")
                                                    .UploadMode(FileUploadMode.UseForm)
                                                    .ShowFileList(true)
                                                    .OnValueChanged("fastTicketFileuploaderContainerAddValueChanged"))
                                </div>
                                                </text>);
                                        });
                                        tabItems.Add()
                                                    .Title("Dosyalar")
                                                .Icon("far fa-file-alt").Disabled(true)
                                                    .Template(new TemplateName("tabFastTicketAttachmentGrid"));
                                    });
                                });
                            }).ID("fastTicketForm")
                        )
                    )
                    .Selection(s => s.Mode(SelectionMode.Single))
                    .Columns(c => {
                        c.AddFor(x => x.AddedByUser.FirstName)
                            .AllowEditing(true)
                            .Caption("Ekleyen Kullanıcı Adı");
                        c.AddFor(x => x.AddedByUser.LastName)
                            .AllowEditing(true)
                            .Caption("Ekleyen Kullanıcı Soyadı");
                        c.AddFor(x => x.MobilePhoneNumber)
                            .AllowEditing(true)
                            .Caption("Telefon Numarası");
                        c.AddFor(x => x.AddedTime)
                            .DataType(GridColumnDataType.Date)
                            .Format("dd/MM/yyyy HH:mm:ss")
                            .Alignment(HorizontalAlignment.Center)
                            .Caption("Tarih");
                        c.AddFor(x => x.TicketDescription)
                            .AllowEditing(true)
                            .Caption("Açıklama");
                        c.AddFor(x => x.ReportedUser.FirstName)
                            .AllowEditing(true)
                            .Caption("Bildiren Kullanıcı Adı");
                        c.AddFor(x => x.ReportedUser.LastName)
                            .AllowEditing(true)
                            .Caption("Bildiren Kullanıcı Soyadı");


                        //c.AddFor(x=>x.Attachments).Caption("Dosyalar").CellTemplate(new JS("fastTicketGridCellTemplate"))
                        //    .AllowEditing(true);

                        //c.Add().Caption("Ekler")
                        //    .DataField("ticketAttachments")
                        //    .Alignment(HorizontalAlignment.Left);
                    })
                        //.OnRowInserting(@<text> function(e) {onRowInserting(e); } </text>)
                        //.OnSelectionChanged(@<text> function(e) {grd_selectionChanged(e); } </text>)
                        .OnEditingStart(@<text> function(e) {onEditingStart(e); } </text>)
                        .OnInitNewRow(@<text> function(e) { OnInitNewRow(e); } </text>)

                 )
        </div>
    </div>
</div>
@using (Html.DevExtreme().NamedTemplate("tabFastTicketAttachmentGrid"))
{
    <div id="fastTicketFileuploaderDivEdit">
        @(Html.DevExtreme().FileUploader()
            .ID("fastTicketFileuploaderContainerEdit")
            .Name("fastTicketFileuploaderContainerEdit")
            .Multiple(true)
            .Accept("*")
            .UploadMode(FileUploadMode.UseForm)
            .ShowFileList(true)
            .OnValueChanged("fastTicketFileuploaderContainerEditValueChanged")
     )
    </div>
    <div id="attachmentButtonDiv">
        @(Html.DevExtreme().Button().Text("Ekle").Visible(false).OnClick("addFastTicketAttachment").Icon("save").Type(ButtonType.Success).ID("fastTicketAttachmentButton"))
    </div>

    <div>
        @(Html.DevExtreme().DataGrid<AttachmentDto>().ID("fastTicketAttachmentGrid")
            //.Editing(editing=>editing.AllowDeleting(true))
            .Editing(editing =>
            {
                editing.UseIcons(true);
            })
            .LoadPanel(panel => panel.Enabled(true))
            .ShowColumnLines(false)
            .ShowRowLines(true)
            .ShowBorders(true)
            .RenderAsync(true)
            .DataSource(ds => ds.RemoteController()
            //.OnBeforeSend("beforeSendTicketAttachment")
            .Key("Id")
            .LoadUrl(Url.Page(null, "Attachment"))
            //.DeleteUrl(Url.Page(null,"TicketAttachment"))            
            .LoadParams(new { ticketId = new JS("fastTicketAttachmentLoadParams(data)")}))
            .Paging(paging => paging.Enabled(true).PageSize(6))
            .RemoteOperations(true)
            .Columns(columns => {

                columns.AddFor(x => x.Id).Visible(false).Alignment(HorizontalAlignment.Left);
                columns.AddFor(x => x.AddedByUser.FirstName).Visible(true).Caption("Ekleyen Kullanıcı Ad").Alignment(HorizontalAlignment.Left);
                columns.AddFor(x => x.AddedByUser.LastName).Visible(true).Caption("Ekleyen Kullanıcı Soyad").Alignment(HorizontalAlignment.Left);
                columns.AddFor(x => x.AttachmentDescription).Caption("Açıklama").Visible(true).Alignment(HorizontalAlignment.Left);
                columns.Add().Caption("Dosya Eki").DataField("Attachments").Alignment(HorizontalAlignment.Left).CellTemplate(new JS("ticketAttachmentGridCellTemplate"));

                columns.Add().Alignment(HorizontalAlignment.Center).Type(GridCommandColumnType.Buttons).Caption("İşlemler")
                .Visible(true)
                .Buttons(btns =>
                {
                    btns.Add()
                    //.Visible(true)
                    //.Visible(new JS("isIconVisible"))
                    .Hint("Sil")
                    .Name(GridColumnButtonName.Delete).OnClick("deleteFastTicketAttachment").Icon("remove");
                }
                );

            })
        )
    </div>
}


<script type="text/javascript">

    var data;
    let myFile;
    var tabsData;
    let countDownFastTicketGridRefreshDate;
    const pdfOptionsOfFastTicket = [
        { Id: 1, name: 'Tüm Verileri Dışarı Aktar' },
        { Id: 2, name: 'Seçili Satırı Dışa Aktar' }
    ];
    var FastTicketDataGrid;
    //row u editlemek istediğimizde
    function onEditingStart(e) {

        data = e.data;
    }
    //yeni bir row eklemek istediğimizde
    function OnInitNewRow(e) {

        data = null;
        myFile = null;
    }

    function fastTicketbeforeSend(type, e) {
        if (type == "load") return;

        var phoneNumber = $("#txtPhone").dxTextBox("instance").option("value");
        var description = $("#fastTicketDescription").dxTextArea("instance").option("value");

        if (myFile == null) {
            Base.showToast("Dosya Eklenmelidir.!", "error");
            return ;
        }

        var formData = new FormData();
        formData.append("AttachmentsFile", myFile[0]);
        formData.append("TicketDescription", description);
        formData.append("MobilePhoneNumber", phoneNumber);
        formData.append("AddedByUserId", 1);
        var ajaxHeader = {};
        ajaxHeader["RequestVerificationToken"] = "@Xsrf.GetAndStoreTokens(Model.HttpContext).RequestToken";
        e.data =formData;
        e.contentType = false;
        e.processData = false;
        e.headers = ajaxHeader;
    }

    function fileUploader_valueChanged(e) {
        let files = e.value;
        myFile = e.value;
        formDataFiles = new FormData();
        for (let i = 0; i != files.length; i++) {
            formDataFiles.append("myFile", files[i]);
        }
    }

    function onSelectionChangedBasicTicket(data) {
        let rowData = data.selectedRowsData[0];
        if (!rowData)
            return;
        dataRow = rowData;
    }

    $(function () {
        $("#fastTicketFilterSearch").parent().css("padding-right", "0px");
    })

    function fastTicketTabs_Initialized(e) {
        tabsData = e.component;
        var tabs = e.component;
        tabsData = tabs;
        tabs.option("items[1].disabled", true);
    }

    function setPopupTitleFastTicket(e) {
        if (data == null) {
            $("#popupFastTicketContainer").dxPopup("instance").option("toolbarItems[0].toolbar", "top");
            $("#popupFastTicketContainer").dxPopup("instance").option("toolbarItems[0].options.icon", "save");
            $("#popupFastTicketContainer").dxPopup("instance").option("toolbarItems[0].options.type", "success");
            $("#popupFastTicketContainer").dxPopup("instance").option("toolbarItems[0].options.text", "Kaydet");

            $("#popupFastTicketContainer").dxPopup("instance").option("toolbarItems[1].toolbar", "top");
            $("#popupFastTicketContainer").dxPopup("instance").option("toolbarItems[1].options.text", "Kapat");
            $("#popupFastTicketContainer").dxPopup("instance").option("toolbarItems[1].options.icon", "close");
            $("#popupFastTicketContainer").dxPopup("instance").option("toolbarItems[1].options.type", "default");
            $(".dx-toolbar-before").children().children().children().prepend("<i class='fa fa-plane' style='padding-right:6px;'></i>");
        }


        if (data != null) {
            $("#popupFastTicketContainer").dxPopup({
                title: "Hızlı İş Emri Düzenle",
            });
            $("#popupFastTicketContainer").dxPopup("instance").option("height", "50%");

            $("#popupFastTicketContainer").dxPopup("instance").option("toolbarItems[0].toolbar", "top");
            $("#popupFastTicketContainer").dxPopup("instance").option("toolbarItems[0].options.icon", "save");
            $("#popupFastTicketContainer").dxPopup("instance").option("toolbarItems[0].options.type", "success");
            $("#popupFastTicketContainer").dxPopup("instance").option("toolbarItems[0].options.text", "Güncelle");

            $("#popupFastTicketContainer").dxPopup("instance").option("toolbarItems[1].toolbar", "top");
            $("#popupFastTicketContainer").dxPopup("instance").option("toolbarItems[1].options.text", "Kapat");
            $("#popupFastTicketContainer").dxPopup("instance").option("toolbarItems[1].options.icon", "close");
            $("#popupFastTicketContainer").dxPopup("instance").option("toolbarItems[1].options.type", "default");
            $(".dx-toolbar-before").children().children().children().prepend("<i class='fa fa-plane' style='padding-right:6px;'></i>");

            $("#fastTicketFileuploaderDivAdd").parent().parent().parent().parent().remove();
            tabsData.option("items[1].disabled", false);
            $("#sbBasicTicketReportesUser").dxSelectBox("instance").option("value", String(data.ReportedUserId))
            $("#txtPhoneFastTicket").dxTextBox("instance").option("value", data.MobilePhoneNumber);
            $("#fastTicketDescription").dxTextArea("instance").option("value", data.TicketDescription);
        }
    }
    function fastTicketOnToolbarPreparing(e) {
        e.toolbarOptions.items.forEach((value, index, array) => {
            if (value.name == "addRowButton") {
                e.toolbarOptions.items[0].showText = "always";
                e.toolbarOptions.items[0].options.text = "Hızlı iş Emri ";
                e.toolbarOptions.items[0].options.icon = "plus";
                e.toolbarOptions.items[0].options.type = "success";
            }
        });
    }


    function fastTicketGridCellTemplate(container, options) {
        if (options.data.Attachments == null) {
            return;
        }

        let myArr = options.data.Attachments;

        myArr.forEach((index, array) => {
            $('<a/>').addClass('dx-link')
                .text(index.FolderName)
                .on('dxclick', function () {
                    var url = `FastTickets?handler=File&fileName=${index.FolderName}`;
                    $.ajax({
                        type: 'GET',
                        url: url,
                        data: { "fileName": index.FolderName },
                        beforeSend: function (xhr) {
                            //xhr.setRequestHeader('Authorization', sessionStorage.getItem("token"));
                        },
                        success: function (data) {
                            window.location = url;
                        }
                    });
                })
                .append("<br />")
                .appendTo(container)
        });
    }

    function fastTicketFileuploaderContainerAddValueChanged(e) {

    }

    function fastTicketFileuploaderContainerEditValueChanged(e) {

    }
    function ticketAttachmentGridCellTemplate(container, options) {
        if (options.data == null) {
            return;
        }

        var folderName = options.data.FolderName;
        $('<a/>').addClass('dx-link')
            .text(folderName)
            .on('dxclick', function () {
                var url = `FastTickets?handler=FileAttachments&Id=${options.data.Id}`;
                $.ajax({
                    type: 'GET',
                    url: url,
                    data: { "Id": options.data.Id },
                    beforeSend: function (xhr) {
                        //xhr.setRequestHeader('Authorization', sessionStorage.getItem("token"))
                    },
                    success: function (data) {
                        var byte = base64ToArrayBuffer(data);
                        saveByteArray([byte], options.data.FolderName, options.data.FileType);
                    }
                });
            })
            .append("<br />")
            .appendTo(container)

    }
    function base64ToArrayBuffer(base64) {
        var binaryString = window.atob(base64);
        var binaryLen = binaryString.length;
        var bytes = new Uint8Array(binaryLen);
        for (var i = 0; i < binaryLen; i++) {
            var ascii = binaryString.charCodeAt(i);
            bytes[i] = ascii;
        }
        return bytes;
    }

    var saveByteArray2 = (function () {
        var a = document.createElement("a");
        document.body.appendChild(a);
        a.style = "display: none";
        return function (data, name, type) {
            var blob = new Blob(data, { type: type }),
                url = window.URL.createObjectURL(blob);
            a.href = url;
            a.download = name;
            a.click();
            window.URL.revokeObjectURL(url);
        };
    }());

    function deleteFastTicketAttachment(e) {
        var ajaxHeader = {};
        ajaxHeader["RequestVerificationToken"] = "@Xsrf.GetAndStoreTokens(Model.HttpContext).RequestToken";
        var result = Base.showMessage("Dosya Ekini silmek istediğinize emin misiniz ?", messageType.Confirm, "Silmek üzeresiniz.!");
        result.done(function (dialogResult) {
            if (dialogResult == true)
            {
                $.ajax({
                    url: "Tickets?handler=DeleteAttachment",
                    headers: ajaxHeader,
                    data: JSON.stringify(e.row.data),
                    cache: false,
                    dataType: 'json',
                    contentType: "application/json",
                    type: 'post',
                    success: function () {
                        DevExpress.ui.notify({
                            message: "Başarıyla Silindi",
                            type: "Success",
                            displayTime: 3000,
                            height: 50,
                            width: 200,
                            position: {
                                my: 'right top',
                                at: 'right top',
                            },
                        });
                        $("#ticketAttachmentGrid").dxDataGrid("instance").refresh();
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        DevExpress.ui.notify({
                            message: "Silinirken Hata Oluştu",
                            type: "error",
                            displayTime: 3000,
                            height: 50,
                            width: 200,
                            position: {
                                my: 'right top',
                                at: 'right top',
                            },
                        });
                    }
                });
            }
        })
    }

    function addFastTicketAttachment(e) {
        var ajaxHeader = {};
        ajaxHeader["RequestVerificationToken"] = "@Xsrf.GetAndStoreTokens(Model.HttpContext).RequestToken";


        FormDataAttachmentFile.append("TicketId", data.Id);

        $.ajax({
            url: "Tickets?handler=AddAttachment",
            headers: ajaxHeader,
            data: FormDataAttachmentFile,
            contentType: false,
            processData: false,
            type: 'post',
            success: function () {
                FormDataAttachmentFile.delete('attachmentFile');
                $("#ticketAttachmentGrid").dxDataGrid("instance").refresh();
                $("#attachment-uploader").dxFileUploader("instance").reset();
            }
        });
    }
    
    function onInitializedFastTicket() {
        refreshTimerFastTicket(0);
    }
    function refreshTimerFastTicket(count) {
        countDownFastTicketGridRefreshDate = moment().add(5, 'm').toDate();
        let countDown = setInterval(function () {
            let now = new Date().getTime();
            let distance = countDownFastTicketGridRefreshDate - now;
            if (distance < 0) {
                document.getElementById("timer_fastTicket").innerHTML = `Yenileniyor..`;
                refreshTimerFastTicket(0);
            }
            let minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
            let seconds = Math.floor((distance % (1000 * 60)) / 1000);
            let zero = "";
            if (seconds < 10)
                zero = "0";
            document.getElementById("timer_fastTicket").innerHTML = `Yenile: (0${minutes}:${zero}${seconds})`;
        }, 1000);
    }
    function onCellPreparedFastTicket(e) {
        if (e.column.type == "buttons") {
            e.cellElement.children().removeClass('dx-icon-edit').addClass("dx-icon-search");
            e.cellElement.children().attr("title", "Detay");
        }
    }
    function fastTicketAttachmentLoadParams(data) {
        if (data == null) {
            return 0;
        }
        else {
            return data.Id;
        }
    }

    function fastTicketOnValueChanged(e) {
        e.component._dataSource._items.forEach((user, index, array) => {
            if (user.Id == e.value) {
                $("#txtPhoneFastTicket").dxTextBox("instance").option("value", user.MobilePhoneNumber);
            }
        });
    }
    function fastTicketGridDataExporting(e) {
        let workbook = new ExcelJS.Workbook();
        let worksheet = workbook.addWorksheet('tickets');

        DevExpress.excelExporter.exportDataGrid({
            component: e.component,
            worksheet: worksheet,
            autoFilterEnabled: true
        }).then(function () {
            workbook.xlsx.writeBuffer().then(function (buffer) {
                saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'IsEmirleri.xlsx');
            });
        });
        e.cancel = true;
    }

    function onClickFastTicketFilterClearAll() {
        $("#sbBasicTicketFilterReportedUser").dxSelectBox("instance").option("value", null);
        $("#sbBasicTicketFilterAddedUser").dxSelectBox("instance").option("value", null);
        $("#fastTicketDescriptionFilter").dxTextBox("instance").option("value", null);
        $("#filterTicketAddedTime").dxDateBox("instance").option("value", null);
    }
    function onClickFastTicketFilterFind() {
        var reportedUserId = $("#sbBasicTicketFilterReportedUser").dxSelectBox("instance").option("value");
        var addedUserId  = $("#sbBasicTicketFilterAddedUser").dxSelectBox("instance").option("value");
        var description = $("#fastTicketDescriptionFilter").dxTextBox("instance").option("value");
        var addedTime = $("#filterTicketAddedTime").dxDateBox("instance").option("value");

        var ajaxHeader = {};
        ajaxHeader["RequestVerificationToken"] = "@Xsrf.GetAndStoreTokens(Model.HttpContext).RequestToken";
        var FormDataFilter = new FormData();

        FormDataFilter.append("ReportedUserId", reportedUserId);
        FormDataFilter.append("AddedUserId", addedUserId);
        FormDataFilter.append("TicketDescription", description);
        FormDataFilter.append("AddedTime", (new Date(addedTime)).toUTCString(3));

        //to do :  yapılacak
        $.ajax({
            url: "Tickets?handler=Filter",
            headers: ajaxHeader,
            data: FormDataFilter,
            contentType: false,
            processData: false,
            type: 'post',
            success: function (response) {
                $("#gridTicket").dxDataGrid("instance").option("dataSource", response.data);
            }
        });
    }

    function onContentReadyBasicTicketGrid(e) {
        FastTicketDataGrid = e.component;
        e.component.deselectRows(e.component.getSelectedRowKeys());
        var toolbar = e.element.find('.dx-datagrid-header-panel .dx-toolbar').dxToolbar('instance');
        //toolbar.on('optionChanged', function (arg) {
        //    console.log("sadikl");
        //    //addCustomItemPdfButton(toolbar);
        //});
        addBasicTicketCustomItemPdfButton(toolbar);
        addCustomItemFastTicket(toolbar);
    }
    function addCustomItemFastTicket(toolbar) {
        var items = toolbar.option('items');
        var myItem = DevExpress.data.query(items).filter(function (item) {
            return item.name == 'fastTicketButton';
        }).toArray();
        if (!myItem.length) {
            items.push({
                id: 'btn_refresh_fastTicket',
                location: 'after',
                widget: 'dxButton',
                name: 'fastTicketButton',
                options: {
                    template: function (container, options) {
                        return `<i class='dx-icon fas fa-redo'></i><span class='dx-button-text' id='timer_fastTicket'></span>`
                    },
                    hint: 'yenile',
                    type: "default",
                    onClick: function btn_refreshGridClick(e) {
                        $("#gridFastTicket").dxDataGrid("instance").refresh();

                    },
                },
            });
            toolbar.option('items', items);
        }
    }
    function addBasicTicketCustomItemPdfButton(toolbar) {
        var items = toolbar.option('items');
        var myItem = DevExpress.data.query(items).filter(function (item) {
            return item.name == 'btn_pdf_fastTicket';
        }).toArray();
        if (!myItem.length) {
            items.push({
                id: 'btn_pdf_fastTicket',
                location: 'after',
                widget: 'dxDropDownButton',
                name: 'btn_pdf_fastTicket',
                options: {
                    text: 'Pdf',
                    icon: 'save',
                    displayExpr: 'name',
                    keyExpr: 'Id',
                    elementAttr: {
                        id: "btn_pdf_fastTicketId",
                        class: "dpbColor"
                    },
                    dropDownOptions: {
                        width: 230,
                    },
                    onItemClick: exportToPDF,
                    items: pdfOptionsOfFastTicket,
                },
            });
            toolbar.option('items', items);
        }
    }
    function exportToPDF(e) {
        const pdfDoc = new jsPDF('l');
        pdfDoc.addFileToVFS('NotoSerif-Regular-normal.ttf', myFont);
        pdfDoc.addFont('NotoSerif-Regular-normal.ttf', 'NotoSerif-Regular', 'normal');
        pdfDoc.setFont("NotoSerif-Regular");
        if (e.itemData.Id == 1) {
            const options = {
                jsPDFDocument: pdfDoc,
                component: FastTicketDataGrid,
                autoTableOptions: {
                    rowPageBreak: 'auto',
                    bodyStyles: { valign: 'top' },
                    styles: {
                        font: 'NotoSerif-Regular'
                    }
                }
            };
            DevExpress.pdfExporter.exportDataGrid(options).then(() => {
                pdfDoc.setFontSize(5);
            }).then(() => {
                pdfDoc.save('HızlıIsEmri.pdf');
            });
        }
        if (e.itemData.Id == 2) {            
            const options = {
                jsPDFDocument: pdfDoc,
                component: FastTicketDataGrid,
                autoTableOptions: {
                    rowPageBreak: 'auto',
                    bodyStyles: { valign: 'top' },
                    styles: {
                        font: 'NotoSerif-Regular'
                    }
                },
                selectedRowsOnly: true
            };
            DevExpress.pdfExporter.exportDataGrid(options).then(() => {
                pdfDoc.setFontSize(5);
            }).then(() => {
                pdfDoc.save('HızlıIsEmri.pdf');
            });
        }
    }
</script>


<style>
    #frmFastTicket {
        padding: 20px;
    }

    .dpbColor {
        background-color: #337ab7;
        border-radius: 4px;
    }

    .btn-class-dias:hover {
        background-color: #5cb85c;
    }

    .dx-datagrid-text-content {
        color: black;
        font-weight: 700;
    }

    .dx-datagrid-export-button {
        background-color: #337ab7;
    }

    /*bu ve altındaki css özelliği yazıların ve ikonların beyaz olmasını sağlamaktadır.*/
    .dx-button-mode-outlined {
        background-color: transparent;
        border-color: #ddd;
        color: white;
    }

    .dx-button-mode-outlined .dx-icon {
        color: white;
    }

    .dx-icon-export-to {
        color: white !important;
    }

    .dx-icon-export-excel-button {
        color: white !important;
    }


    .dx-datagrid-export-button.dx-state-hover {
        background-color: #285f8f !important;
    }

    .dx-datagrid-export-button.dx-state-active {
        background-color: #285f8f !important;
    }


    .dx-datagrid-column-chooser-button {
        background-color: #337ab7;
    }

    .dx-icon-column-chooser {
        color: white !important;
    }

    .dx-datagrid-column-chooser-button.dx-state-hover {
        background-color: #285f8f !important;
    }

    .dx-datagrid-column-chooser-button.dx-state-active {
        background-color: #285f8f !important;
    }

    #fastTicketFilterSearch {
        width: 108px !important;
    }
</style>
