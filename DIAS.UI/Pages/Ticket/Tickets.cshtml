@page
@using Newtonsoft.Json;
@using static DiasShared.Enums.Standart.TicketEnums
@using DiasShared.Data.EF_Data.DiasFacilityManagement.SqlServer.DataTransferObjects.Development.Shared.Custom
@using DiasShared.Data.EF_Data.DiasFacilityManagement.SqlServer.DataTransferObjects.Development.Shared.Standard
@using DIAS_UI.Helpers
@using DIAS.UI.Helpers
@model DIAS.UI.Pages.Ticket.CustomTicketDto
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf

@{


    //List<CustomLocationDto> emp = (List<CustomLocationDto>)ViewData["Locations"];

    var user = SessionHelper.GetObjectFromJson(HttpContext.Session, "user");
    var convertedUser = JsonConvert.DeserializeObject<UserDto>(user);
    var userViewData = convertedUser;

    var locationsViewData = (List<CustomLocationDto>)ViewData["Locations"];
    var prioritiesViewData = (List<TicketPriorityDto>)ViewData["TicketPriorities"];
    List<TicketHistory> ticketHistories = new List<TicketHistory>

{
    new TicketHistory
    {
        Id=1,
        DateWithTime = DateTime.Now,
        Name = "Dinçer",
        IP="127.0.0.1",
        SurnaName="Aslan",
        UpdatedArea="Öncelik",
        oldValue="Yüksek",
        newValue="Kritik"
    }
    };
}

<script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="~/js/pages/ticket/tickets.js"></script>
<script src="~/js/pages/shared/reason.js"></script>
<script src="~/js/pages/shared/location.js"></script>
@*<link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Roboto&display=swap" rel="stylesheet">*@
<script src="~/helper/trCharHelper.js"></script>
<script src="https://unpkg.com/devextreme-aspnet-data/js/dx.aspnet.data.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/babel-polyfill/7.10.1/polyfill.min.js" defer></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/exceljs/3.8.0/exceljs.min.js" defer></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.5/FileSaver.min.js" defer></script>
<script src="sweetalert2.all.min.js"></script>
<script src="sweetalert2.min.js"></script>
<link rel="stylesheet" href="sweetalert2.min.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/polyfills.umd.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.14/jspdf.plugin.autotable.min.js"></script>
<script src="https://unpkg.com/jspdf@latest/dist/jspdf.umd.min.js"></script>
<script src="https://unpkg.com/jspdf@2.5.1/dist/jspdf.es.min.js"></script>
<script src="https://unpkg.com/jspdf-autotable@3.5.23/dist/jspdf.plugin.autotable.js"></script>

<script>
    window.jsPDF = window.jspdf.jsPDF;
    applyPlugin(window.jsPDF);
</script>

<div class="card">
    <div class="card-header" role="tab" id="accord1">
        <h5 class="mb-0">
            <a data-toggle="collapse" href="#collapse-pane-1" role="button" aria-expanded="true" aria-controls="collapse-pane-1">
                <i style="margin-right:5px" class="fa fa-filter" aria-hidden="true"></i>Filtre
            </a>
        </h5>
    </div>

    <div id="collapse-pane-1" class="collapse " role="tabpanel" aria-labelledby="accord1">
        <div class="card-body">
            @(Html.DevExtreme().Form().ID("frmTicket").ColCount(12).ShowColonAfterLabel(false).Items(items =>
            {
            items.AddSimple().ColSpan(4).Label(l => l.Text("Vaka Nedeni"))
            .Template(@<text> @await Html.PartialAsync("../Shared/Filter/_FilterReasonTemplate")</text>);

            items.AddSimple().ColSpan(4).Label(l => l.Text("İş Emri Durumu"))
            .Template(@<text> @await Html.PartialAsync("../Shared/Filter/_FilterTicketStateTemplate")</text>);

            items.AddSimple().ColSpan(4).Label(l => l.Text("Mahal"))

            .Template(@<text> @await Html.PartialAsync("../Shared/Filter/_FilterLocationTemplate")</text>);

            items.AddSimple().ColSpan(4).Label(l => l.Text("Öncelik"))
            .Editor(e => e.SelectBox()
            .ID("sbPriorityFilter")
            .DeferRendering(false)
            .DataSource(d => d.RemoteController()
            .Key("Id")
            .LoadUrl(Url.Page(null, "TicketPriorityData"))
            )
            .OnOpened("onOpenedPriorityFilter")
            .ValueExpr("Id")
            .DisplayExpr("Name")
            .ShowClearButton(true));


            items.AddSimple().ColSpan(4).Label(l => l.Text("Sorumlu Kişi"))
            .Template(@<text> @await Html.PartialAsync("../Shared/Filter/_FilterUserTemplate")</text>);

            items.AddSimple().ColSpan(4).Label(l => l.Text("Açıklama")).Editor(e => e.TextBox().ID("textDescription").ShowClearButton(true));

            items.AddSimple().ColSpan(4).Label(l => l.Text("İş Emri Numarası")).Editor(e => e.TextBox().ID("ticketCode").ShowClearButton(true));

            items.AddSimple().ColSpan(4).Label(l => l.Text("İşe Başlama Tarihi Başlangıç"))
            .Editor(e => e.DateBox().ID("filterDateTicketStart").OnValueChanged("onValueChangefilterDateTicketStartStart")
            .ShowClearButton(true)
            .Type(DateBoxType.DateTime)
            .DisplayFormat("dd/MM/yyyy HH:mm:ss")
            .Placeholder("Tarih seçiniz."));

            items.AddSimple().ColSpan(4).Label(l => l.Text("İşe Başlama Tarihi Bitiş"))
            .Editor(e => e.DateBox().ID("filterDateTicketEnd").OnValueChanged("onValueChangefilterDateTicketStartEnd")
            .ShowClearButton(true)
            .Type(DateBoxType.DateTime)
            .DisplayFormat("dd/MM/yyyy HH:mm:ss")
            .Placeholder("Tarih seçiniz."));

            items.AddSimple().ColSpan(4).Label(l => l.Text("Kayıt Altına Alan Kişi")).Editor(e => e.SelectBox()
            .ID("sbTicketUserFilterTicketOwner")
            .DataSource(d => d.RemoteController()
            .Key("Id")
            .LoadUrl(Url.Page(null, "UserData"))
            ).DataSourceOptions(o => o.Paginate(true).PageSize(20))
            .DeferRendering(true)
            .ValueExpr("Id")
            .DisplayExpr(new JS("Shared.sbTicketUserDiplayExpr"))
            .ShowClearButton(true)
            .SearchEnabled(true)
            .SearchExpr("FirstName", "LastName", "UserName", "Email"));


            items.AddSimple().ColSpan(4).Label(l => l.Text("Hedeflenen Müdahale Zamanı Başlangıç"))
            .Editor(e => e.DateBox().ID("filterResponseTimeTargetedStart").OnValueChanged("onChangeFilterResponseTimeTargetedStart")
            .ShowClearButton(true)
            .Type(DateBoxType.DateTime)
            .DisplayFormat("dd/MM/yyyy HH:mm:ss")
            .Placeholder("Hedeflenen Müdahale Zamanı seçiniz."));

            items.AddSimple().ColSpan(4).Label(l => l.Text("Hedeflenen Müdahale Zamanı Bitiş"))
            .Editor(e => e.DateBox().ID("filterResponseTimeTargetedEnd").OnValueChanged("onChangeFilterResponseTimeTargetedEnd")
            .ShowClearButton(true)
            .Type(DateBoxType.DateTime)
            .DisplayFormat("dd/MM/yyyy HH:mm:ss")
            .Placeholder("Hedeflenen Müdahale Zamanı seçiniz."));

            items.AddSimple().ColSpan(4).Label(l => l.Text("Bildiren Kişi")).Editor(e => e.TextBox().ID("filterDeclarativeUser").ShowClearButton(true));

            items.AddSimple().ColSpan(4).Label(l => l.Text("Hedeflenen Çözüm Zamanı Başlangıç"))
            .Editor(e => e.DateBox().ID("filterResoluitonTimeTargetedStart").OnValueChanged("onChangeFilterResoluitonTimeTargetedStart")
            .ShowClearButton(true)
            .Type(DateBoxType.DateTime)
            .DisplayFormat("dd/MM/yyyy HH:mm:ss")
            .Placeholder("Hedeflenen Çözüm Zamanı seçiniz."));
            items.AddSimple().ColSpan(4).Label(l => l.Text("Hedeflenen Çözüm Zamanı Bitiş"))
            .Editor(e => e.DateBox().ID("filterResoluitonTimeTargetedEnd").OnValueChanged("onChangeFilterResoluitonTimeTargetedEnd")
            .ShowClearButton(true)
            .Type(DateBoxType.DateTime)
            .DisplayFormat("dd/MM/yyyy HH:mm:ss")
            .Placeholder("Hedeflenen Çözüm Zamanı seçiniz."));

            items.AddSimple().ColSpan(4).Label(l => l.Text("Telefon")).Editor(e => e.TextBox().ID("txtPhoneFilter")
            //.Mask("(X00) 000-0000")
            //.MaskRules(new { X = new JS("/[02-9]/") })
            );

            items.AddSimple().ColSpan(4).Label(l => l.Text("Atama Grubu"))

            .Template(@<text> @await Html.PartialAsync("../Shared/Filter/_FilterAssignGroupTemplate")</text>);

            items.AddSimple().ColSpan(4).Label(l => l.Text("Müdahale Edilme Zamanı"))
            .Editor(e => e.DateBox().ID("filterResponsedTime")
            .ShowClearButton(true)
            .Type(DateBoxType.DateTime)
            .DisplayFormat("dd/MM/yyyy HH:mm:ss")
            .Placeholder("Müdahale Edilme Zamanı seçiniz."));

            items.AddSimple().ColSpan(4).Label(l => l.Text("Çözüm Zamanı"))
            .Editor(e => e.DateBox().ID("filterResoluitonedTime")
            .ShowClearButton(true)
            .Type(DateBoxType.DateTime)
            .DisplayFormat("dd/MM/yyyy HH:mm:ss")
            .Placeholder("Çözüm Zamanı seçiniz."));

            items.AddSimple().ColSpan(4).Label(l => l.Text("Kapatılma Tarihi"))
            .Editor(e => e.DateBox().ID("filterClosedTime")
            .ShowClearButton(true)
            .Type(DateBoxType.DateTime)
            .DisplayFormat("dd/MM/yyyy HH:mm:ss")
            .Placeholder("Kapatılma Tarihi seçiniz."));

            items.AddEmpty().ColSpan(8);
            items.AddEmpty().ColSpan(10);

            items.AddButton().ColSpan(1)
            .ButtonOptions(a => a.Text("Ara")
            .ID("ticketSearch")
            .Icon("fas fa-search")
            .Type(ButtonType.Default)
            .OnClick("btn_ticketFindClick")
            .UseSubmitBehavior(true)
            .Hint("Kayıtları Filtrele"))
            .HorizontalAlignment(HorizontalAlignment.Right);

            items.AddButton().ColSpan(1)
            .ButtonOptions(a => a.Text("Temizle")
            .ID("ticketClean")
            .Type(ButtonType.Default)
            //.OnContentReady("onContentReadyButtonClean")
            .Icon("fas fa-broom")
            .Type(ButtonType.Default)
            .OnClick("clearAll")
            .UseSubmitBehavior(true)
            .Hint("Filtre Temizle"))
            .HorizontalAlignment(HorizontalAlignment.Right);

                @*items.AddSimple().ColSpan(6).Label(l => l.Text("Çözüm Tarihi")).Editor(e=>e.RangeSlider()
                    .ID("handler-range-slider")
                    .Min(0)
                    .Max(100)
                    .Start(10)
                    .End(90)
                    .OnContentReady("rangeSlider_onContentReady")
                    .OnValueChanged("rangeSlider_valueChanged"));

                    items.AddEmpty().ColSpan(6);
                    items.AddSimple().ColSpan(6).Label(l => l.Text("Çözüm Tarihi Değer")).Editor(e=>e.NumberBox()
                    .ID("start-value")
                    .Value(10)
                    .Min(0)
                    .Max(100)
                    .ShowSpinButtons(true)
                    .OnValueChanged("startValue_changed"));
                    items.AddEmpty().ColSpan(6);

                    items.AddSimple().ColSpan(6).Label(l => l.Text("Çözüm Tarihi Değer")).Editor(e=>e.NumberBox()
                    .ID("end-value")
                    .Value(90)
                    .Min(0)
                    .Max(100)
                    .ShowSpinButtons(true)
                    .OnValueChanged("endValue_changed"));*@

            }))
            @*<div class="form">
                <div style="display:flex;">
                <div class="dx-fieldset col-md-6" style="margin-left: 0px;margin-bottom: 0px;">
                <div class="dx-fieldset-header">Çözüm Süresi</div>
                <div class="dx-field">
                @(Html.DevExtreme().RangeSlider()
                .ID("handlerRangeSliderResolutionTime")
                .Min(0)
                .Max(100)
                .Start(10)
                .End(90)
                .OnValueChanged("rangeSliderValueChangedResolutionTime")
                )
                </div>
                <div class="dx-field">
                <div class="dx-field-label">Çözüm Süresi Min</div>
                <div class="dx-field-value">
                @(Html.DevExtreme().NumberBox()
                .ID("startValueResolutionTime")
                .Value(10)
                .Min(0)
                .Max(100)
                .ShowSpinButtons(true)
                .OnValueChanged("startValueChangedResolutionTime")
                )
                </div>
                </div>
                <div class="dx-field">
                <div class="dx-field-label">Çözüm Süresi Max</div>
                <div class="dx-field-value">
                <div id="endValueResolutionTime"></div>
                @(Html.DevExtreme().NumberBox()
                .ID("endValueResolutionTime")
                .Value(90)
                .Min(0)
                .Max(100)
                .ShowSpinButtons(true)
                .OnValueChanged("endValueChangedResolutionTime")
                )
                </div>
                </div>
                </div>
                <div class="dx-fieldset col-md-6" style="margin-left: 0px;margin-bottom: 0px;margin-right: 0px;">
                <div class="dx-fieldset-header">Müdehale Süresi</div>
                <div class="dx-field">
                @(Html.DevExtreme().RangeSlider()
                .ID("handlerRangeSliderResponseTime")
                .Min(0)
                .Max(100)
                .Start(10)
                .End(90)
                .OnValueChanged("rangeSliderValueChangedResponseTime")
                )
                </div>
                <div class="dx-field">
                <div class="dx-field-label">Müdehale Süresi Min</div>
                <div class="dx-field-value">
                @(Html.DevExtreme().NumberBox()
                .ID("startValueResponseTime")
                .Value(10)
                .Min(0)
                .Max(100)
                .ShowSpinButtons(true)
                .OnValueChanged("startValueChangedResponseTime")
                )
                </div>
                </div>
                <div class="dx-field">
                <div class="dx-field-label">Müdehale Süresi Max</div>
                <div class="dx-field-value">
                <div id="endValueResponseTime"></div>
                @(Html.DevExtreme().NumberBox()
                .ID("endValueResponseTime")
                .Value(90)
                .Min(0)
                .Max(100)
                .ShowSpinButtons(true)
                .OnValueChanged("endValueChangedResponseTime")
                )
                </div>
                </div>
                </div>
                </div>
                </div>*@
        </div>
    </div>
</div>
<div class="card">
    <div class="card-header" role="tab" id="accord2">
        <h5 class="mb-0">
            <a class="collapsed" data-toggle="collapse" href="#collapse-pane-2" role="button" aria-expanded="false" aria-controls="collapse-pane-2">
                <i style="margin-right:5px" class="fas fa-ticket-alt"></i>Liste
            </a>
        </h5>
    </div>
    <div id="collapse-pane-2" class="collapse show" role="tabpanel" aria-labelledby="accord2">
        <div class="card-body">
            @(Html.DevExtreme().DataGrid<CustomTicketDto>()
            .ID("gridTicket")
            .ErrorRowEnabled(false)
            .DataSource(ds => ds.RemoteController()
            .OnBeforeSend("beforeSend")
            .Key("Id")
            .LoadUrl(Url.Page(null, "GridData"))
            .InsertUrl(Url.Page(null, "GridRow"))
            .UpdateUrl(Url.Page(null, "GridRowUpdate"))
            )
            .Export(o=>o.Enabled(true).AllowExportSelectedData(true))
            .OnExporting("ticketGridDataExporting")
            .Paging(p => p.PageSize(10).Enabled(true))
            .Pager(pager => pager.ShowNavigationButtons(true).Visible(true).ShowInfo(true).ShowPageSizeSelector(true).AllowedPageSizes(new JS("[10, 50, 100]")))
            .ShowColumnHeaders(true)
            .OnDataErrorOccurred("OnDataErrorOccurred")
            .AllowColumnReordering(true)
            .HeaderFilter(o=>o.AllowSearch(true))
            .FilterRow(o => o.Visible(true).ShowOperationChooser(true))
            .Selection(s => s.Mode(SelectionMode.Single))
            .OnSelectionChanged("onSelectionChanged")
            .OnInitialized("OnInitialized")
            .OnToolbarPreparing("onToolbarPreparing")
            .OnCellPrepared("OnCellPrepared")
            .OnContentReady("onContentReadyGrid")
            .RemoteOperations(true)
            .ColumnChooser(c => c.Enabled(true).AllowSearch(true).Mode(GridColumnChooserMode.Select).Title("Sütün Ekleme/Kaldırma"))
            .ShowBorders(true)
            .Editing(e => e.Mode(GridEditMode.Popup)
            .AllowUpdating(true)
            .UseIcons(true)
            .EditColumnName("İşlemler")
            .AllowAdding(true)
            .SelectTextOnEditStart(true)
            .StartEditAction(GridStartEditAction.DblClick)
            .Popup(p => p
            .Title("İş Emri Ekle")
            .ID("popupContainer")
            .ShowTitle(true)
            .MaxWidth("1000px")
            .MinWidth("960px")
            .Height("98%")
            .OnShowing("setPopupTitle")
            .ShowCloseButton(false)
            .Position(PositionAlignment.Center)

            )
            .Form(f => f.Items(items =>
            {
            items.AddGroup()
            .Items(groupItems =>
            {
            groupItems.AddTabbed()
            .TabPanelOptions(o =>
            {
            o.DeferRendering(false);
            o.AnimationEnabled(true);
            o.ID("ticketTab");
            o.Width(900);
            o.OnInitialized("tabs_Initialized");
            o.AnimationEnabled(true);
            o.ShowNavButtons(true);
            o.Height("100%");
            o.OnItemRendered("Tickets.tabTicketItemRendered");
            })
            .Tabs(tabItems =>
            {
            tabItems.Add().Icon("fas fa-save").AlignItemLabels(true).Disabled(new JS("DenemeDisabled"))
            .Title("İş Emri Bilgileri").ColCount(2)
            .Items(tabItem =>
            {
            tabItem.AddSimpleFor(m => m.TicketReasonId).ColSpan(1)
            .Label(l => l.Text("Vaka Nedeni").Visible(true))
            .Editor(e=>e.DropDownBox()
            .ID("dropDownReasonSingle").Disabled(false)
            .DataSource(d => d.RemoteController().LoadUrl(Url.Page(null, "TicketReasonData")).Key("HierarchyId"))
            .DeferRendering(true)
            .ValueExpr("HierarchyId")
            .DisplayExpr("CategoryName")
            .DropDownOptions(o => o.Height(350).Width(402))
            .Placeholder("Vaka Nedeni Seçiniz")
            .ShowClearButton(true)
            .OnValueChanged("treeBox_valueChangedReason")
            .ContentTemplate(
                @<text>
                    @await Html.PartialAsync("../Shared/_ReasonTreeViewSingle")
                </text>
            ))
            .ValidationRules(v =>
            {
            v.AddRequired().Message("Vaka Nedeni Boş Geçilemez");
            });
            tabItem.AddButton().ColSpan(1).ButtonOptions(bo => bo.Text("Mahal Ekle").Icon("box").Width("54%").Height("32px").OnClick("onclickMahalPopup").ID("addMahalButton").Template(@<text>
                    <div>Mahal Ekle<span class='badge badge-info'></span></div>
                </text>));

            tabItem.AddSimpleFor(m => m.TicketDescription).ColSpan(2)
            .Label(l => l.Text("Açıklama").Visible(true)).Editor(e => e.TextArea().ID("textAreaDescription")
            .Placeholder("Açıklama giriniz...").Height(100))
            .ValidationRules(v =>
            {
            v.AddRequired().Message("Açıklama Alanı Boş Geçilemez");
            });
            tabItem.AddSimpleFor(m => m.TicketOpenedTime).ColSpan(1)
            .Label(l => l.Text("İşe Başlama Tarihi").Visible(true)).Editor(e => e.DateBox().ID("dateTicket")
            .ShowClearButton(true)
            .OnValueChanged("onValueChangeOpenedTime")
            .Type(DateBoxType.DateTime)
            .DisplayFormat("dd/MM/yyyy HH:mm:ss")
            .Placeholder("Tarih seçiniz."))
            .ValidationRules(v =>
            {
            v.AddRequired().Message("Tarih boş geçilemez.");
            });

            tabItem.AddSimpleFor(m => m.TicketPriorityId).ColSpan(1).Label(l => l.Text("Öncelik").Visible(true))
            .Editor(e => e.SelectBox()
            .ID("sbTicketPriority")
            .DataSource(d => d.RemoteController()
            .Key("Id")
            .LoadUrl(Url.Page(null, "TicketPriorityData")))
            .DisplayExpr("Name")
            .ShowClearButton(true)
            .DeferRendering(false)
            .SearchEnabled(true)
            .OnOpened("onOpenedPriority")
            .Placeholder("Öncelik seçiniz.")
            .ValueExpr("Id"))
            .ValidationRules(v =>
            {
            v.AddRequired().Message("Öncelik Boş Geçilemez");
            });
            tabItem.AddSimpleFor(m => m.AddedTime).ColSpan(1)
            .Label(l => l.Text("Ekleme Tarihi").Visible(true)).Editor(e => e.DateBox().ID("dateTicketAddedTime")
            .ReadOnly(true)
            .ShowClearButton(true)
            .Type(DateBoxType.DateTime)
            .DisplayFormat("dd/MM/yyyy HH:mm:ss")
            .Placeholder("Tarih seçiniz."));

            tabItem.AddSimple().ColSpan(1);
            tabItem.AddSimple().Template(@<text><hr /></text>).ColSpan(2);

            tabItem.AddSimpleFor(m => m.TickedAssignedAssignmentGroupId)
            .Label(l => l.Text("Sorumlu Grup/Kişi").Visible(true))
            .Editor(e => e.SelectBox()
            .ID("sbAsgGroup").OnValueChanged("OnValueChangedAsgGroup")
            .DataSource(d => d.RemoteController()
            .Key("Id")
            .LoadUrl(Url.Page(null, "TicketAssignmentGroupDataGetAll")))
            .DeferRendering(true)
            .ValueExpr("Id")
            .DisplayExpr("GroupName")
            .ShowClearButton(true)
            .SearchEnabled(true)
            .Placeholder("Sorumlu grup seçiniz."));


            tabItem.AddSimpleFor(m => m.TicketAssignedUserId)
            .Label(l => l.Text("Sorumlu Kişi").Visible(true))
            .Editor(e => e.SelectBox()
            .ID("sbAsgGroupEmp")
            .DataSource(d => d.RemoteController()
            .Key("Id")
            .LoadUrl(Url.Page(null, "UserData")))
            .DataSourceOptions(o => o.Paginate(true).PageSize(20))
            .DeferRendering(false)
            .ValueExpr("Id")
            .DisplayExpr(new JS("Shared.sbTicketUserDiplayExpr"))
            .ShowClearButton(true)
            .SearchEnabled(true)
            .Placeholder("Sorumlu kişi seçiniz.")
            .SearchExpr("FirstName", "LastName", "UserName", "Email"));

            tabItem.AddSimple().Template(@<text><hr /><label style="font-weight: bold;">Bildiren</label></text>).ColSpan(1);
            tabItem.AddSimple().Template(@<text><hr /><label style="font-weight: bold;">Kayıt Altına Alan</label></text>).ColSpan(1);
            tabItem.AddSimple().ColSpan(1).Label(l => l.Text("Ad/Soyad")).Editor(e => e.TextBox().ID("TicketReportedUserId").ShowClearButton(true));


            tabItem.AddSimpleFor(m => m.TicketOwnerUserId).ColSpan(1)
            .Label(l => l.Text("Ad/Soyad").Visible(true))
            .Editor(e => e.SelectBox()
            .ID("ticketUserId")
            .DataSource(d => d.RemoteController()
            .Key("Id")
            .LoadUrl(Url.Page(null, "UserData")))
            .DataSourceOptions(o => o.Paginate(true).PageSize(20))
            .DeferRendering(true)
            .ValueExpr("Id").Value(userViewData.Id)
            .DisplayExpr(new JS("Shared.sbTicketUserDiplayExpr"))
            .ShowClearButton(true)
            .ReadOnly(true)
            .SearchEnabled(true)
            .Placeholder("Bildiren kişi seçiniz.")
            .SearchExpr("FirstName", "LastName", "UserName", "Email"))
            //.ValidationStatus(ValidationStatus.Invalid))
            .ValidationRules(v =>
            {
            v.AddRequired().Message("Bildiren Kişi Boş Geçilemez");
            });
            tabItem.AddSimpleFor(m => m.TicketReportedUserPhone).ColSpan(1).Label(l=>l.Text("Telefon Numarası")).Editor(e => e.TextBox().ID("txtPhone")
            .Mask("(X00)000-0000")
            .MaskRules(new { X = new JS("/[02-9]/") }));

            tabItem.AddSimpleFor(m => m.PhoneNumberKayitAltinaAlan).ColSpan(1).Label(l => l.Text("Telefon Numarası")).Editor(e => e.TextBox().ID("txtPhoneKayitAltinaAlan")
            .Mask("(X00) 000-0000")
            .MaskRules(new { X = new JS("/[02-9]/") }));
            tabItem.AddSimple().Template(@<text><hr /><label style="font-weight: bold;">Müdehale Zamanları</label></text>).ColSpan(1);
            tabItem.AddSimple().Template(@<text><hr /><label style="font-weight: bold;">Çözüm Zamanları</label></text>).ColSpan(1);

            tabItem.AddSimple().ColSpan(1).Label(l => l.Text("Müdehale edilme Zamanı").Visible(true)).Editor(e => e.DateBox().ID("dateResponseTimeSolvedStarted")
            .ShowClearButton(true)
            .Disabled(true)
            .Type(DateBoxType.DateTime)
            .DisplayFormat("dd/MM/yyyy HH:mm:ss")
            .ReadOnly(true));

            tabItem.AddSimple().ColSpan(1).Label(l => l.Text("Çözüm edilme Zamanı").Visible(true)).Editor(e => e.DateBox().ID("dateResolutionTimeSolved")
            .ShowClearButton(true)
            .Type(DateBoxType.DateTime)
            .DisplayFormat("dd/MM/yyyy HH:mm:ss")
            .Disabled(true)
            .ReadOnly(true));
            tabItem.AddSimple().ColSpan(1).Label(l => l.Text("Müdehale Süresi").Visible(true)).Editor(e => e.TextBox().ID("dateResponseTimeText")
            .Disabled(true)
            .ReadOnly(true));
            tabItem.AddSimple().ColSpan(1).Label(l => l.Text("Çözüm Süresi").Visible(true)).Editor(e => e.TextBox().ID("dateResolutionTimeText")
            .Disabled(true)
            .ReadOnly(true));
            tabItem.AddSimple().ColSpan(1).Label(l => l.Text("Hedeflenen Müdehale Zamanı").Visible(true)).Editor(e => e.DateBox().ID("dateResponseTime")
            .ShowClearButton(true)
            .Disabled(true)
            .Type(DateBoxType.DateTime)
            .DisplayFormat("dd/MM/yyyy HH:mm:ss")
            .ReadOnly(true));
            tabItem.AddSimple().ColSpan(1).Label(l => l.Text("Hedeflenen Çözüm Zamanı").Visible(true)).Editor(e => e.DateBox().ID("dateResolutionTime")
            .ShowClearButton(true)
            .Type(DateBoxType.DateTime)
            .DisplayFormat("dd/MM/yyyy HH:mm:ss")
            .Disabled(true)
            .ReadOnly(true));
            });

            tabItems.Add()
            .Title("Notlar")
            .Icon("far fa-file-alt").Disabled(true)
            .Template(new TemplateName("tabTicketNotesTemplate"));

            tabItems.Add()
            .Title("Dosyalar")
            .Icon("fas fa-paperclip")
            .Template(new TemplateName("tabTicketAttachmentsGridTemplate"));

            tabItems.Add()
            .Title("Sorular")
            .Icon("fas fa-question")
            .Template(new TemplateName("tabSurveyQuestionTemplate"));

            tabItems.Add()
            .Title("Tarihçe")
            .Template(new TemplateName("tabTicketHistoryGridTemplate"));
            });
            });


            }).ID("ticketForm")))
            .Columns(columns =>
            {

            columns.Add().AllowExporting(false)
            .Caption("")
            .AllowSearch(false)
            .AllowSorting(false)
            .Alignment(HorizontalAlignment.Center)
            .CellTemplate(new JS("cellTemplate_CurrentStatus"))
            .Width(41);

            //columns.AddFor(y => y.TicketPriorityGridId).Caption("Öncelik").AllowEditing(true).Visible(true)
            //        .Lookup(l => l.DataSource(Html.GetEnumSelectList<PriorityEnum>().Select(i => new { Value = int.Parse(i.Value), Text = i.Text })).ValueExpr("Value").DisplayExpr("Text"));
            columns.AddFor(y => y.TicketPriorityId).Caption("Öncelik").AllowEditing(true).Visible(true)
            .Lookup(l => l.DataSource(prioritiesViewData.Select(i => new { Value = i.Id, Text = i.Name })).ValueExpr("Value").DisplayExpr("Text")).Visible(false);

            columns.AddFor(m => m.TicketCode).Width(150).Caption("İş Emri No").AllowEditing(true).Visible(false);
            columns.AddFor(m => m.TicketStatus.Name).Caption("İş Emri Durumu");

            columns.AddFor(m => m.TicketReason.TicketReasonCategory.CategoryName).Caption("Vaka Kategorisi").AllowEditing(true).AllowResizing(true);
            columns.AddFor(m => m.TicketReason.ReasonName).Caption("Vaka Nedeni").AllowEditing(true).AllowResizing(true);

            columns.AddFor(m => m.TicketAssignedUser.FirstName).Caption("Sorumlu Kişi Ad");
            columns.AddFor(m => m.TicketAssignedUser.LastName).Caption("Sorumlu Kişi Soyad");
            //columns.Add().CellTemplate(new JS("AssignedUserOrAssignedGrup"));


            columns.AddFor(m => m.Location1).Caption("Bina").AllowEditing(true).AllowResizing(true);
            columns.AddFor(m => m.Location2).Caption("Kat").AllowEditing(true).AllowResizing(true);
            columns.AddFor(m => m.Location3).Caption("Kanat").AllowEditing(true).AllowResizing(true);
            columns.AddFor(m => m.Location4).Caption("Lokasyon No").AllowEditing(true).AllowResizing(true);


            columns.AddFor(m => m.AddedByUser.FirstName).Caption("Ekleyen Kullanıcı Ad").AllowEditing(true).Visible(false);
            columns.AddFor(m => m.AddedByUser.LastName).Caption("Soyad").AllowEditing(true).Visible(false);
            columns.AddFor(m => m.TicketOpenedTime).Caption("İşe Başlama Tarihi").DataType(GridColumnDataType.DateTime).Format("dd/MM/yyyy HH:mm").Alignment(HorizontalAlignment.Center).Width(180).Visible(false);
            //todo : SetCellValue ile kolondaki iki sütunun değişmesi işlemi yapılacak.
            //columns.AddFor(m => m.TicketReason.ResponseTime).Caption("Müdehale Süresi").CustomizeText("customizeTextResponseTime").Alignment(HorizontalAlignment.Center).Width(100);

            columns.AddFor(m => m.ExpectedResponseTime).Caption("Hedeflenen Müdahale Zamanı").DataType(GridColumnDataType.DateTime).Format("dd/MM/yyyy HH:mm").Alignment(HorizontalAlignment.Center).CellTemplate(new JS("EditCellTemplateExpectedResponseTime")).Width(180);
            //columns.Add().Caption("Hedeflenen Müdahale Zamanı").DataType(GridColumnDataType.Date).Format("dd/MM/yyyy").Alignment(HorizontalAlignment.Center).CalculateCellValue("CalculateCellValueExpectedResponseTime").Width(180);


            //todo : SetCellValue ile kolondaki iki sütunun değişmesi işlemi yapılacak.
            //columns.AddFor(m => m.TicketReason.ResolutionTime).Caption("Çözüm Süresi").CustomizeText("customizeTextResolutionTime").Alignment(HorizontalAlignment.Center).Width(100);
            columns.AddFor(m => m.ExpectedResolutionTime).Caption("Hedeflenen Çözüm Zamanı").DataType(GridColumnDataType.DateTime).Format("dd/MM/yyyy HH:mm").Alignment(HorizontalAlignment.Center).CellTemplate(new JS("EditCellTemplateExpectedResolutionTime")).Width(180);
            columns.AddFor(y => y.TickedAssignedAssignmentGroup.GroupName).Caption("Sorumlu Grup").AllowEditing(true).Visible(false);
            //columns.AddFor(y => y.TicketAssignedUser.FirstName).Caption("Atanan Ad").AllowEditing(true).Visible(false);
            //columns.AddFor(y => y.TicketAssignedUser.LastName).Caption("SoyAd").AllowEditing(true).Visible(false);
            columns.AddFor(m=>m.DateTimeResponsedTimeString).Caption("Müdahele Edilme Tarihi").Visible(false).AllowExporting(true);
            columns.AddFor(m=>m.DateTimeResolutionedTimeString).Caption("Çözüm Edilme Tarihi").Visible(false).AllowExporting(true);


            columns.Add().Caption("İşlemler").CalculateCellValue("CalculateCellValue").Width(150).AllowExporting(false).CssClass("diasClass").CellTemplate(@<text>
                    @(Html.DevExtreme().DropDownButton()
                .ElementAttr(new JS("{ style: 'background-color: #337ab7;' }"))
                .Text("Seçenekler")
                .DeferRendering(true)
                .Icon("fas fa-ellipsis-v")
                .DataSource(d => d.RemoteController()
                .Key("Id")
                .LoadUrl(Url.Page(null, "TicketStateDataOption"))
                .LoadParams(new { ticketId = new JS("data.Id") }))
                .DropDownOptions(options => options.Width(250))
                .DisplayExpr("StateDescription")
                .KeyExpr("Id")
                .OnItemClick("btn_ticketStateOnClick")
                .ItemTemplate(new JS("btnStateTemplate"))
                    )
                </text>);

            })
            .OnEditingStart(@<text> function(e) {onEditingStart(e) } </text>)
            .OnInitNewRow(@<text> function(e) { OnInitNewRow(e); } </text>)

            .MasterDetail(md => md
            .Enabled(true)
            .Template(new JS("MasterDetailTemplate"))
            )
            )
        </div>
    </div>
</div>



@using (Html.DevExtreme().NamedTemplate("tabTicketNotesTemplate"))
{
    <div>
        @(Html.DevExtreme().TextArea().ID("textTicketNote").Placeholder("Notunuzu giriniz...").Height(150))

    </div>
    <div id="fileuploader-container">
        @(Html.DevExtreme().FileUploader()
    .ID("file-uploader")
    .Name("myFile")
    .Multiple(true)
    .Accept("*")
    .UploadMode(FileUploadMode.UseForm)
    .OnValueChanged("noteFileUploader_valueChanged")
    )
    </div>
    <div id="noteButtonDiv">
        @(Html.DevExtreme().Button().Text("Ekle").OnClick("noteKaydet").Icon("save").Type(ButtonType.Success).ID("noteButton"))

    </div>
    <div class="content" id="selected-files">
        <div>
            <h4>Seçilen Dosyalar</h4>
        </div>
    </div>
    <div>
        @(Html.DevExtreme().DataGrid<CustomTicketNoteDto>()
    .ID("ticketNotesGrid")
    .Editing(editing =>
    {
    //editing.Mode(GridEditMode.Row);
    //editing.AllowUpdating(true);
    //editing.AllowDeleting(true);
    editing.UseIcons(true);
    })
    .LoadPanel(panel => panel.Enabled(true))
    .RenderAsync(true)
    .DataSource(ds => ds.RemoteController()
    //.OnBeforeSend("beforeSendTicketNote")
    .Key("Id")
    .LoadUrl(Url.Page(null, "TicketNote"))
    .OnLoaded("onLoadedNoteGrid")
    .LoadParams(new { ticketId = new JS("noteLoadParams(data)") })
    )
    .RemoteOperations(true)
    .ShowColumnLines(false)
    .ShowRowLines(true)
    .Paging(paging => paging.Enabled(true).PageSize(6))
    .Columns(columns => {
    columns.AddFor(m => m.AddedByUser.FirstName).Caption("Ekleyen Kullanıcı Ad").Alignment(HorizontalAlignment.Left);
    columns.AddFor(m => m.AddedByUser.LastName).Caption("Ekleyen Kullanıcı Soyad").Alignment(HorizontalAlignment.Left);
    columns.AddFor(m => m.NoteText).Caption("Not").Alignment(HorizontalAlignment.Left);
    columns.AddFor(m=>m.AddedTime).Caption("Ekleme Tarihi").DataType(GridColumnDataType.Date).Format("dd/MM/yyyy").Alignment(HorizontalAlignment.Center);
    columns.Add().Caption("Ekler").DataField("Attachments").Alignment(HorizontalAlignment.Left).CellTemplate(new JS("TicketNoteGridCellTemplate"));
    columns.Add().Alignment(HorizontalAlignment.Center).Type(GridCommandColumnType.Buttons).Caption("İşlemler")
    .Visible(true)
    .Buttons(btns =>
    {
    btns.Add()
    //.Visible(true)
    .Visible(new JS("isIconVisible"))
    .Hint("Sil")
    .Name(GridColumnButtonName.Delete).OnClick("deleteTicketNote").Icon("remove");

    btns.Add()
    //.Visible(true)
    .Visible(new JS("isIconVisible"))
    .Hint("Dosya Ekle")
    .Name(GridColumnButtonName.Save).OnClick("addTicketNoteAttachment").Icon("add");

    }
    );
    })
    )
    </div>
}


@using (Html.DevExtreme().NamedTemplate("tabTicketAttachmentsGridTemplate"))
{
    <div id="fileuploader-container">
        @(Html.DevExtreme().FileUploader()
    .ID("attachment-uploader")
    .Name("myFile")
    .Multiple(true)
    .Accept("*")
    .UploadMode(FileUploadMode.UseForm)
    .ShowFileList(true)
    .OnValueChanged("attachmentUploader_valueChanged")
    )
    </div>
    <div id="attachmentButtonDiv">
        @(Html.DevExtreme().Button().Text("Ekle").Visible(false).OnClick("attachmentKaydet").Icon("save").Type(ButtonType.Success).ID("attachmentButton"))
    </div>

    <div>
        @(Html.DevExtreme().DataGrid<AttachmentDto>().ID("ticketAttachmentGrid")
    //.Editing(editing=>editing.AllowDeleting(true))
    .Editing(editing =>
    {
    //editing.Mode(GridEditMode.Row);
    //editing.AllowUpdating(true);
    //editing.AllowDeleting(true);
    editing.UseIcons(true);
    })
    .LoadPanel(panel => panel.Enabled(true))
    .ShowColumnLines(false)
    .ShowRowLines(true)
    .ShowBorders(true)
    .RenderAsync(true)
    .DataSource(ds => ds.RemoteController()
    //.OnBeforeSend("beforeSendTicketAttachment")
    .Key("Id")
    .LoadUrl(Url.Page(null, "TicketAttachment"))
    .OnLoaded("onLoadedAttachmentGrid")
    .LoadParams(new { ticketId = new JS("attachmentLoadParams(data)")}))
    .Paging(paging => paging.Enabled(true).PageSize(6))
    .RemoteOperations(true)
    .Columns(columns => {

    columns.AddFor(x => x.Id).Visible(false).Alignment(HorizontalAlignment.Left);
    columns.AddFor(x => x.AddedByUser.FirstName).Visible(true).Caption("Ekleyen Kullanıcı Ad").Alignment(HorizontalAlignment.Left);
    columns.AddFor(x => x.AddedByUser.LastName).Visible(true).Caption("Ekleyen Kullanıcı Soyad").Alignment(HorizontalAlignment.Left);
    //columns.AddFor(x => x.FolderName).Visible(false).Alignment(HorizontalAlignment.Left);
    columns.AddFor(x => x.AttachmentDescription).Caption("Açıklama").Visible(true).Alignment(HorizontalAlignment.Left);
    columns.Add().Caption("Dosya Eki").DataField("Attachments").Alignment(HorizontalAlignment.Left).CellTemplate(new JS("ticketAttachmentGridCellTemplate"));

    columns.Add().Alignment(HorizontalAlignment.Center).Type(GridCommandColumnType.Buttons).Caption("İşlemler")
    .Visible(true)
    .Buttons(btns =>
    {
    btns.Add()
    //.Visible(true)
    .Visible(new JS("isIconVisible"))
    .Hint("Sil")
    .Name(GridColumnButtonName.Delete).OnClick("deleteTicketAttachment").Icon("remove");
    }
    );
    })
    )
    </div>
}

@using (Html.DevExtreme().NamedTemplate("tabTicketHistoryGridTemplate"))
{
    <div>
        @(Html.DevExtreme().DataGrid<TicketHistory>().ID("ticketHistoryGrid")
    //.Editing(editing=>editing.AllowDeleting(true))
    .Editing(editing =>
    {
    //editing.Mode(GridEditMode.Row);
    //editing.AllowUpdating(true);
    //editing.AllowDeleting(true);
    editing.UseIcons(true);
    })
    .LoadPanel(panel => panel.Enabled(true))
    .ShowColumnLines(false)
    .ShowRowLines(true)
    .ShowBorders(true)
    .RenderAsync(true)
    .DataSource(ticketHistories,"Id")
    .Paging(paging => paging.Enabled(true).PageSize(6))
    .RemoteOperations(true)
    .Columns(columns => {

    columns.AddFor(x => x.DateWithTime).Visible(true).Caption("Tarih/Saat").Alignment(HorizontalAlignment.Left);
    columns.AddFor(x => x.IP).Visible(true).Caption("IP").Alignment(HorizontalAlignment.Left);
    columns.AddFor(x => x.Name).Visible(true).Caption("Güncelleyen Kullanıcı Ad").Alignment(HorizontalAlignment.Left);
    columns.AddFor(x => x.SurnaName).Visible(true).Caption("Güncelleyen Kullanıcı Soyad").Alignment(HorizontalAlignment.Left);
    columns.AddFor(x => x.UpdatedArea).Visible(true).Caption("Güncellenen Alan").Alignment(HorizontalAlignment.Left);
    columns.AddFor(x => x.oldValue).Visible(true).Caption("Eski Değer").Alignment(HorizontalAlignment.Left);
    columns.AddFor(x => x.newValue).Visible(true).Caption("Yeni Değer").Alignment(HorizontalAlignment.Left);
    })
    )
    </div>
}

@using (Html.DevExtreme().NamedTemplate("tabSurveyQuestionTemplate"))
{

    <div id="ticketSurveyQuestion"></div>



}

@(Html.DevExtreme().Popup()
    .ID("popupContainerMahal")
    .Visible(false)
    .Width("50%")
    .Height("70%")
    .ShowTitle(false)
    .ShowCloseButton(true)
)
@(Html.DevExtreme().Popup()
    .ID("popupAssignedUser")
    .Visible(false)
    .Width("50%")
    .Height("70%")
    .ShowTitle(false)
    .ShowCloseButton(true)
)



@using (Html.DevExtreme().NamedTemplate("LocationPopup"))
{

    @(Html.DevExtreme().DropDownBox()
                    .ID("dropDownLocation")
                    .DataSource(locationsViewData, "HierarchyId")
                    //.DataSource(d => d.RemoteController()
                    //.Key("HierarchyId")
                    //.LoadUrl(Url.Page(null, "LocationData")))
                    .DeferRendering(false)
                    .Width("50%")
                    .ValueExpr("HierarchyId")
                    .DisplayExpr("LocationName")
                    .DropDownOptions(o => o.Height(350))
                    .Placeholder("Mahal Seçiniz Seçiniz..")
                    .ShowClearButton(true)
                    .OnValueChanged("locationTreeBox_valueChanged")
                    .DropDownOptions(ddo=>ddo.ShowTitle(false))
                    .ContentTemplate(
    @<text>
        @await Html.PartialAsync("../Shared/_LocationTreeViewMultiple")
    </text>
                    ))
    @(Html.DevExtreme().ScrollView().Width("100%").Height("100%").Content(@<text>
        <div id="selectedLocation" class="container">
        </div>
    </text>))
    ;

}

@using (Html.DevExtreme().NamedTemplate("AssignUserPopup"))
{
    @(Html.DevExtreme().DropDownBox()
        .ID("assignedUser")
        .DataSource(d => d.RemoteController().LoadUrl(Url.Page(null, "TicketAssignmentGroupData")).Key("HierarchyId"))
        .DeferRendering(true)
        .ValueExpr("HierarchyId")
        .DisplayExpr("Name")
        .DropDownOptions(o => o.Height(350).Width(402))
        .Placeholder("Sorumlu grup/Kişi seçiniz.")
        .ShowClearButton(true)
        .OnValueChanged("treeBoxMulti_valueChangedAssigned")
        .ContentTemplate(
    @<text>
        @await Html.PartialAsync("../Shared/_AssignedGroupTreeViewMultiple")
    </text>
                    ))
}

@using (Html.DevExtreme().NamedTemplate("noteFileShowTemplate"))
{

    <div id="list">
    </div>

}

@(Html.DevExtreme().Popup()
    .ID("popupNoteShow")
    .Visible(false)
    .Width("50%")
    .Height("70%")
    .ShowTitle(false)
    .ShowCloseButton(true)
)
@(Html.DevExtreme().Popup()
    .ID("popupContainerTicketNoteAttachment")
    .Visible(false)
    .Width("50%")
    .Height("70%")
    .ShowTitle(false)
    .ShowCloseButton(true)
)


@using (Html.DevExtreme().NamedTemplate("TicketNoteAttachmentTemplate"))
{

    <div id="fileuploader-container">
        @(Html.DevExtreme().FileUploader()
    .ID("ticketNoteAttachmentFileUploader")
    .Name("ticketNoteAttachmentFile")
    .Multiple(true)
    .Accept("*")
    .UploadMode(FileUploadMode.UseForm)
    .OnValueChanged("ticketNoteAttachmentFileUploaderValueChanged")
    )
    </div>


}

@(Html.DevExtreme().LoadPanel()
        .ID("loadPanel")
        .ShadingColor("rgba(0,0,0,0.4)")
        .Position(p => p.Of("#divDetay"))
        //.Position(p=>p.At(HorizontalAlignment.Center,VerticalAlignment.Center))
        //.Position(p => p.My(HorizontalAlignment.))
        .Visible(false)
        .ShowIndicator(true)
        .ShowPane(true)
        .Shading(true)
        .CloseOnOutsideClick(false)
    )


<script type="text/javascript">

            let ticketNoteAttachmentFile = [];
            var FormDataTicketNoteAttachmentFile = new FormData();
            let ticketNoteId;
            var data;
            let attachmentFile;
            let noteFile = [];
            let locationsWithPopup = [];
            let locationsUpdate = [];
            let ticketStateId;
            let ticketStatusId;
            var DataGrid;
            var FormDataNoteFile = new FormData();
            var FormDataAttachmentFile = new FormData();
            const pdfOptionsOfTicket = [
                { Id: 1, name: 'Tüm Verileri Dışarı Aktar' },
                { Id: 2, name: 'Seçili Satırı Dışa Aktar' }
            ];

            //assignedgrup and user
            function AssignedUserOrAssignedGrup(container, options) {

            }

            function MasterDetailTemplate(container, options) {
                console.log("container", container);
                console.log("optionss", options);

               var addedInfoForTicketWithoutLocation =  $(`<div class="col-md-12" >
                        <div class="row" style="border: 1px solid; padding: 10px; border-radius: 5px; border-color: black; margin-bottom: 10px;">
                            <div class="col-md-3">
                                <div class="well">
                                    <h7>Vaka Nedeni</h7>
                                    <p>${options.data.TicketReason.ReasonName}</p>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="well">
                                    <h7>İş Emri Açıklaması</h7>
                                    <p>${options.data.TicketDescription}</p>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="well">
                                    <h7>İşe Başlama Tarihi</h7>
                                    <p>${options.data.TicketOpenedTime}</p>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="well">
                                    <h7>Öncelik</h7>
                                    <p>${options.data.TicketPriority.Name}</p>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="well">
                                    <h7>Notlar</h7>
                                    <p>${options.data.NotesCount} Adet Not Vardır</p>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="well">
                                    <h7>Dosyalar</h7>
                                    <p>${options.data.AttachemntsCount} Adet Dosya Vardır</p>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="well">
                                    <h7>İş Emri Kodu</h7>
                                <p>${options.data.TicketCode} </p>
                                </div>
                            </div>
                        </div>
                        <div class="row" style="border: 1px solid; padding: 10px; border-radius: 5px; border-color: black; margin-bottom: 10px;">
                            <div class="col-md-3">
                                <div class="well">
                                    <h7>Müdahele Edilme Tarihi</h7>
                                    <p>${options.data.DateTimeResponsedTimeString} </p>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="well">
                                    <h7>Müdahale Süresi</h7>
                                    <p>${options.data.TicketReason.ResponseTime} </p>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="well">
                                    <h7>Hedeflenen Müdahale Tarihi</h7>
                                    <p>${options.data.DateTimeResponseTimeString} </p>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="well">
                                    <h7>Çözüm Edilme Tarihi</h7>
                                    <p>${options.data.DateTimeResolutionedTimeString} </p>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="well">
                                    <h7>Çözüm Süresi</h7>
                                    <p>${options.data.TicketReason.ResolutionTime} </p>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="well">
                                    <h7>Hedeflenen Çözüm Tarihi</h7>
                                    <p>${options.data.DateTimeResolutionTimeString} </p>
                                </div>
                            </div>

                            </div>

                        <div class="row" style="border: 1px solid; padding: 10px; border-radius: 5px; border-color: black; margin-bottom: 10px;">
                            <div class="col-md-2">
                                <div class="well">
                                    <h7>Bildiren Kişi</h7>
                                    <p>${options.data.TicketReportedUserNameSurname} </p>
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="well">
                                    <h7>Kayıt Altına Alan Kişi</h7>
                                    <p>${options.data.AddedByUser.FirstName} ${options.data.AddedByUser.LastName} </p>
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="well">
                                    <h7>Kayıt Altına Alan Telefon</h7>
                                    <p>${options.data.AddedByUser.PhoneNumber} </p>
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="well">
                                    <h7>Sorumlu Grup</h7>
                                    <p>${options.data.TicketAssignedGrupString} </p>
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="well">
                                    <h7>Sorumlu Kişi</h7>
                                    <p>${options.data.TicketAssignedUserName} ${options.data.TicketAssignedUserLastName}</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>`).append().appendTo(container);
                $(`<div class="row" style="border: 1px solid; padding: 10px; border-radius: 5px; border-color: black; margin-bottom: 10px;">
                    <div class="col-md-2">
                        <div class="well">
                            <h7>Mahaller</h7>
                            <div style="display: flex;" id="Mahaller${options.data.Id}"></div>
                        </div>
                    </div>
                </div>
                    </div >`).append().appendTo(addedInfoForTicketWithoutLocation);

                for (var i = 0; i < options.data.LocationItems.length; i++) {

                    for (var a = 0; a < options.data.LocationItems[i].length; a++) {
                        console.log(options.data.LocationItems[i][a]);
                        if (options.data.LocationItems[i][a] == options.data.LocationItems[i][options.data.LocationItems[i].length - 1]) {
                            $(`<p style="font-weight: normal;">${options.data.LocationItems[i][a].LocationE}-${options.data.LocationItems[i][a].LocationA}-${options.data.LocationItems[i][a].LocationB}-${options.data.LocationItems[i][a].LocationC}-${options.data.LocationItems[i][a].LocationD}</p>`)
                                .append().appendTo(`#Mahaller${options.data.Id}`);
                        }
                        else {
                            $(`<p style="font-weight: normal;">${options.data.LocationItems[i][a].LocationE}-${options.data.LocationItems[i][a].LocationA}-${options.data.LocationItems[i][a].LocationB}-${options.data.LocationItems[i][a].LocationC}-${options.data.LocationItems[i][a].LocationD},</p>`)
                                .append().appendTo(`#Mahaller${options.data.Id}`);
                        }
                    }
                }
                if (options.data.LocationItems.length == 0) {
                    if ((options.data.Location4 == null) && (options.data.Location3 == null) && (options.data.Location2 == null)) {
                        $(`<p style="font-weight: normal;">${options.data.Location1}</p>`)
                            .append().appendTo(`#Mahaller${options.data.Id}`);
                    }

                    else if ((options.data.Location2 == null) && (options.data.Location3 == null)) {
                        $(`<p style="font-weight: normal;">${options.data.Location4}-${options.data.Location1}</p>`)
                            .append().appendTo(`#Mahaller${options.data.Id}`);
                    }
                    else if ((options.data.Location4 == null) && (options.data.Location3 == null)) {
                        $(`<p style="font-weight: normal;">${options.data.Location1}-${options.data.Location2}</p>`)
                            .append().appendTo(`#Mahaller${options.data.Id}`);
                    }
                    else if (options.data.Location4 == null) {
                        $(`<p style="font-weight: normal;">${options.data.Location1}-${options.data.Location2}-${options.data.Location3}</p>`)
                            .append().appendTo(`#Mahaller${options.data.Id}`);
                    }
                    else if ((options.data.Location3 == null)) {
                        $(`<p style="font-weight: normal;">${options.data.Location4}-${options.data.Location1}-${options.data.Location2}</p>`)
                            .append().appendTo(`#Mahaller${options.data.Id}`);
                    }
                    else if ((options.data.Location2 == null)) {
                        $(`<p style="font-weight: normal;">${options.data.Location4}-${options.data.Location1}-${options.data.Location3}</p>`)
                            .append().appendTo(`#Mahaller${options.data.Id}`);
                    }
                    else if ((options.data.Location1 == null)) {
                        $(`<p style="font-weight: normal;">${options.data.Location4}-${options.data.Location2}-${options.data.Location3}</p>`)
                            .append().appendTo(`#Mahaller${options.data.Id}`);
                    }


                    //else if (options.data.Location3 == null) {
                    //    $(`<p style="font-weight: normal;">${options.data.Location1}-${options.data.Location2}</p>`)
                    //        .append().appendTo(`#Mahaller${options.data.Id}`);
                    //}
                    //else if (options.data.Location2 == null) {
                    //    $(`<p style="font-weight: normal;">${options.data.Location1}</p>`)
                    //        .append().appendTo(`#Mahaller${options.data.Id}`);
                    //}
                    else if ((options.data.Location4 != null) && (options.data.Location3 != null) && (options.data.Location2 != null) && (options.data.Location1 != null)) {
                        $(`<p style="font-weight: normal;">${options.data.Location4}-${options.data.Location1}-${options.data.Location2}-${options.data.Location3}</p>`)
                            .append().appendTo(`#Mahaller${options.data.Id}`);
                    }
                }
            }

            //dosya silme
            function deleteTicketAttachment(e) {
                var ajaxHeader = {};
                ajaxHeader["RequestVerificationToken"] = "@Xsrf.GetAndStoreTokens(Model.HttpContext).RequestToken";
                var result = Base.showMessage("Dosya Ekini silmek istediğinize emin misiniz ?", messageType.Confirm, "Silmek üzeresiniz.!");
                result.done(function (dialogResult) {
                    if (dialogResult == true)
                    {
                        $.ajax({
                            url: "Tickets?handler=DeleteAttachment",
                            headers: ajaxHeader,
                            data: JSON.stringify(e.row.data),
                            cache: false,
                            dataType: 'json',
                            contentType: "application/json",
                            type: 'post',
                            success: function () {
                                DevExpress.ui.notify({
                                    message: "Başarıyla Silindi",
                                    type: "Success",
                                    displayTime: 3000,
                                    height: 50,
                                    width: 200,
                                    position: {
                                        my: 'right top',
                                        at: 'right top',
                                    },
                                });
                                $("#ticketAttachmentGrid").dxDataGrid("instance").refresh();
                            },
                            error: function (xhr, ajaxOptions, thrownError) {
                                DevExpress.ui.notify({
                                    message: "Silinirken Hata Oluştu",
                                    type: "error",
                                    displayTime: 3000,
                                    height: 50,
                                    width: 200,
                                    position: {
                                        my: 'right top',
                                        at: 'right top',
                                    },
                                });
                            }
                        });
                    }
                })
            }

            //Not giridinden not silme
            function deleteTicketNote(e) {
                var ajaxHeader = {};
                ajaxHeader["RequestVerificationToken"] = "@Xsrf.GetAndStoreTokens(Model.HttpContext).RequestToken";
                var result = Base.showMessage("Notu silmek istediğinize emin misiniz ?", messageType.Confirm, "Silmek üzeresiniz.!");
                result.done(function (dialogResult) {
                    if (dialogResult == true)
                    {
                        $.ajax({
                            url: "Tickets?handler=DeleteNote",
                            headers: ajaxHeader,
                            data: JSON.stringify(e.row.data),
                            cache: false,
                            dataType: 'json',
                            contentType: "application/json",
                            type: 'post',
                            success: function () {
                                DevExpress.ui.notify({
                                    message: "Başarıyla Silindi",
                                    type: "Success",
                                    displayTime: 3000,
                                    height: 50,
                                    width: 200,
                                    position: {
                                        my: 'right top',
                                        at: 'right top',
                                    },
                                });
                                $("#ticketNotesGrid").dxDataGrid("instance").refresh();
                            },
                            error: function (xhr, ajaxOptions, thrownError) {
                                DevExpress.ui.notify({
                                    message: "Silerken Hata Oluştu",
                                    type: "error",
                                    displayTime: 3000,
                                    height: 50,
                                    width: 200,
                                    position: {
                                        my: 'right top',
                                        at: 'right top',
                                    },
                                });
                            }
                        });
                    }
                })
            }

            //Not gridinde Nota dosya ekleme
            function addTicketNoteAttachment(e) {
                ticketNoteId = e.row.data.Id;
                $("#popupContainerTicketNoteAttachment").dxPopup("show");
            }

            function CalculateCellValueExpectedResponseTime(data) {

                let expectedResponseTime = new Date(moment(data.ExpectedResponseTime)).getTime();
                //let openedTime = new Date(moment(options.data.openedTime)).getTime();
                let now = new Date().getTime();
                //todo :   ticket state durumlarına göre tekrar bakılabilir


                //let now = new Date().getTime();
                let days;

                var distance = expectedResponseTime - now;

                var day = distance / (1000 * 60 * 60 * 24);
                if (day < 0) {
                    day = day * (-1);
                }
                days = Math.floor(day);

                let d = "g";
                let hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                let h = "sa";
                let minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
                let m = "dk";
                let seconds = Math.floor((distance % (1000 * 60)) / 1000);
                let s = "sn";

                if (data.TicketStatusId == 1 || data.TicketStatusId == 2 || data.TicketStatusId == 7) {
                    if (distance > 0) {
                        $(`#expectedResponseTimeCount${data.Id}`).css("color", "green");
                        $(`#expectedResponseTimeCount${data.Id}`).css("font-weight", "bold");
                        //document.getElementById("expectedResponseTimeCount" + data.Id).innerHTML = `Kalan${days}${d} ${hours}${h} ${minutes}${m}`;
                        //clearInterval(timeRemainingExpectedResponseTime);
                        return [`Kalan${days}${d} ${hours}${h} ${minutes}${m}`];
                    }
                    else {

                        $(`#expectedResponseTimeCount${data.Id}`).css("color", "red");
                        $(`#expectedResponseTimeCount${data.Id}`).css("font-weight", "bold");
                        //document.getElementById("expectedResponseTimeCount" + data.Id).innerHTML = `Geçmiş - ${days}${d} ${hours}${h} ${minutes}${m}`;
                        //clearInterval(timeRemainingExpectedResponseTime);
                        return [`Geçmiş - ${days}${d} ${hours}${h} ${minutes}${m}`];
                    }
                }

                else if (data.TicketStatusId == 6 || data.TicketStatusId == 4 || data.TicketStatusId == 8 || data.TicketStatusId == 5) {

                    if (data.UserResponseTime == null) {
                        let slaStopTime = new Date(data.SlaStopTime).getTime();
                        let days;

                        var distance = expectedResponseTime - slaStopTime;

                        var day = distance / (1000 * 60 * 60 * 24);
                        if (day < 0) {
                            day = day * (-1);
                        }
                        days = Math.floor(day);

                        let d = "g";
                        let hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                        let h = "sa";
                        let minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
                        let m = "dk";
                        let seconds = Math.floor((distance % (1000 * 60)) / 1000);
                        let s = "sn";
                        //console.log(distance);
                        if (distance > 0) {
                            $(`#expectedResponseTimeCount${data.Id}`).css("color", "gray");
                            $(`#expectedResponseTimeCount${data.Id}`).css("font-weight", "bold");
                            //document.getElementById("expectedResponseTimeCount" + data.Id).innerHTML = `Kalan ${days}${d} ${hours}${h} ${minutes}${m}`;
                            //clearInterval(timeRemainingExpectedResponseTime);
                            //console.log(`Kalan ${days}${d} ${hours}${h} ${minutes}${m}`);
                            return [`Kalan ${days}${d} ${hours}${h} ${minutes}${m}`];
                        }
                        else {
                            $(`#expectedResponseTimeCount${data.Id}`).css("color", "gray");
                            $(`#expectedResponseTimeCount${data.Id}`).css("font-weight", "bold");
                            //document.getElementById("expectedResponseTimeCount" + data.Id).innerHTML = `Geçmiş - ${days}${d} ${hours}${h} ${minutes}${m}`;
                            //clearInterval(timeRemainingExpectedResponseTime);
                            return [`Geçmiş - ${days}${d} ${hours}${h} ${minutes}${m}`];
                        }
                    }


                    let userResponseTime = new Date(data.UserResponseTime).getTime();

                    let days;

                    var distance = expectedResponseTime - userResponseTime;

                    var day = distance / (1000 * 60 * 60 * 24);
                    if (day < 0) {
                        day = day * (-1);
                    }


                    days = Math.floor(day);

                    let d = "g";
                    let hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                    let h = "sa";
                    let minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
                    let m = "dk";
                    let seconds = Math.floor((distance % (1000 * 60)) / 1000);
                    let s = "sn";

                    if (distance > 0) {
                        $(`#expectedResponseTimeCount${data.Id}`).css("color", "gray");
                        $(`#expectedResponseTimeCount${data.Id}`).css("font-weight", "bold");
                        //document.getElementById("expectedResponseTimeCount" + data.Id).innerHTML = `Kalan ${days}${d} ${hours}${h} ${minutes}${m}`;
                        //clearInterval(timeRemainingExpectedResponseTime);
                        return [`Kalan ${days}${d} ${hours}${h} ${minutes}${m}`];
                    }
                    else {
                        $(`#expectedResponseTimeCount${data.Id}`).css("color", "gray");
                        $(`#expectedResponseTimeCount${data.Id}`).css("font-weight", "bold");
                        //document.getElementById("expectedResponseTimeCount" + data.Id).innerHTML = `Geçmiş - ${days}${d} ${hours}${h} ${minutes}${m}`;
                        //clearInterval(timeRemainingExpectedResponseTime);
                        return [`Geçmiş - ${days}${d} ${hours}${h} ${minutes}${m}`];
                    }
                }

                else if (data.TicketStatusId == 3) {

                    let userResponseTime = new Date(data.UserResponseTime).getTime();

                    let days;

                    var distance = expectedResponseTime - userResponseTime;

                    var day = distance / (1000 * 60 * 60 * 24);
                    if (day < 0) {
                        day = day * (-1);
                    }


                    days = Math.floor(day);

                    let d = "g";
                    let hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                    let h = "sa";
                    let minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
                    let m = "dk";
                    let seconds = Math.floor((distance % (1000 * 60)) / 1000);
                    let s = "sn";

                    if (distance > 0) {
                        $(`#expectedResponseTimeCount${data.Id}`).css("color", "gray");
                        $(`#expectedResponseTimeCount${data.Id}`).css("font-weight", "bold");
                        //document.getElementById("expectedResponseTimeCount" + data.Id).innerHTML = `Kalan ${days}${d} ${hours}${h} ${minutes}${m}`;
                        //clearInterval(timeRemainingExpectedResponseTime);
                        return [`Kalan ${days}${d} ${hours}${h} ${minutes}${m}`];
                    }
                    else {
                        $(`#expectedResponseTimeCount${data.Id}`).css("color", "gray");
                        $(`#expectedResponseTimeCount${data.Id}`).css("font-weight", "bold");
                        //document.getElementById("expectedResponseTimeCount" + data.Id).innerHTML = `Geçmiş - ${days}${d} ${hours}${h} ${minutes}${m}`;
                        //clearInterval(timeRemainingExpectedResponseTime);
                        return [`Geçmiş - ${days}${d} ${hours}${h} ${minutes}${m}`];
                    }


                }
                    //else if (options.data.TicketStatusId == 5) {
                    //    $(`#expectedResponseTimeCount${options.data.Id}`).css("color", "black");
                    //    $(`#expectedResponseTimeCount${options.data.Id}`).parent().css("background", "#c9c9c9")
                    //    $(`#expectedResponseTimeCount${options.data.Id}`).css("font-weight", "bold");
                    //    document.getElementById("expectedResponseTimeCount" + options.data.Id).innerHTML = `${moment(options.data.UserResponseTime).format('DD/MM/YYYY HH:mm')}`;
                    //    clearInterval(timeRemainingExpectedResponseTime);
                    //    return;
                    //}
                    //else {
                    //    $(`#expectedResponseTimeCount${options.data.Id}`).css("color", "gray");
                    //    $(`#expectedResponseTimeCount${options.data.Id}`).css("font-weight", "bold");
                    //    document.getElementById("expectedResponseTimeCount" + options.data.Id).innerHTML = `${moment(options.data.ExpectedResponseTime).format('DD/MM/YYYY HH:mm')}`;
                    //    clearInterval(timeRemainingExpectedResponseTime);
                    //    return;
                    //}
                //let timeRemainingExpectedResponseTime = setInterval(function () {

                //}, 1000);

            }

            //Nota dosya eklemek
            $(function () {
                $("#popupContainerTicketNoteAttachment").dxPopup({
                    title: "Popup Title",
                    contentTemplate: TicketNoteAttachmentTemplate,
                    deferRendering: false,
                    showCloseButton: true,
                    toolbarItems: [{
                        text: "Dosya Ekle",
                        location: "before"
                    },
                    {
                        widget: "dxButton",
                        toolbar: 'top',
                        location: "after",
                        options: {
                            type: 'success',
                            text: "Kaydet",
                            icon: "save",
                            onClick: function (e) {

                                var result = Base.showMessage("Nota Dosya Eklemek İstediğinize emin misiniz ?", messageType.Confirm, "Eklemek üzeresiniz.!");
                                result.done(function (dialogResult) {
                                    if (dialogResult == true) {
                                        var ajaxHeader = {};
                                        ajaxHeader["RequestVerificationToken"] = "@Xsrf.GetAndStoreTokens(Model.HttpContext).RequestToken";
                                        FormDataTicketNoteAttachmentFile.append("TicketId", data.Id);
                                        FormDataTicketNoteAttachmentFile.append("TicketNoteId", ticketNoteId);
                                        $.ajax({
                                            url: "Tickets?handler=TicketNoteAttachment",
                                            headers: ajaxHeader,
                                            data: FormDataTicketNoteAttachmentFile,
                                            contentType: false,
                                            processData: false,
                                            type: 'post',
                                            success: function (response) {
                                                $("#popupContainerTicketNoteAttachment").dxPopup("hide");
                                                DevExpress.ui.notify({
                                                    message: "Başarıyla Eklendi",
                                                    type: "Success",
                                                    displayTime: 3000,
                                                    height: 50,
                                                    width: 200,
                                                    position: {
                                                        my: 'right top',
                                                        at: 'right top',
                                                    },
                                                });
                                                FormDataTicketNoteAttachmentFile.delete('ticketNoteFileAttachment');
                                                FormDataTicketNoteAttachmentFile.delete('TicketId');
                                                FormDataTicketNoteAttachmentFile.delete('TicketNoteId');
                                                $("#ticketNotesGrid").dxDataGrid("instance").refresh();
                                                $("#popupContainerTicketNoteAttachment").dxPopup("hide");
                                                $("#ticketNoteAttachmentFileUploader").dxFileUploader("instance").reset();
                                            },
                                            error: function (xhr, ajaxOptions, thrownError) {
                                                DevExpress.ui.notify({
                                                    message: "Eklerken Hata Oluştu",
                                                    type: "error",
                                                    displayTime: 3000,
                                                    height: 50,
                                                    width: 200,
                                                    position: {
                                                        my: 'right top',
                                                        at: 'right top',
                                                    },
                                                });
                                            }
                                        });
                                    }
                                    else {
                                        return;
                                    }
                                });
                            }
                        }
                    },
                    {
                        widget: "dxButton",
                        toolbar: 'top',
                        location: "after",
                        options: {
                            type: "default",
                            text: "Kapat",
                            icon: "close",
                            onClick: function (e) {
                                FormDataTicketNoteAttachmentFile.delete('ticketNoteFileAttachment');
                                FormDataTicketNoteAttachmentFile.delete('TicketId');
                                FormDataTicketNoteAttachmentFile.delete('TicketNoteId');
                                $("#popupContainerTicketNoteAttachment").dxPopup("hide");
                                $("#ticketNoteAttachmentFileUploader").dxFileUploader("instance").reset();
                            }
                        }
                    }


                    ]
                });
            });

            //not gridine dosya eklerken eklenen dosyaların formdataya kaydedilmesi
            function ticketNoteAttachmentFileUploaderValueChanged(e) {
                let ticketNoteAttachmentfiles = e.value;
                //ticketNoteAttachmentFile.push(e.value);
                //formDataTicketNoteAttachmentFiles = new FormData();
                for (let i = 0; i != ticketNoteAttachmentfiles.length; i++) {
                    FormDataTicketNoteAttachmentFile.append("ticketNoteFileAttachment", ticketNoteAttachmentfiles[i]);
                }
            }

            //TextResponseTime düzenlenmesi
            function customizeTextResponseTime(e) {
                return e.valueText + "dk";
            }

            //TextResolutionTime düzenlenmesi
            function customizeTextResolutionTime(e) {
                return e.valueText + "dk";
            }

            //todo:bütün componentler için disabled kısmını JS ile alıp kullanıcıda ki görme yetkilerine göre düzenleme yapılacak.
            var DenemeDisabled = false;

            //grid hata kontrolü için yapıldı
            function OnDataErrorOccurred(e) {
                DevExpress.ui.notify({
                    message: e.error.message,
                    type: "error",
                    displayTime: 3000,
                    height: 50,
                    width: 200,
                    position: {
                        my: 'right top',
                        at: 'right top',
                    },

                });
            }

            // todo : SetCellValue ile kolondaki iki sütunun değişmesi işlemi yapılacak.
            function EditCellTemplateExpectedResolutionTime(container, options) {
                $("<div id= 'expectedResolutionTimeCount" + options.data.Id + "''>")
                    .append()
                    .appendTo(container);
                let now = new Date().getTime();
                let expectedResolutionTime = new Date(moment(options.data.ExpectedResolutionTime)).getTime();
                let ticketOpenedTime = new Date(moment(options.data.TicketOpenedTime)).getTime();

                if (now > ticketOpenedTime) {
                    let days;
                    var distance;
                    distance = expectedResolutionTime - now;
                    var day = Math.floor(distance / (1000 * 60 * 60 * 24));
                    if (day < 0) {
                        day = day * (-1);
                    }
                    days = Math.floor(day);
                    let d = "g";
                    let hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                    let h = "sa";
                    let minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
                    let m = "dk";
                    let seconds = Math.floor((distance % (1000 * 60)) / 1000);
                    let s = "sn";

                    if (options.data.TicketStatusId == 1 || options.data.TicketStatusId == 2 || options.data.TicketStatusId == 3 || options.data.TicketStatusId == 7) {
                        if (distance > 0) {
                            $(`#expectedResolutionTimeCount${options.data.Id}`).css("color", "green");
                            $(`#expectedResolutionTimeCount${options.data.Id}`).css("font-weight", "bold");
                            document.getElementById("expectedResolutionTimeCount" + options.data.Id).innerHTML = `Kalan ${days}${d} ${hours}${h} ${minutes}${m}`;
                            return;
                        }
                        else {

                            $(`#expectedResolutionTimeCount${options.data.Id}`).css("color", "red");
                            $(`#expectedResolutionTimeCount${options.data.Id}`).css("font-weight", "bold");
                            document.getElementById("expectedResolutionTimeCount" + options.data.Id).innerHTML = `Geçmiş -${days}${d} ${hours}${h} ${minutes}${m}`;
                            return;
                        }
                    }
                    else if (options.data.TicketStatusId == 4) {

                        let expectedResolutionTime = new Date(moment(options.data.ExpectedResolutionTime)).getTime();
                        let userResolutionTime = new Date(moment(options.data.UserResolutionTime)).getTime();
                        let days;

                        var distance = expectedResolutionTime - userResolutionTime;
                        var day = distance / (1000 * 60 * 60 * 24);
                        if (day < 0) {
                            day = day * (-1);
                        }

                        days = Math.floor(day);

                        let d = "g";
                        let hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                        let h = "sa";
                        let minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
                        let m = "dk";
                        let seconds = Math.floor((distance % (1000 * 60)) / 1000);
                        let s = "sn";

                        if (distance > 0) {
                            $(`#expectedResolutionTimeCount${options.data.Id}`).css("color", "gray");
                            $(`#expectedResolutionTimeCount${options.data.Id}`).css("font-weight", "bold");
                            document.getElementById("expectedResolutionTimeCount" + options.data.Id).innerHTML = `Kalan ${days}${d} ${hours}${h} ${minutes}${m}`;
                            //clearInterval(timeRemainingExpectedResolutionTime);
                            return;
                        }
                        else {
                            $(`#expectedResolutionTimeCount${options.data.Id}`).css("color", "gray");
                            $(`#expectedResolutionTimeCount${options.data.Id}`).css("font-weight", "bold");
                            document.getElementById("expectedResolutionTimeCount" + options.data.Id).innerHTML = `Geçmiş - ${days}${d} ${hours}${h} ${minutes}${m}`;
                            //clearInterval(timeRemainingExpectedResolutionTime);
                            return;
                        }
                    }

                    else if (options.data.TicketStatusId == 5) {
                        $(`#expectedResolutionTimeCount${options.data.Id}`).css("color", "black");
                        $(`#expectedResolutionTimeCount${options.data.Id}`).parent().css("background", "#c9c9c9")
                        $(`#expectedResolutionTimeCount${options.data.Id}`).css("font-weight", "bold");
                        document.getElementById("expectedResolutionTimeCount" + options.data.Id).innerHTML = `${moment(options.data.UserResolutionTime).format('DD/MM/YYYY HH:mm')}`;
                        //clearInterval(timeRemainingExpectedResolutionTime);
                        return;
                    }
                    else {
                        //clearInterval(timeRemainingExpectedResolutionTime);
                        $(`#expectedResolutionTimeCount${options.data.Id}`).css("color", "black");
                        $(`#expectedResolutionTimeCount${options.data.Id}`).parent().css("background", "#c9c9c9")
                        $(`#expectedResolutionTimeCount${options.data.Id}`).css("font-weight", "bold");
                        document.getElementById("expectedResolutionTimeCount" + options.data.Id).innerHTML = `${moment(options.data.ExpectedResolutionTime).format('DD/MM/YYYY HH:mm')}`;
                        //clearInterval(timeRemainingExpectedResolutionTime);
                        return;
                    }
                }
                else if (now < ticketOpenedTime) {
                    $(`#expectedResolutionTimeCount${options.data.Id}`).css("color", "black");
                    $(`#expectedResolutionTimeCount${options.data.Id}`).parent().css("background", "#c9c9c9")
                    $(`#expectedResolutionTimeCount${options.data.Id}`).css("font-weight", "bold");
                    document.getElementById("expectedResolutionTimeCount" + options.data.Id).innerHTML = `${moment(options.data.ExpectedResolutionTime).format('DD/MM/YYYY HH:mm')}`;
                }

            }

            // todo : SetCellValue ile kolondaki iki sütunun değişmesi işlemi yapılacak.
            function EditCellTemplateExpectedResponseTime(container, options) {
                $("<div id= 'expectedResponseTimeCount" + options.data.Id + "''>")
                    .append()
                    .appendTo(container);

                let expectedResponseTime = new Date(moment(options.data.ExpectedResponseTime)).getTime();
                let ticketOpenedTime = new Date(moment(options.data.TicketOpenedTime)).getTime();
                //let openedTime = new Date(moment(options.data.openedTime)).getTime();
                let now = new Date().getTime();
                //todo :   ticket state durumlarına göre tekrar bakılabilir
                //let timeRemainingExpectedResponseTime = setInterval(function () {

                //}, 1000);

                //let now = new Date().getTime();

                if (now > ticketOpenedTime) {
                    let days;

                    var distance = expectedResponseTime - now;

                    var day = distance / (1000 * 60 * 60 * 24);
                    if (day < 0) {
                        day = day * (-1);
                    }
                    6485
                    days = Math.floor(day);

                    let d = "g";
                    let hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                    let h = "sa";
                    let minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
                    let m = "dk";
                    let seconds = Math.floor((distance % (1000 * 60)) / 1000);
                    let s = "sn";

                    if (options.data.TicketStatusId == 1 || options.data.TicketStatusId == 2 || options.data.TicketStatusId == 7) {
                        if (distance > 0) {
                            $(`#expectedResponseTimeCount${options.data.Id}`).css("color", "green");
                            $(`#expectedResponseTimeCount${options.data.Id}`).css("font-weight", "bold");
                            document.getElementById("expectedResponseTimeCount" + options.data.Id).innerHTML = `Kalan${days}${d} ${hours}${h} ${minutes}${m}`;
                            //clearInterval(timeRemainingExpectedResponseTime);
                            return;
                        }
                        else {

                            $(`#expectedResponseTimeCount${options.data.Id}`).css("color", "red");
                            $(`#expectedResponseTimeCount${options.data.Id}`).css("font-weight", "bold");
                            document.getElementById("expectedResponseTimeCount" + options.data.Id).innerHTML = `Geçmiş - ${days}${d} ${hours}${h} ${minutes}${m}`;
                            //clearInterval(timeRemainingExpectedResponseTime);
                            return;
                        }
                    }

                    else if (options.data.TicketStatusId == 6 || options.data.TicketStatusId == 4 || options.data.TicketStatusId == 8 || options.data.TicketStatusId == 5) {

                        if (options.data.UserResponseTime == null) {
                            let slaStopTime = new Date(options.data.SlaStopTime).getTime();
                            let days;

                            var distance = expectedResponseTime - slaStopTime;

                            var day = distance / (1000 * 60 * 60 * 24);
                            if (day < 0) {
                                day = day * (-1);
                            }
                            days = Math.floor(day);

                            let d = "g";
                            let hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                            let h = "sa";
                            let minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
                            let m = "dk";
                            let seconds = Math.floor((distance % (1000 * 60)) / 1000);
                            let s = "sn";

                            if (distance > 0) {
                                $(`#expectedResponseTimeCount${options.data.Id}`).css("color", "gray");
                                $(`#expectedResponseTimeCount${options.data.Id}`).css("font-weight", "bold");
                                document.getElementById("expectedResponseTimeCount" + options.data.Id).innerHTML = `Kalan ${days}${d} ${hours}${h} ${minutes}${m}`;
                                //clearInterval(timeRemainingExpectedResponseTime);
                                return;
                            }
                            else {
                                $(`#expectedResponseTimeCount${options.data.Id}`).css("color", "gray");
                                $(`#expectedResponseTimeCount${options.data.Id}`).css("font-weight", "bold");
                                document.getElementById("expectedResponseTimeCount" + options.data.Id).innerHTML = `Geçmiş - ${days}${d} ${hours}${h} ${minutes}${m}`;
                                //clearInterval(timeRemainingExpectedResponseTime);
                                return;
                            }
                        }


                        let userResponseTime = new Date(options.data.UserResponseTime).getTime();

                        let days;

                        var distance = expectedResponseTime - userResponseTime;

                        var day = distance / (1000 * 60 * 60 * 24);
                        if (day < 0) {
                            day = day * (-1);
                        }


                        days = Math.floor(day);

                        let d = "g";
                        let hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                        let h = "sa";
                        let minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
                        let m = "dk";
                        let seconds = Math.floor((distance % (1000 * 60)) / 1000);
                        let s = "sn";

                        if (distance > 0) {
                            $(`#expectedResponseTimeCount${options.data.Id}`).css("color", "gray");
                            $(`#expectedResponseTimeCount${options.data.Id}`).css("font-weight", "bold");
                            document.getElementById("expectedResponseTimeCount" + options.data.Id).innerHTML = `Kalan ${days}${d} ${hours}${h} ${minutes}${m}`;
                            //clearInterval(timeRemainingExpectedResponseTime);
                            return;
                        }
                        else {
                            $(`#expectedResponseTimeCount${options.data.Id}`).css("color", "gray");
                            $(`#expectedResponseTimeCount${options.data.Id}`).css("font-weight", "bold");
                            document.getElementById("expectedResponseTimeCount" + options.data.Id).innerHTML = `Geçmiş - ${days}${d} ${hours}${h} ${minutes}${m}`;
                            //clearInterval(timeRemainingExpectedResponseTime);
                            return;
                        }
                    }

                    else if (options.data.TicketStatusId == 3) {

                        let userResponseTime = new Date(options.data.UserResponseTime).getTime();

                        let days;

                        var distance = expectedResponseTime - userResponseTime;

                        var day = distance / (1000 * 60 * 60 * 24);
                        if (day < 0) {
                            day = day * (-1);
                        }


                        days = Math.floor(day);

                        let d = "g";
                        let hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                        let h = "sa";
                        let minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
                        let m = "dk";
                        let seconds = Math.floor((distance % (1000 * 60)) / 1000);
                        let s = "sn";

                        if (distance > 0) {
                            $(`#expectedResponseTimeCount${options.data.Id}`).css("color", "gray");
                            $(`#expectedResponseTimeCount${options.data.Id}`).css("font-weight", "bold");
                            document.getElementById("expectedResponseTimeCount" + options.data.Id).innerHTML = `Kalan ${days}${d} ${hours}${h} ${minutes}${m}`;
                            //clearInterval(timeRemainingExpectedResponseTime);
                            return;
                        }
                        else {
                            $(`#expectedResponseTimeCount${options.data.Id}`).css("color", "gray");
                            $(`#expectedResponseTimeCount${options.data.Id}`).css("font-weight", "bold");
                            document.getElementById("expectedResponseTimeCount" + options.data.Id).innerHTML = `Geçmiş - ${days}${d} ${hours}${h} ${minutes}${m}`;
                            //clearInterval(timeRemainingExpectedResponseTime);
                            return;
                        }


                    }
                }

                else if (now < ticketOpenedTime) {
                    $(`#expectedResponseTimeCount${options.data.Id}`).css("color", "black");
                    $(`#expectedResponseTimeCount${options.data.Id}`).parent().css("background", "#c9c9c9")
                    $(`#expectedResponseTimeCount${options.data.Id}`).css("font-weight", "bold");
                    document.getElementById("expectedResponseTimeCount" + options.data.Id).innerHTML = `${moment(options.data.ExpectedResponseTime).format('DD/MM/YYYY HH:mm')}`;
                }

            }


            //iş emrinde sahip olan note sayısını tabda göstermek için
            function onLoadedNoteGrid(e) {
                $("#ticketForm").dxForm("instance").option("items[0].items[0].tabs[1].badge", e.length.toString());
            }
            //iş emrinde sahip olan dosya sayısını tabda göstermek için
            function onLoadedAttachmentGrid(e) {
                $("#ticketForm").dxForm("instance").option("items[0].items[0].tabs[2].badge", e.length.toString());
            }
            //note gridini doldurmak için loadparamsa iş emrinin Idsini göndermek için
            function noteLoadParams(data) {
                if (data == null) {
                    return 0;
                }
                else {
                    return data.Id;
                }
            }

            //dosya gridini doldurmak için loadparamsa iş emrinin Idsini göndermek için
            function attachmentLoadParams(data) {
                if (data == null) {
                    return 0;
                }
                else {
                    return data.Id;
                }
            }

            //dosya kaydetme fonksiyonu
            function attachmentKaydet(e) {
                var ajaxHeader = {};
                ajaxHeader["RequestVerificationToken"] = "@Xsrf.GetAndStoreTokens(Model.HttpContext).RequestToken";


                FormDataAttachmentFile.append("TicketId", data.Id);

                $.ajax({
                    url: "Tickets?handler=AddAttachment",
                    headers: ajaxHeader,
                    data: FormDataAttachmentFile,
                    contentType: false,
                    processData: false,
                    type: 'post',
                    success: function () {
                        FormDataAttachmentFile.delete('attachmentFile');
                        $("#ticketAttachmentGrid").dxDataGrid("instance").refresh();
                        $("#attachment-uploader").dxFileUploader("instance").reset();
                    }
                });
            }


            //row u editlemek istediğimizde
            function onEditingStart(e) {
                data = e.data;
            }
            //yeni bir row eklemek istediğimizde
            function OnInitNewRow(e) {
                data = null;
            }

            //gridin toolbarında sahip olunan elementlerin custom edilmesi
            function onToolbarPreparing(e) {

                e.toolbarOptions.items.forEach((value, index, array) => {
                    if (value.name == "addRowButton") {
                        e.toolbarOptions.items[0].showText = "always";
                        e.toolbarOptions.items[0].options.text = "Yeni iş Emri ";
                        e.toolbarOptions.items[0].options.icon = "plus";
                        e.toolbarOptions.items[0].options.type = "success";
                    }
                });
            }

            //gride ki düzenle butonunun değiştirilmesi
            function OnCellPrepared(e) {

                //if (e.cellElement[0].className == "diasClass")
                //{
                //    if (e.rowType == 'data') {
                //        console.log(e);
                //    }
                //}
                if (e.cellElement[0].className == "diasClass") {
                    if (e.rowType == 'data')
                        var stepChildren = e.cellElement[0].children;
    @*if (stepChildren != null) {
        if ((e.data.TicketOwnerUserId != @userViewData.Id && e.data.TicketAssignedUserId != @userViewData.Id)) {
        stepChildren[0].style.backgroundColor = "rgb(129, 161, 189)";
        stepChildren[0].classList.add("disabled");
        }
        }*@

                }
                if (e.column.type == "buttons") {

                    e.cellElement.children().removeClass('dx-icon-edit').addClass("dx-icon-search");
                    e.cellElement.children().attr("title","Detay");
                }
            }

            function CalculateCellValue(e) {
                //console.log(e);
            }

            //grid üzerinde tıklanan rowun datasını almak için
            function onSelectionChanged(data) {
                let rowData = data.selectedRowsData[0];
                if (!rowData)
                    return;
                dataRow = rowData;

            }

            //icon visible özelliğini ayarlama
            function isIconVisible(e) {
                if (data.TicketOwnerUserId == @userViewData.Id) {
                    return true;
                }
                else {
                    return false;
                }
            }

            //popup açıldığında
            function setPopupTitle(e) {
                if (data == null) {

                    $("#popupContainer").dxPopup("instance").option("height", "92%");
                    $("#popupContainer").dxPopup("instance").option("toolbarItems[0].toolbar", "top");
                    $("#popupContainer").dxPopup("instance").option("toolbarItems[0].options.icon", "save");
                    $("#popupContainer").dxPopup("instance").option("toolbarItems[0].options.type", "success");

                    $("#popupContainer").dxPopup("instance").option("toolbarItems[1].toolbar", "top");
                    $("#popupContainer").dxPopup("instance").option("toolbarItems[1].options.text", "Kapat");
                    $("#popupContainer").dxPopup("instance").option("toolbarItems[1].options.icon", "close");
                    $("#popupContainer").dxPopup("instance").option("toolbarItems[1].options.type", "default");
                    /*$("#popupContainer").dxPopup("instance").option("toolbarItems[1].options.elementAttr.class", "warning");*/
                    $("#popupContainer").dxPopup("instance").option("toolbarItems[1].options.onClick", function onTicketPopupCloseClick(e)
                    {
                        if ($(".classTable").length != 0) {
                            var tableCount = $(".classTable").length;
                            var tableArray = [];
                            tableArray = $(".classTable");
                            for (var i = 0; i < tableCount; i++) {

                                $("#dropDownLocation").dxDropDownBox("instance").option("value", null);
                                $("#locationTreeViewMultiple").dxTreeView("instance").unselectAll();
                                tableArray[i].remove();
                            }
                        }
                        locationsWithPopup = [];
                        $("#popupContainer").dxPopup("hide");

                    });
                    $("#ticketForm").dxForm("instance").option("items[0].items[0].tabs[1].badge", null);
                    $("#ticketForm").dxForm("instance").option("items[0].items[0].tabs[2].badge", null);
                    $("#dateTicket").dxDateBox("instance").option("value", new Date());
                    $(".dx-toolbar-before")[4].style.position = "relative";
                    $(".dx-toolbar-before")[4].style.left = "-24px";
                    var children1 = $(".dx-toolbar-before")[4].children;
                    var children2 = children1[0].children;
                    var children3 = children2[0].children;
                    var sourceImg = `../../images/general/01_acik.svg`;
                    var htmlObject = $(`<img style='float:left' src='${sourceImg}' />`);
                    children3[0].prepend(htmlObject[0]);

                    //$(".dx-toolbar-before")[5].children().children().children().prepend("<i class='fas fa-building' style='padding-right:6px;'></i>");
                }

                $("#dateResponseTimeSolvedStarted").dxDateBox("instance")._$element.parent().parent().parent().parent().parent().parent().css("display", "none");
                $("#dateTicketAddedTime").dxDateBox("instance")._$element.parent().parent().parent().parent().parent().parent().css("display", "none");
                //$("#dateTicketAddedTime").dxDateBox("instance").option("visible", false);
                $("#dateResponseTimeText").dxTextBox("instance")._$element.parent().parent().parent().parent().css("border-right", "1px solid");
                $("#dateResponseTime").dxDateBox("instance")._$element.parent().parent().parent().parent().css("border-right", "1px solid");

                $("#sbAsgGroup").dxSelectBox("instance")._$element.parent().parent().parent().parent().css("border-right", "1px solid");
                $("#TicketReportedUserId").dxTextBox("instance")._$element.parent().parent().parent().parent().css("border-right", "1px solid");
                $("#txtPhone").dxTextBox("instance")._$element.parent().parent().parent().parent().css("border-right", "1px solid");




                if (data != null) {
                    locationsWithPopup = [];
                    var ajaxHeader = {};
                                ajaxHeader["RequestVerificationToken"] = "@Xsrf.GetAndStoreTokens(Model.HttpContext).RequestToken";
                    $.ajax({
                            type: "GET",
                            url: "Tickets?handler=DisabledBoolenByUserRole",
                            data: { "ticketOwnerUserId": data.TicketOwnerUserId },
                            headers: ajaxHeader,
                            success: function (response) {

                                response.forEach(function (element, index) {
                                if (element.Key == "TicketDescription") {
                                    $("#textAreaDescription").dxTextArea("instance").option("disabled", element.Value);
                                }
                                if (element.Key == "TicketReportUserNameSurname") {
                                    $("#TicketReportedUserId").dxTextBox("instance").option("disabled", element.Value);
                                }
                                if (element.Key == "TicketReportUserPhone") {
                                    $("#txtPhone").dxTextBox("instance").option("disabled", element.Value);
                                }
                                if (element.Key == "TicketAddUserPhone") {
                                    $("#txtPhoneKayitAltinaAlan").dxTextBox("instance").option("disabled", element.Value);
                                }
                                if (element.Key == "TicketPriority") {
                                    sbTicketPriority
                                    $("#sbTicketPriority").dxSelectBox("instance").option("disabled", element.Value);
                                }
                            })

                        },
                            failure: function (response) {

                            }
                        });


                    $("#popupContainer").dxPopup({
                        title: "İş Emri Detay" + "-" + `${data.TicketCode}`
                    });

                    $("#dateResponseTimeSolvedStarted").dxDateBox("instance")._$element.parent().parent().parent().parent().parent().parent().css("display", "flex");
                    $("#dateTicketAddedTime").dxDateBox("instance")._$element.parent().parent().parent().parent().parent().parent().css("display", "flex");
                    $("#dateResponseTimeSolvedStarted").dxDateBox("instance")._$element.parent().parent().parent().parent().css("border-right", "1px solid");
                    tabsData.option("items[1].disabled", false);
                    $("#ticketForm").dxForm("instance").option("items[0].items[0].tabs[1].badge", data.NotesCount.toString());
                    $("#ticketForm").dxForm("instance").option("items[0].items[0].tabs[2].badge", data.AttachemntsCount.toString());

                    $("#popupContainer").dxPopup("instance").option("toolbarItems[0].toolbar", "top");
                    $("#popupContainer").dxPopup("instance").option("toolbarItems[0].options.icon", "save");
                    $("#popupContainer").dxPopup("instance").option("toolbarItems[0].options.type", "success");
                    $("#popupContainer").dxPopup("instance").option("toolbarItems[0].options.text", "Güncelle");

                    $("#popupContainer").dxPopup("instance").option("toolbarItems[1].toolbar", "top");
                    $("#popupContainer").dxPopup("instance").option("toolbarItems[1].options.text", "Kapat");
                    $("#popupContainer").dxPopup("instance").option("toolbarItems[1].options.icon", "close");
                    $("#popupContainer").dxPopup("instance").option("toolbarItems[1].options.type", "default");

                    $("#attachmentButton").dxButton("instance").option("visible", true);

                    $("#dateResolutionTimeSolved").dxDateBox("instance").option("visible", true);
                    $("#dateResponseTimeSolvedStarted").dxDateBox("instance").option("visible", true);
                    $("#dateResponseTimeSolvedStarted").dxDateBox("instance").option("value", data.UserResponseTime);
                    $("#dateResolutionTimeSolved").dxDateBox("instance").option("value", data.UserResolutionTime);

                    if (data.TicketReason.ResolutionTime != null) {
                        var sonuc = data.TicketReason.ResolutionTime;
                        if (sonuc == 0) {
                            $("#dateResolutionTimeText").dxTextBox("instance").option("value", "1 dk");
                        }
                        else {
                            $("#dateResolutionTimeText").dxTextBox("instance").option("value", sonuc.toString() + "dk");
                        }

                    }

                    if (data.TicketReason.ResponseTime != null) {
                        var sonuc = data.TicketReason.ResponseTime;
                        if (sonuc == 0) {
                            $("#dateResponseTimeText").dxTextBox("instance").option("value", "1 dk");
                        }

                        else {
                            $("#dateResponseTimeText").dxTextBox("instance").option("value", sonuc.toString() + "dk");
                        }
                    }

                    $("#popupContainer").dxPopup("instance").option("toolbarItems[2].widget", "dxDropDownButton");
                    $("#popupContainer").dxPopup("instance").option("toolbarItems[2].toolbar", "top");
                    $("#popupContainer").dxPopup("instance").option("toolbarItems[2].options.stylingMode", "text");
                    $("#popupContainer").dxPopup("instance").option("toolbarItems[2].location", "before");
                    $("#popupContainer").dxPopup("instance").option("toolbarItems[2].options.text", "Seçenekler");
                    $("#popupContainer").dxPopup("instance").option("toolbarItems[2].options.stylingMode", "text");
                    $("#popupContainer").dxPopup("instance").option("toolbarItems[2].options.type", "default");
                    $("#popupContainer").dxPopup("instance").option("toolbarItems[2].options.displayExpr", "Name");
                    $("#popupContainer").dxPopup("instance").option("toolbarItems[2].options.keyExpr", "Id");
                    $("#popupContainer").dxPopup("instance").option("toolbarItems[2].options.useSelectMode", "true");
                    $("#popupContainer").dxPopup("instance").option("toolbarItems[2].options.elementAttr.class", "dpbColor");
                    $("#popupContainer").dxPopup("instance").option("toolbarItems[2].options.style.width", "150px");
                    $("#popupContainer").dxPopup("instance").option("toolbarItems[2].options.elementAttr.id", "dpbId");
                    $("#popupContainer").dxPopup("instance").option("toolbarItems[2].options.dropDownOptions", {width:150});



                    //seçenekler butonu disabled kontrolü : şimdilik disabled özelliği kaldırıldı
                    //aktif hale getirilmek istendiğinde if bloğu ve $("#popupContainer").dxPopup("instance").option("toolbarItems[2].options.disabled", "true") açılacak.
                    //$("#popupContainer").dxPopup("instance").option("toolbarItems[2].options.disabled", "true");

                    //if (!(data.TicketOwnerUserId != @userViewData.Id && data.TicketAssignedUserId != @userViewData.Id)) {
                        var arr = getTicketState();
                        $("#popupContainer").dxPopup("instance").option("toolbarItems[2].options.items", arr);
                        $("#popupContainer").dxPopup("instance").option("toolbarItems[2].options.itemTemplate", function template(itemData) {

                        let sourceImg;
                        if (itemData.Id == 1)
                            sourceImg = `../../images/general/kisiteata.svg`;
                        if (itemData.Id == 2)
                            sourceImg = `../../images/general/grubaata.svg`;
                        if (itemData.Id == 3)
                            sourceImg = `../../images/general/calismayabasla.svg`;
                        if (itemData.Id == 4)
                            sourceImg = `../../images/general/cozumle.svg`;
                        if (itemData.Id == 5)
                            sourceImg = `../../images/general/askiyaal.svg`;
                        if (itemData.Id == 6)
                            sourceImg = `../../images/general/beklemeyeal.svg`;
                        if (itemData.Id == 7)
                            sourceImg = `../../images/general/yenidenac.svg`;
                        if (itemData.Id == 8)
                            sourceImg = `../../images/general/iptalet.svg`;
                        if (itemData.Id == 9)
                            sourceImg = `../../images/general/reddet.svg`;
                        if (itemData.Id == 10)
                            sourceImg = `../../images/general/kapat.svg`;

                        return `<div> <img style='float:left' src='${sourceImg}' /> <div style='float:left'>${itemData.Name}</div> </div>`;
                    });
                    $("#popupContainer").dxPopup("instance").option("toolbarItems[2].options.onItemClick", function ticketStateOnClick(e) {

                        ticketStateId = e.itemData.Id;
                        ticketStatusId = data.TicketStatusId;
                        if (e.itemData.Id == 1 || e.itemData.Id == 2) {
                            $("#popupAssignedUser").dxPopup("show");
                            return;
                        }

                        var ajaxHeader = {};
                                ajaxHeader["RequestVerificationToken"] = "@Xsrf.GetAndStoreTokens(Model.HttpContext).RequestToken";
                        $.ajax({
                            type: "POST",
                            url: "Tickets?handler=ChangeTicketState",
                            headers: ajaxHeader,
                            data: { "Id": ticketStateId, "ticketStateId": ticketStatusId, "userId": @userViewData.Id, "ticketId": data.Id },
                            async: true,
                            success: function (response) {
                                $("#popupAssignedUser").dxPopup("hide");
                                $("#popupContainer").dxPopup("hide");
                                $("#gridTicket").dxDataGrid("instance").refresh();
                                $("#assignedUser").dxDropDownBox("instance").option("value", null);
                            },
                            failure: function (response) {
                                alert(response);
                            }
                        });

                        if (!data) return;
                    });

                    //}

                    var ticketReasonHierarchy = data.TicketReason.TicketReasonCategory.HierarchyId + `${data.TicketReasonId}/`;
                    $("#dropDownReasonSingle").dxDropDownBox("instance").option("value", ticketReasonHierarchy);
                    $("#sbTicketPriority").dxSelectBox("instance").option("value", null);
                    $("#sbTicketPriority").dxSelectBox("instance").option("value", data.TicketPriorityId);
                    $("#dateTicketAddedTime").dxDateBox("instance").option("value", data.AddedTime);
                    $("#TicketReportedUserId").dxTextBox("instance").option("value", data.TicketReportedUserNameSurname);
                    $("#txtPhone").dxTextBox("instance").option("value", data.TicketReportedUserPhone);

                    let locations = [];

                    data.TicketRelatedLocations.forEach((location, index, array) => {
                        locations.push(location.TicketLocation.HierarchyId);
                        locationsWithPopup.push(location.TicketLocation);
                    });

                    $("#addMahalButton").dxButton("instance")._$element.children().children().children()[0].innerHTML = `${locations.length}`;

                    locationsUpdate = locations;
                    $("#ticketUserId").dxSelectBox("instance").option("value", String(data.TicketOwnerUserId));
                    $("#sbAsgGroup").dxSelectBox("instance").option("value", data.TickedAssignedAssignmentGroupId);
                    $("#sbAsgGroupEmp").dxSelectBox("instance").option("value", String(data.TicketAssignedUserId));
                    $("#dateTicket").dxDateBox("instance").option("value", data.TicketOpenedTime);
                    $("#dateResolutionTime").dxDateBox("instance").option("value", data.ExpectedResolutionTime);
                    $("#dateResponseTime").dxDateBox("instance").option("value", data.ExpectedResponseTime);
                    $("#dateResolutionTime").dxDateBox("instance").option("disabled", true);
                    $("#dateResponseTime").dxDateBox("instance").option("disabled", true);

                    $("#textAreaDescription").dxTextArea("instance").option("value", data.TicketDescription);
                    //$("#stateImgId").parent().parent().css("position", "relative").css("right", "430px");
                    $("#dpbId").parent().parent().css("position", "relative").css("left", "315px");
                    $("#dpbId").find("span").css("color", "white");

                    $(".dx-toolbar-before")[4].style.position = "relative";
                    $(".dx-toolbar-before")[4].style.left = "-24px";
                    var children1 = $(".dx-toolbar-before")[4].children;
                    var children2 = children1[0].children;
                    var children3 = children2[0].children;
                    var sourceImg;
                    if (data.TicketStatusId == 1) {
                        sourceImg = `../../images/general/01_acik.svg`;
                    }
                    else if (data.TicketStatusId == 2) {
                        sourceImg = `../../images/general/02_atandi.svg`;
                    }
                    else if (data.TicketStatusId == 3) {
                        sourceImg = `../../images/general/03_calisiliyor.svg`;
                    }
                    else if (data.TicketStatusId == 4) {
                        sourceImg = `../../images/general/06_cozumlendi.svg`;
                    }
                    else if (data.TicketStatusId == 5) {
                        sourceImg = `../../images/general/07_kapali.svg`;
                    }

                    else if (data.TicketStatusId == 6) {
                        sourceImg = `../../images/general/06_cozumlendi.svg`;
                    }

                    else if (data.TicketStatusId == 7) {
                        sourceImg = `../../images/general/04_beklet.svg`;
                    }
                    else if (data.TicketStatusId == 8) {
                        sourceImg = `../../images/general/05_reddet.svg`;
                    }


                    var htmlObject = $(`<img style='float:left' src='${sourceImg}' />`);
                    children3[0].prepend(htmlObject[0]);


                }
            }

            //ticket Statelerini getirme
            function getTicketState() {
                let arr = [];
                var ajaxHeader = {};
                                ajaxHeader["RequestVerificationToken"] = "@Xsrf.GetAndStoreTokens(Model.HttpContext).RequestToken";

                                $.ajax({
                                    type: "GET",
                                    url: "Tickets?handler=TicketStateDataOption",
                                    headers: ajaxHeader,
                                    data: { "ticketId": data.Id },
                                    contentType: "application/json; charset=utf-8",
                                    dataType: "json",
                                    async: true,
                                    success: function (response) {
                                        if (response.data != null) {
                                            for (var i = 0; i < response.data.length; i++) {
                                                arr.push(response.data[i]);
                                            }

                                        }
                                        //seçenekler butonu disabled kontrolü : şimdilik disabled özelliği kaldırıldı
                                        //$("#dpbId").dxDropDownButton("instance").option("disabled", false);
                                        //$("#popupContainer").dxPopup("instance").option("toolbarItems[2].options.disabled", "true");
                                    },
                                    failure: function (response) {
                                        alert(response);
                                    }
                                });

                return arr;
            }

            //Crud işlemlerinin yapıldığı fonksiyon
            function beforeSend(type, e) {
                if (type == "load") {
                    e.beforeSend = function (response) {
                        $("#loadPanel").dxLoadPanel("hide");
                        
                    };
                    e.success = function(response){
                        //console.log("success",response);
                        refreshTimer();
                    }
                    return;
                }

                if (type == "update") {
                    console.log("update");
                    var ajaxHeader = {};
                ajaxHeader["RequestVerificationToken"] = "@Xsrf.GetAndStoreTokens(Model.HttpContext).RequestToken";

                var openedTime = $("#dateTicket").dxDateBox("instance").option("value");
                    var openedTimeConverted = (new Date(openedTime)).toUTCString(3);

                    var TicketReportedUserPhone = $("#txtPhone").dxTextBox("instance").option("value");

                var TicketDescription = $("#textAreaDescription").dxTextArea("instance").option("value");
                    console.log(TicketDescription);
                    var TicketAssignedUserId = $("#sbAsgGroupEmp").dxSelectBox("instance").option("value");
                var TickedAssignedAssignmentGroupId = $("#sbAsgGroup").dxSelectBox("instance").option("value");
                    console.log(TickedAssignedAssignmentGroupId);
                    var TicketOwnerUserId = $("#ticketUserId").dxSelectBox("instance").option("value");
                    var TicketReportedUserNameSurname = $("#TicketReportedUserId").dxTextBox("instance").option("value");

                var TicketPriority = $("#sbTicketPriority").dxSelectBox("instance").option("value");
                    console.log("TicketPriority",TicketPriority);
                var TicketReasonId = $("#dropDownReasonSingle").dxDropDownBox("instance").option("value");
                    console.log(TicketReasonId);

                    var locations = [];
                    console.log($("#locationTreeViewMultiple").dxTreeView("getSelectedNodes"));
                    if ($("#locationTreeViewMultiple").dxTreeView("getSelectedNodes") == "") {
                        console.log("$(#locationTreeViewMultiple).dxTreeView(getSelectedNodes)");
                        console.log(locations);
                        locations = locationsUpdate;
                    }
                    else {
                        for (var i = 0; i < $("#locationTreeViewMultiple").dxTreeView("getSelectedNodes").length; i++) {

                            console.log("sadikGuzel");
                            locations.push($("#locationTreeViewMultiple").dxTreeView("getSelectedNodes")[i].key);
                        }
                    }

                    var ticketNoteText = $("#textTicketNote").dxTextArea("instance").option("value");
                    console.log(ticketNoteText);
                    var dateResolutionTime = $("#dateResolutionTime").dxDateBox("instance").option("value");
                    console.log(dateResolutionTime);
                    var dateResolutionTimeConverted = (new Date(dateResolutionTime)).toUTCString(3);
                    console.log(dateResolutionTimeConverted);
                    var dateResponseTime = $("#dateResponseTime").dxDateBox("instance").option("value");
                    console.log(dateResponseTime);
                    var dateResponseTimeConverted = (new Date(dateResponseTime)).toUTCString(3);
                    console.log(dateResponseTimeConverted);

                var formData = new FormData();
                    formData.append("Id", data.Id);
                    formData.append("AddedTime", data.AddedTime);
                    formData.append("TicketStatusId", data.TicketStatusId);
                    formData.append("IsDeleted", data.IsDeleted);
                    formData.append("IsActive", data.IsActive);
                formData.append("TicketDescription", TicketDescription);
                formData.append("TicketOpenedTime", openedTimeConverted);
                    formData.append("TickedAssignedAssignmentGroupId", TickedAssignedAssignmentGroupId);
                    formData.append("ExpectedResolutionTime", dateResolutionTimeConverted);
                    formData.append("ExpectedResponseTime", dateResponseTimeConverted);
                    formData.append("TicketCode", data.TicketCode)
                    formData.append("TicketOwnerUserId", TicketOwnerUserId);
                formData.append("TicketPriorityId", TicketPriority);
                    formData.append("TicketReasonHierarchyId", TicketReasonId);
                    formData.append("TicketReportedUserNameSurname", TicketReportedUserNameSurname);
                    formData.append("TicketAssignedUserId", TicketAssignedUserId);
                    formData.append("TicketReportedUserPhone", TicketReportedUserPhone);

                    if (attachmentFile != null) {
                        formData.append("AttachmentsFile", attachmentFile[0]);
                    }
                    if (noteFile != null) {
                        formData.append("NotesFile", noteFile[0]);
                    }
                    formData.append("TicketRelatedLocationHierarchyId", locations);
                formData.append("NoteText", ticketNoteText);
                    /*formData.append("TicketOwnerUserId", "1");*/
                    formData.append("AddedByUserId", data.AddedByUserId);
                e.data = formData;
                e.contentType = false;
                e.processData = false;
                e.headers = ajaxHeader;
                }

                if (type == "insert") {
                    console.log("insert");
                    var ajaxHeader = {};
                ajaxHeader["RequestVerificationToken"] = "@Xsrf.GetAndStoreTokens(Model.HttpContext).RequestToken";

                    var openedTime = $("#dateTicket").dxDateBox("instance").option("value");
                    var TicketReportedUserPhone = $("#txtPhone").dxTextBox("instance").option("value");
                var openedTimeConverted = (new Date(openedTime)).toUTCString(3);
                    var TicketDescription = $("#textAreaDescription").dxTextArea("instance").option("value");
                    var TicketReportedUserNameSurname = $("#TicketReportedUserId").dxTextBox("instance").option("value");
                    var TicketAssignedUserId = $("#sbAsgGroupEmp").dxSelectBox("instance").option("value");
                var TickedAssignedAssignmentGroupId = $("#sbAsgGroup").dxSelectBox("instance").option("value");
                    var TicketOwnerUserId = $("#ticketUserId").dxSelectBox("instance").option("value");
                var TicketPriority = $("#sbTicketPriority").dxSelectBox("instance").option("value");
                    var TicketReasonId = $("#dropDownReasonSingle").dxDropDownBox("instance").option("value");
                    console.log("TicketReasonId", TicketReasonId);
                    var TicketRelatedLocations = $("#dropDownLocation").dxDropDownBox("instance").option("value");
                    console.log("TicketRelatedLocations", TicketRelatedLocations);
                    if (TicketRelatedLocations == null) {
                        Swal.fire('Mahal Eklemediniz;');
                        return;
                    }
                var ticketNoteText = $("#textTicketNote").dxTextArea("instance").option("value");
                var dateResolutionTime = $("#dateResolutionTime").dxDateBox("instance").option("value");
                var dateResolutionTimeConverted = (new Date(dateResolutionTime)).toUTCString(3);
                var dateResponseTime = $("#dateResponseTime").dxDateBox("instance").option("value");
                var dateResponseTimeConverted = (new Date(dateResponseTime)).toUTCString(3);
                var formData = new FormData();
                formData.append("TicketDescription", TicketDescription);
                formData.append("TicketOpenedTime", openedTimeConverted);
                formData.append("TickedAssignedAssignmentGroupId", TickedAssignedAssignmentGroupId);
                formData.append("ExpectedResolutionTime", dateResolutionTimeConverted);
                formData.append("ExpectedResponseTime", dateResponseTimeConverted);
                    formData.append("TicketReportedUserNameSurname", TicketReportedUserNameSurname);
                    formData.append("TicketReportedUserPhone", TicketReportedUserPhone);

                //todo : Bu değer diasproject_identity den alınacak
                //formData.append("TicketReportedUserId", 1);
                formData.append("TicketPriorityId", TicketPriority);
                formData.append("TicketReasonHierarchyId", TicketReasonId);
                    /*formData.append("AttachmentsFile", attachmentFile[0]);*/
                    if (attachmentFile != null) {

                        for (var i = 0; i < attachmentFile.length; i++) {
                            formData.append("AttachmentsFile", attachmentFile[i]);
                        }

                    }
                    //todo : Dosya ekleme vakaya göre zorunlu veya zorunlu olmayacak
                    //else {
                    //    Swal.fire('Dosya Eklemediniz');
                    //    return;
                    //}
                    if (noteFile != null) {
                        formData.append("NotesFile", noteFile[0]);
                    }

                formData.append("TicketRelatedLocationHierarchyId", TicketRelatedLocations);
                /*formData.append("NoteText", ticketNoteText);*/
                    formData.append("TicketAssignedUserId", TicketAssignedUserId);
                    formData.append("TicketOwnerUserId", TicketOwnerUserId);
                /*formData.append("AddedByUserId", 1);*/

                e.data = formData;
                e.contentType = false;
                e.processData = false;
                e.headers = ajaxHeader;
                }



            }

            //yeni bir dosya eklendiğinde eklenen değerin tutulması
            function attachmentUploader_valueChanged(e) {
                let files = e.value;
                attachmentFile = e.value;
                formDataFiles = new FormData();
                for (let i = 0; i != files.length; i++) {
                    formDataFiles.append("attachmentFile", files[i]);
                    FormDataAttachmentFile = formDataFiles;
                }
            }
            var countNote = 1;

            //yeni bir not eklendiğinde eklenen değerin tutulması
            function noteFileUploader_valueChanged(e) {
                let files = e.value;
                noteFile.push(e.value);
                formDataFiles = new FormData();
                for (let i = 0; i != files.length; i++)
                {
                    formDataFiles.append("noteFile", files[i]);
                    FormDataNoteFile = formDataFiles;
                }
            }

            //mahal seçim ayarları
            function syncTreeViewSelectionLocation(treeView, value) {
                if (!value) {
                    count = 0;
                    treeView.unselectAll();
                    if ($(".classTable").length != 0) {
                        var tableCount = $(".classTable").length;
                        var tableArray = [];
                        tableArray = $(".classTable");
                        for (var i = 0; i < tableCount; i++) {
                            tableArray[i].remove();
                        }

                    }
                }
                else {
                    value.forEach(function (key){
                    treeView.selectItem(key);
                });
                }

            }

            //vaka seçim ayarları
            function syncTreeViewSelection(treeView, value) {
                if (!value) {
                    count = 0;
                    treeView.unselectAll();

                } else {
                    var filterValue = treeView._dataSource._items;
                    for (var i = 0; i < filterValue.length; i++)
                    {
                        if (filterValue[i].HierarchyId == value) {
                            var dateTicketTime = $("#dateTicket").dxDateBox("instance").option("value");

                            if (dateTicketTime == null) {
                                $("#dateResponseTime").dxDateBox("instance").option("value", moment(dateTicketTime).add(filterValue[i].ResponseTime, 'm').toDate());
                                $("#dateResolutionTime").dxDateBox("instance").option("value", moment(dateTicketTime).add(filterValue[i].ResponseTime + filterValue[i].ResolutionTime, 'm').toDate());
                            }
                            else {
                                $("#dateResponseTime").dxDateBox("instance").option("value", moment(dateTicketTime).add(filterValue[i].ResponseTime, 'm').toDate());
                                $("#dateResolutionTime").dxDateBox("instance").option("value", moment(dateTicketTime).add(filterValue[i].ResponseTime + filterValue[i].ResolutionTime, 'm').toDate());
                            }

                            $("#dateResolutionTimeText").dxTextBox("instance").option("value", filterValue[i].ResolutionTimeText + "dk");
                            $("#dateResponseTimeText").dxTextBox("instance").option("value", filterValue[i].ResponseTimeText + "dk");
                            //$("#dateResolutionTimeText").dxTextBox("instance").option("value", filterValue[i].ResolutionTimeText);

                            //if (filterValue[i].LocationName == null) {
                            //    if (filterValue[i].ResponseTimeText == "0") {
                            //        $("#dateResolutionTimeText").dxTextBox("instance").option("value", "1 dk");
                            //    }
                            //    else {
                            //        $("#dateResolutionTimeText").dxTextBox("instance").option("value", filterValue[i].ResolutionTimeText + "dk");
                            //    }

                            //    if (filterValue[i].ResponseTimeText == "0") {
                            //        $("#dateResponseTimeText").dxTextBox("instance").option("value", "1 dk");
                            //    }
                            //    else {
                            //        $("#dateResponseTimeText").dxTextBox("instance").option("value", filterValue[i].ResponseTimeText + "dk");
                            //    }
                            //}
                            treeView.selectItem(value);
                        }
                    }

                }
            }

            //opened time seçildiğinda tarih değerlerinin güncellenmesi
            function onValueChangeOpenedTime(e) {
                var deger1 = $("#dateResponseTimeText").dxTextBox("instance").option("value");
                var deger2 = $("#dateResolutionTimeText").dxTextBox("instance").option("value");
                if (deger1 != null && deger2 != null) {
                    changedDeger1 = deger1.slice(0, deger1.length - 2);
                    changedDeger2 = deger2.slice(0, deger2.length - 2);

                    if (changedDeger1 != null && changedDeger2 != null) {
                        $("#dateResponseTime").dxDateBox("instance").option("value", moment(e.value).add(parseInt(deger1), 'm').toDate());
                        $("#dateResolutionTime").dxDateBox("instance").option("value", moment(e.value).add(parseInt(deger1) + parseInt(deger2), 'm').toDate());
                    }
                }
            }

            //Not kaydetme
            function noteKaydet(e) {

                var ajaxHeader = {};
                ajaxHeader["RequestVerificationToken"] = "@Xsrf.GetAndStoreTokens(Model.HttpContext).RequestToken";


                FormDataNoteFile.append("TicketId", data.Id);
                FormDataNoteFile.append("NoteText", $("#textTicketNote").dxTextArea("instance").option("value"));

                $.ajax({
                    url: "Tickets?handler=AddNote",
                    headers: ajaxHeader,
                    data: FormDataNoteFile,
                    contentType: false,
                    processData: false,
                    type: 'post',
                    success: function () {
                        FormDataNoteFile.delete('noteFile');
                        FormDataNoteFile.delete('TicketId');
                        FormDataNoteFile.delete('NoteText');
                        $("#ticketNotesGrid").dxDataGrid("instance").refresh();
                        $("#textTicketNote").dxTextArea("instance").option("value", null);
                        $("#file-uploader").dxFileUploader("instance").reset();


                    }
                });
            }

            //vaka multi seçim ayarları
            function treeBox_valueChangedReason(e) {
                if (e.component.content() == null)
                    return;

                var $treeView = e.component.content().find(".dx-treeview");

                if ($treeView.length) {
                    syncTreeViewSelection($treeView.dxTreeView("instance"), e.value);
                }
            }

            //atanan kişilerin seçim ayarları
            function syncTreeViewSelectionAssigned(treeView, value) {
                if (!value) {
                    treeView.unselectAll();
                } else {
                    treeView.selectItem(value);
                }
            }

             //atanan kişilerin seçim ayarları
            function treeBoxMulti_valueChangedAssigned(e) {
                if (e.component.content() == null)
                    return;
                var $treeView = e.component.content().find(".dx-treeview");
                if ($treeView.length) {
                    syncTreeViewSelectionAssigned($treeView.dxTreeView("instance"), e.value);
                }
            }

            function TicketRelatedLocationsFunc(container, options) {
                if (options.data.TicketRelatedLocations == null) {
                    return;
                }
                let myArr = options.data.Attachments = options.data.TicketRelatedLocations
                let result;
                myArr.forEach((index, idx, array) => {

                    $('<div style="font-weight:700"/>').addClass('dx-text')
                        .text(index.TicketLocation.LocationName)
                        .appendTo(container);

                });
                return result;
            }

            //not gridinin rowların celleri
            function TicketNoteGridCellTemplate(container, options) {

                if (options.data.Attachments == null) {
                    return;
                }
                let myArr = options.data.Attachments;

                myArr.forEach((index, array) => {
                    $('<a/>').addClass('dx-link')
                        .text(index.FolderName)
                        .on('dxclick', function () {
                            var url = `Tickets?handler=FileNoteAttachment`;
                            $.ajax({
                                type: 'GET',
                                url: url,
                                data: { "Id": options.data.Id, "attachmentId": index.Id },
                                beforeSend: function (xhr) {
                                },
                                success: function (data) {

                                    var byte = base64ToArrayBuffer(data);
                                    saveByteArray([byte], index.FolderName, index.FileType);
                                }
                            });
                        })
                        .append("<br />")
                        .appendTo(container)
                });
            }

            //dosya gridinin rowların celleri
            function ticketAttachmentGridCellTemplate(container, options) {
                if (options.data == null) {
                    return;
                }

                var folderName = options.data.FolderName;
                $('<a/>').addClass('dx-link')
                    .text(folderName)
                    .on('dxclick', function () {
                        var url = `Tickets?handler=FileAttachments&Id=${options.data.Id}`;
                            $.ajax({
                                type: 'GET',
                                url: url,
                                data: { "Id": options.data.Id},
                                beforeSend: function (xhr) {
                                    //xhr.setRequestHeader('Authorization', sessionStorage.getItem("token"))
                                },
                                success: function (data) {
                                    var byte = base64ToArrayBuffer(data);
                                    saveByteArray([byte], options.data.FolderName,options.data.FileType);
                                }
                            });
                        })
                        .append("<br />")
                        .appendTo(container)

            }

            //base64buffer fonksiyonu
            function base64ToArrayBuffer(base64) {
                var binaryString = window.atob(base64);
                var binaryLen = binaryString.length;
                var bytes = new Uint8Array(binaryLen);
                for (var i = 0; i < binaryLen; i++) {
                    var ascii = binaryString.charCodeAt(i);
                    bytes[i] = ascii;
                }
                return bytes;
            }

            //dosya indirme fonksiyonu
            var saveByteArray = (function () {
                var a = document.createElement("a");
                document.body.appendChild(a);
                a.style = "display: none";
                return function (data, name, type) {
                    var blob = new Blob(data, { type: type }),
                        url = window.URL.createObjectURL(blob);
                    a.href = url;
                    a.download = name;
                    a.click();
                    window.URL.revokeObjectURL(url);
                };
            }());

            //iş emri gridindeki seçenekler dpbutton
            function btn_ticketStateOnClick(e) {
                ticketStateId = e.itemData.Id;
                ticketStatusId = dataRow.TicketStatusId;
                if (e.itemData.Id == 1 || e.itemData.Id == 2) {
                    $("#popupAssignedUser").dxPopup("show");
                    return;
                }


                dataRow.TicketStatusId = e.itemData.Id;

                var ajaxHeader = {};
                ajaxHeader["RequestVerificationToken"] = "@Xsrf.GetAndStoreTokens(Model.HttpContext).RequestToken";



                $.ajax({
                    type: "POST",
                    url: "Tickets?handler=ChangeTicketState",
                    headers: ajaxHeader,
                    data: { "Id": ticketStateId, "ticketStateId": ticketStatusId, "stringUserId": "0", "ticketId": dataRow.Id },
                    async: true,
                    success: function (response) {
                        $("#popupAssignedUser").dxPopup("hide");
                        $("#popupContainer").dxPopup("hide");
                        $("#gridTicket").dxDataGrid("instance").refresh();
                        $("#assignedUser").dxDropDownBox("instance").option("value", null);
                    },
                    failure: function (response) {
                        alert(response);
                    }
                });

                if (!dataRow) return;


            }

            //iş emri gridindeki seçeneklerin içinde gelenlerin gösterilmesi
            function btnStateTemplate(itemData) {
                    let sourceImg;
                if (itemData.Id == 1)
                    sourceImg = `../../images/general/kisiteata.svg`;
                if (itemData.Id == 2)
                    sourceImg = `../../images/general/grubaata.svg`;
                if (itemData.Id == 3)
                    sourceImg = `../../images/general/calismayabasla.svg`;
                if (itemData.Id == 4)
                    sourceImg = `../../images/general/cozumle.svg`;
                if (itemData.Id == 5)
                    sourceImg = `../../images/general/askiyaal.svg`;
                if (itemData.Id == 6)
                    sourceImg = `../../images/general/beklemeyeal.svg`;
                if (itemData.Id == 7)
                    sourceImg = `../../images/general/yenidenac.svg`;
                if (itemData.Id == 8)
                    sourceImg = `../../images/general/iptalet.svg`;
                if (itemData.Id == 9)
                    sourceImg = `../../images/general/reddet.svg`;
                if (itemData.Id == 10)
                    sourceImg = `../../images/general/kapat.svg`;

                    return `<div> <img style='float:left' src='${sourceImg}' /> <div style='float:left'>${itemData.Name}</div> </div>`;

                //TODO Get from db later

            }

            //mahal seçiminde valuenin değiştiğinda yapıldığı fonksiyon
            function locationTreeBox_valueChanged(e) {
                if (e.component.content() == null)
                    return;
                var $treeView = e.component.content().find(".dx-treeview");
                if ($treeView.length) {
                    syncTreeViewSelectionLocation($treeView.dxTreeView("instance"), e.value);
                }
            }

            //iş emri öncelik durumlarının renklendirilmesi
            function onOpenedPriority(e) {
                var listItems = e.component.content().find(".dx-list-item");
                listItems[0].id = "priorityOne";
                listItems[1].id = "priorityTwo";

            }

            //filtre de ki değerlerin silinmesi
            function clearAll() {
                $("#dropDownReasonMultipleFilter").dxDropDownBox("instance").option("value", null);
                $("#dropDownLocationFilter").dxDropDownBox("instance").option("value", null);
                $("#sbPriorityFilter").dxSelectBox("instance").option("value", null);
                $("#sbTicketStateFilter").dxSelectBox("instance").option("value", null);
                $("#sbTicketUserFilter").dxSelectBox("instance").option("value", null);
                $("#textDescription").dxTextBox("instance").option("value", null);
                $("#ticketCode").dxTextBox("instance").option("value", null);
                $("#filterResponseTimeTargetedStart").dxDateBox("instance").option("value", null);
                $("#filterResponseTimeTargetedEnd").dxDateBox("instance").option("value", null);
                $("#filterResoluitonTimeTargetedStart").dxDateBox("instance").option("value", null);
                $("#filterResoluitonTimeTargetedEnd").dxDateBox("instance").option("value", null);
                $("#txtPhoneFilter").dxTextBox("instance").option("value", null);
                $("#filterDeclarativeUser").dxTextBox("instance").option("value", null);
                $("#sbAssignedGroupFilter").dxSelectBox("instance").option("value", null);
                $("#filterResponsedTime").dxDateBox("instance").option("value", null);
                $("#filterResoluitonedTime").dxDateBox("instance").option("value", null);
                $("#filterClosedTime").dxDateBox("instance").option("value", null);
                $("#filterDateTicketStart").dxDateBox("instance").option("value",null);
                $("#filterDateTicketEnd").dxDateBox("instance").option("value",null);
                $("#sbTicketUserFilterTicketOwner").dxSelectBox("instance").option("value", null);
            }

            //iş emri öncelik durumlarının filtredeki değerlerin renklendirilmesi
            function onOpenedPriorityFilter(e) {
                var listItems = e.component.content().find(".dx-list-item");
                listItems[0].id = "priorityOne";
                listItems[1].id = "priorityTwo";
            }

            //grid refresh edilmesi
            function btn_refreshGridClick(e) {
                //to do :  sonra filtreleme kriterine göre getirilecek
                $("#gridTicket").dxDataGrid("instance").refresh();
            }

            //grid initialized ederken
            function OnInitialized(e) {
                Tickets.init();
            }

            //grid hazır olduğunda
            function onContentReadyGrid(e) {

                DataGrid = e.component;
                e.component.deselectRows(e.component.getSelectedRowKeys());
                var toolbar = e.element.find('.dx-datagrid-header-panel .dx-toolbar').dxToolbar('instance');
                toolbar.on('optionChanged', function (arg) {
                    addCustomItemPdfButton(toolbar);
                    addCustomItem(toolbar);

                });
                addCustomItemPdfButton(toolbar);
                addCustomItem(toolbar);
                if ($(".classTable").length != 0) {
                    var tableCount = $(".classTable").length;
                    var tableArray = [];
                    tableArray = $(".classTable");
                    for (var i = 0; i < tableCount; i++) {
                        $("#dropDownLocation").dxDropDownBox("instance").option("value", null);
                        $("#locationTreeViewMultiple").dxTreeView("unselectAll");
                        tableArray[i].remove();
                    }
                }
            }

            //grid toolbarına refresh butonu eklenmesi
            function addCustomItem(toolbar) {
                var items = toolbar.option('items');
                var myItem = DevExpress.data.query(items).filter(function (item) {
                    return item.name == 'myButton';
                }).toArray();
                if (!myItem.length) {
                    items.push({
                        id:'btn_refresh',
                        location: 'after',
                        widget: 'dxButton',
                        name: 'myButton',
                        options: {
                            template: function (container, options) {
                                return `<i class='dx-icon fas fa-redo'></i><span class='dx-button-text' id='timer'></span>`
                            },
                            hint: 'yenile',
                            type: "default",
                            onClick: function btn_refreshGridClick(e) {
                                $("#gridTicket").dxDataGrid("instance").getDataSource().reload();

                            },
                        },
                    });
                    toolbar.option('items', items);
                }
            }

            //grid toolbarına pdf butonunun eklenmesi
            function addCustomItemPdfButton(toolbar) {
                var items = toolbar.option('items');
                var myItem = DevExpress.data.query(items).filter(function (item) {
                    return item.name == 'btn_pdf';
                }).toArray();
                if (!myItem.length) {
                    items.push({
                        id: 'btn_pdf',
                        location: 'after',
                        widget: 'dxDropDownButton',
                        name: 'btn_pdf',
                        options: {
                            text: 'Pdf',
                            icon: 'save',
                            displayExpr: 'name',
                            keyExpr: 'Id',
                            elementAttr: {
                                id: "elementId",
                                class: "dpbColor"
                            },
                            dropDownOptions: {
                                width: 230,
                            },
                            onItemClick: exportToPDF,
                            items: pdfOptionsOfTicket,
                        },
                    });
                    toolbar.option('items', items);
                }
            }

            $(function ()
            {
                $("#ticketSearch").parent().css("padding-right", "0px");
            })

            var tabsData;

            //tablar initialized edildiğinde
            function tabs_Initialized(e) {
                tabsData = e.component;
                var tabs = e.component;
                tabsData = tabs;
                tabs.option("items[1].disabled", true);
                $("#btnEdit").attr("hidden", true);
            }

            //mahal popupının gösterilmesi
            function onclickMahalPopup(e) {
                $("#popupContainerMahal").dxPopup("show");
                if (data != null) {
                    if (locationsWithPopup.length != 0) {
                        let locations = [];
                        console.log("locationsWithPopup",locationsWithPopup);
                        locationsWithPopup.forEach((location, index, array) => {
                            locations.push(location.HierarchyId);
                        });

                        console.log("locationsWithPopup", locations);
                        $("#dropDownLocation").dxDropDownBox("instance").option("value", locations);
                        for (var i = 0; i < locationsWithPopup.length; i++) {

                            $("#locationTreeViewMultiple").dxTreeView("selectItem", locationsWithPopup[i].HierarchyId);
                        }
                    }
                }

            }


            //mahal popupı
            $(function () {
                $("#popupContainerMahal").dxPopup({
                    title: "Popup Title",
                    contentTemplate: LocationPopup,
                    deferRendering: false,
                    showCloseButton: true,
                    toolbarItems: [{
                        text: "Mahal Ekle",

                        location: "before"
                    },
                    {
                        widget: "dxButton",
                        toolbar: 'top',
                        location: "after",
                        options: {
                            type: 'success',
                            text: "Kaydet",
                            icon: "save",
                            onClick: function (e) {
                                $("#popupContainerMahal").dxPopup("hide");
                                /*var lenghtDp = $("#dropdownLocation").dxDropDownBox("instance").option("value");*/
                                var lengthDP = $("#dropDownLocation").dxDropDownBox("instance").option("value");
                                $("#addMahalButton").dxButton("instance")._$element.children().children().children()[0].innerHTML = `${lengthDP.length}`;
                            }
                        }
                    },
                    {
                        widget: "dxButton",
                        toolbar: 'top',
                        location: "after",
                        options: {
                            type: "default",
                            text: "Kapat",
                            icon: "close",
                            onClick: function (e) {

                                if ($(".classTable").length != 0) {
                                    var tableCount = $(".classTable").length;
                                    var tableArray = [];
                                    tableArray = $(".classTable");
                                    for (var i = 0; i < tableCount; i++) {
                                        $("#dropDownLocation").dxDropDownBox("instance").option("value", null);
                                        $("#locationTreeViewMultiple").dxTreeView("unselectAll");
                                        tableArray[i].remove();
                                    }
                                }
                                $("#popupContainerMahal").dxPopup("hide");
                            }
                        }
                    }


                    ]
                });
            });

            //kişiye ata popupı
            $(function () {
                $("#popupAssignedUser").dxPopup({
                    title: "Kişiye Ata",
                    contentTemplate: AssignUserPopup,
                    showCloseButton: true,
                    width: 600,
                    height:200,
                    toolbarItems: [{
                        text: "Kişi Seç",
                        location: "before"
                    },
                    {
                        widget: "dxButton",
                        toolbar: 'top',
                        location: "after",
                        options: {
                            type: 'success',
                            text: "Kaydet",
                            icon: "save",
                            onClick: function (e) {
                                var userId = $("#assignedUser").dxDropDownBox("instance").option("value");
                                var ticketId = dataRow.Id;
                                if (ticketId != null) {
                                    ticketId = dataRow.Id;
                                }
                                var ajaxHeader = {};
                                ajaxHeader["RequestVerificationToken"] = "@Xsrf.GetAndStoreTokens(Model.HttpContext).RequestToken";
                                $.ajax({
                                    type: "POST",
                                    url: "Tickets?handler=ChangeTicketState",
                                    headers: ajaxHeader,
                                    data: { "Id": ticketStateId, "ticketStateId": ticketStatusId, "stringUserId": userId[0], "ticketId": ticketId },
                                    async: true,
                                    success: function (response) {
                                        $("#popupAssignedUser").dxPopup("hide");
                                        $("#popupContainer").dxPopup("hide");
                                        $("#gridTicket").dxDataGrid("instance").refresh();
                                        $("#assignedUser").dxDropDownBox("instance").option("value",null);
                                    },
                                    failure: function (response) {
                                        alert(response);
                                    }
                                    });
                            }
                        }
                    },
                    {
                        widget: "dxButton",
                        toolbar: 'top',
                        location: "after",
                        options: {
                            type: "default",
                            text: "Kapat",
                            icon: "close",
                            onClick: function (e) {
                                $("#popupAssignedUser").dxPopup("hide");
                                $("#assignedUser").dxDropDownBox("instance").option("value", null);
                            }
                        }
                    }
                    ]
                });
            });


            var count = 0;

            //partial view locationtreeview multi fonksiyonu
            function OnItemSelectionChangedLocationTm(args) {

                count = count + 1;

                if (args.itemData.selected == true) {
                    $("#dropDownLocation").dxDropDownBox("instance").option("value", args.component.getSelectedNodeKeys());
                    $("#selectedLocation").append(`
        <table id="table${args.itemData.Id}" class="table table-bordered classTable">
          <thead>
          </thead>
          <tbody>
            <tr>
              <th class="col-md-2" scope="row">${count}</th>
              <td class="col-md-5">${args.itemData.LocationName}</td>
              <td class="col-md-5">
        <button style="display: block;margin: auto;" type="button" id="location${args.itemData.Id}" name="location${args.node.key}" class="btn btn-primary" onclick="onDeleteLocation(this)">Kaldır</button></td>
            </tr
          </tbody>
        </table>`)
                }
                else {
                    $(`#table${args.itemData.Id}`).remove();
                    for (var i = 0; i < $(".classTable").length; i++) {
                        $(".classTable")[i].rows[0].cells[0].innerHTML = `${i + 1}`;
                    }
                    count = $(".classTable").length;
                    locationsUpdate.push(args.node.key);
                }
            }

            //eklenmiş mahallerin silinmesi işlemi
            function onDeleteLocation(a) {
                var str = a.id.toString();
                var strName = a.name;

                var stringId = str.substring(8);
                var stringName = strName.substring(8);
                var countdp = $(".classTable").length;
                var selectedItemsArr = [];
                $(`#table${stringId}`).remove();
                const index = locationsUpdate.indexOf(stringName);
                locationsUpdate.splice(index, 1);

                for (var i = 0; i < $(".classTable").length; i++) {
                    $(".classTable")[i].rows[0].cells[0].innerHTML = `${i + 1}`;
                }

                count = $(".classTable").length;

                for (var i = 0; i < $("#locationTreeViewMultiple").dxTreeView("getSelectedNodes").length; i++) {

                    if ($("#locationTreeViewMultiple").dxTreeView("getSelectedNodes")[i].key == stringName) {

                        $("#locationTreeViewMultiple").dxTreeView("unselectItem", stringName);
                        var selectedItems = $("#dropDownLocation").dxDropDownBox("instance").option("value");
                        for (var i = 0; i < selectedItems.length; i++) {
                            if (selectedItems[i] != stringName) {
                                selectedItemsArr.push(selectedItems[i]);
                            }
                        }
                        $("#dropDownLocation").dxDropDownBox("instance").option("value", selectedItemsArr);
                    }
                }
            }

            //gridde ki statu değerleri
            function cellTemplate_CurrentStatus(container, options) {

                if (options.data.TicketPriorityId == 2) {
                    container.css("background-color", "red");
                }
                if (options.data.TicketPriorityId == 3) {
                    container.css("background-color", "yellow");
                }


                if (options.data.TicketStatusId == 1)
                    $("<div title='Yeni'>")
                        .append($("<img >", { "src": "../../images/general/01_acik.svg" }))
                        .appendTo(container);

                else if (options.data.TicketStatusId == 2)
                    $("<div title='Atandı'>")
                        .append($("<img>", { "src": "../../images/general/02_atandi.svg" }))
                        .appendTo(container);
                else if (options.data.TicketStatusId == 3)
                    $("<div title='Üzerinde Çalışılıyor'>")
                        .append($("<img>", { "src": "../../images/general/03_calisiliyor.svg" }))
                        .appendTo(container);
                else if (options.data.TicketStatusId == 4)
                    $("<div title='Çözümlendi'>")
                        .append($("<img>", { "src": "../../images/general/06_cozumlendi.svg" }))
                        .appendTo(container);
                else if (options.data.TicketStatusId == 5)
                    $("<div title='Kapatıldı'>")
                        .append($("<img>", { "src": "../../images/general/07_kapali.svg" }))
                        .appendTo(container);
                else if (options.data.TicketStatusId == 6)
                    $("<div title='Askıya Alındı'>")
                        .append($("<img>", { "src": "../../images/general/06_cozumlendi.svg" }))
                        .appendTo(container);
                else if (options.data.TicketStatusId == 7)
                    $("<div title='Beklemede'>")
                        .append($("<img>", { "src": "../../images/general/04_beklet.svg" }))
                        .appendTo(container);
                else if (options.data.TicketStatusId == 8)
                    $("<div title='İptal Edildi'>")
                        .append($("<img>", { "src": "../../images/general/05_reddet.svg" }))
                        .appendTo(container);
                else
                    $("<div title='Açık'>")
                        .append($("<img>", {}))
                        .appendTo(container);
            }

            //grid excel export
            function ticketGridDataExporting(e) {
                DataGrid.beginUpdate();
                DataGrid.columnOption("DateTimeResponsedTimeString", "visible", true);
                DataGrid.columnOption("DateTimeResolutionedTimeString", "visible", true);
                let workbook = new ExcelJS.Workbook();
                let worksheet = workbook.addWorksheet('tickets');

                DevExpress.excelExporter.exportDataGrid({
                    component: e.component,
                    worksheet: worksheet,
                    autoFilterEnabled: true,
                    customizeCell: function (options) {
                    var gridCell = options.gridCell;
                    var excelCell = options.excelCell;
                    if (gridCell.rowType === "data") {
                                if (gridCell.column.dataField === 'ExpectedResponseTime') {                                                                                                          
                                    excelCell.value = $(`#expectedResponseTimeCount${gridCell.data.Id}`)[0].innerHTML;
                                }
                                if (gridCell.column.dataField === 'ExpectedResolutionTime') {                                                                        
                                    excelCell.value = $(`#expectedResponseTimeCount${gridCell.data.Id}`)[0].innerHTML;
                                }
                        }
                }
                }).then(function () {
                    workbook.xlsx.writeBuffer().then(function (buffer) {
                        saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'IsEmirleri.xlsx');
                    });
                }).then(()=>{
                        DataGrid.columnOption("DateTimeResponsedTimeString", "visible", false);
                        DataGrid.columnOption("DateTimeResolutionedTimeString", "visible", false);
                        DataGrid.endUpdate();
                    });
                e.cancel = true;
                //DataGrid.columnOption("DateTimeResponsedTimeString", "visible", false);
                //DataGrid.columnOption("DateTimeResolutionedTimeString", "visible", false);
                //DataGrid.endUpdate();
            }

            //Tarih aralık kontrolleri
            function onChangeFilterResponseTimeTargetedStart(e) {
                $("#filterResponseTimeTargetedEnd").dxDateBox("instance").option("min", e.value);
            }

            //Tarih aralık kontrolleri
            function onChangeFilterResponseTimeTargetedEnd(e) {
                $("#filterResponseTimeTargetedStart").dxDateBox("instance").option("max", e.value);
            }

            //Tarih aralık kontrolleri
            function onChangeFilterResoluitonTimeTargetedStart(e) {
                $("#filterResoluitonTimeTargetedEnd").dxDateBox("instance").option("min", e.value);

            }

            //Tarih aralık kontrolleri
            function onChangeFilterResoluitonTimeTargetedEnd(e) {
                $("#filterResoluitonTimeTargetedStart").dxDateBox("instance").option("max", e.value);
            }

            //Tarih aralık kontrolleri
            function onValueChangefilterDateTicketStartStart(e) {
                $("#filterDateTicketEnd").dxDateBox("instance").option("min", e.value);
            }

            //Tarih aralık kontrolleri
            function onValueChangefilterDateTicketStartEnd(e) {
                $("#filterDateTicketStart").dxDateBox("instance").option("max", e.value);
            }

            //Filtreleme kısmı fonksiyon
            function btn_ticketFindClick() {
                $("#loadPanel").dxLoadPanel("show");

                //var ajaxHeader = {};
                //ajaxHeader["RequestVerificationToken"] = "@Xsrf.GetAndStoreTokens(Model.HttpContext).RequestToken";
                //var FormDataFilter = new FormData();
                var dpReasonMultipleFilter = $("#dropDownReasonMultipleFilter").dxDropDownBox("instance").option("value");
                var dpLocationFilter = $("#dropDownLocationFilter").dxDropDownBox("instance").option("value");
                var sbPriorityFilter = $("#sbPriorityFilter").dxSelectBox("instance").option("value");
                var sbTicketStateFilter = $("#sbTicketStateFilter").dxSelectBox("instance").option("value");
                var sbTicketUserFilter = $("#sbTicketUserFilter").dxSelectBox("instance").option("value");
                var textDescription=$("#textDescription").dxTextBox("instance").option("value");
                var ticketCode =  $("#ticketCode").dxTextBox("instance").option("value");
                //var filterResponseTime = $("#filterResponseTime").dxTextBox("instance").option("value");
                //var filterResoluitonTime = $("#filterResoluitonTime").dxTextBox("instance").option("value");
                var insertUser = $("#sbTicketUserFilterTicketOwner").dxSelectBox("instance").option("value");
                var filterResponseTimeTargetedStart = $("#filterResponseTimeTargetedStart").dxDateBox("instance").option("value");
                var filterResponseTimeTargetedEnd = $("#filterResponseTimeTargetedEnd").dxDateBox("instance").option("value");
                var filterResoluitonTimeTargetedStart = $("#filterResoluitonTimeTargetedStart").dxDateBox("instance").option("value");
                var filterResoluitonTimeTargetedEnd= $("#filterResoluitonTimeTargetedEnd").dxDateBox("instance").option("value");
                var filterDeclarativeUser =$("#filterDeclarativeUser").dxTextBox("instance").option("value");
                var txtPhoneFilter =$("#txtPhoneFilter").dxTextBox("instance").option("value");
                var sbAssignedGroupFilter= $("#sbAssignedGroupFilter").dxSelectBox("instance").option("value");
                var filterResponsedTime= $("#filterResponsedTime").dxDateBox("instance").option("value");
                var filterResoluitonedTime= $("#filterResoluitonedTime").dxDateBox("instance").option("value");
                var filterClosedTime= $("#filterClosedTime").dxDateBox("instance").option("value");
                var filterDateTicketStart = $("#filterDateTicketStart").dxDateBox("instance").option("value");
                var filterDateTicketEnd = $("#filterDateTicketEnd").dxDateBox("instance").option("value");



                //FormDataFilter.append("TicketReasonIds", dpReasonMultipleFilter);
                //FormDataFilter.append("FilterLocationIds", dpLocationFilter);
                //FormDataFilter.append("PriorityId", sbPriorityFilter);
                //FormDataFilter.append("TicketStatusId", sbTicketStateFilter);
                //FormDataFilter.append("UserId", sbTicketUserFilter);
                //FormDataFilter.append("TicketDescription", textDescription);
                //FormDataFilter.append("TicketCode", ticketCode);
                //FormDataFilter.append("TicketResponseTimeTargetedStart", (new Date(filterResponseTimeTargetedStart)).toUTCString(3));
                //FormDataFilter.append("TicketResponseTimeTargetedEnd", (new Date(filterResponseTimeTargetedEnd)).toUTCString(3));
                //FormDataFilter.append("TicketResolutionTimeTargetedStart", (new Date(filterResoluitonTimeTargetedStart)).toUTCString(3));
                //FormDataFilter.append("TicketResolutionTimeTargetedEnd", (new Date(filterResoluitonTimeTargetedEnd)).toUTCString(3));
                //FormDataFilter.append("ReportedUser", filterDeclarativeUser);
                //FormDataFilter.append("PhoneNumber", txtPhoneFilter);
                //FormDataFilter.append("AssignedGroupId", sbAssignedGroupFilter);
                //FormDataFilter.append("ResponsedTime", (new Date(filterResponsedTime)).toUTCString(3));
                //FormDataFilter.append("ResoulitionedTime", (new Date(filterResoluitonedTime)).toUTCString(3));
                //FormDataFilter.append("TicketClosedTime", (new Date(filterClosedTime)).toUTCString(3));
                //FormDataFilter.append("TicketDateTicketStart", (new Date(filterDateTicketStart)).toUTCString(3));
                //FormDataFilter.append("TicketDateTicketEnd", (new Date(filterDateTicketEnd)).toUTCString(3));
                //FormDataFilter.append("InsertUser", insertUser);




                if(ticketCode != null){
                    if(ticketCode.replace(/\s/g, '').length  == 0){
                    ticketCode = null;
                    }
                }
                if(textDescription != null){
                    if(textDescription.replace(/\s/g, '').length  == 0){
                    textDescription = null;
                    }
                }
                if(filterDeclarativeUser != null){
                    if(filterDeclarativeUser.replace(/\s/g, '').length  == 0){
                    filterDeclarativeUser = null;
                    }
                }
                if(txtPhoneFilter != null){
                    if(txtPhoneFilter.replace(/\s/g, '').length  == 0){
                    txtPhoneFilter = null;
                    }
                }


                console.log("dpReasonMultipleFilter",dpReasonMultipleFilter);
                console.log("FilterLocationIds",dpLocationFilter);
                console.log("PriorityId",sbPriorityFilter);
                console.log("TicketStatusId",sbTicketStateFilter);
                console.log("UserId",sbTicketUserFilter);
                console.log("TicketDescription",textDescription);
                console.log("TicketCode",ticketCode);
                console.log("TicketResponseTimeTargetedStart",filterResponseTimeTargetedStart);
                console.log("TicketResponseTimeTargetedEnd",filterResponseTimeTargetedEnd);
                console.log("TicketResolutionTimeTargetedStart",filterResoluitonTimeTargetedStart);
                console.log("TicketResolutionTimeTargetedEnd",filterResoluitonTimeTargetedEnd);
                console.log("ReportedUser",filterDeclarativeUser);
                console.log("PhoneNumber",txtPhoneFilter);
                console.log("AssignedGroupId",sbAssignedGroupFilter);
                console.log("ResponsedTime",filterResponsedTime);
                console.log("ResoulitionedTime",filterResoluitonedTime);
                console.log("TicketClosedTime",filterClosedTime);
                console.log("TicketDateTicketStart",filterDateTicketStart);
                console.log("TicketDateTicketEnd",filterDateTicketEnd);
                console.log("InsertUser",insertUser);


                if(dpReasonMultipleFilter != null || dpLocationFilter!=null ||sbPriorityFilter!=null ||  sbTicketStateFilter!=null ||sbTicketUserFilter!=null ||textDescription!=null ||
                ticketCode!=null || filterResponseTimeTargetedStart != null || filterResponseTimeTargetedEnd!=null || filterResoluitonTimeTargetedStart!=null ||  filterResoluitonTimeTargetedEnd!=null ||
                filterDeclarativeUser !=null || txtPhoneFilter!=null || sbAssignedGroupFilter!=null || filterResponsedTime!=null || filterResoluitonedTime!=null || filterClosedTime!=null || filterDateTicketStart!=null ||
                filterDateTicketEnd!=null||insertUser!=null){

                    $("#gridTicket").dxDataGrid("instance").clearFilter();
                    $("#gridTicket").dxDataGrid("instance").filter(
                    ["filter"],
                    ["TicketReasonIds", "=", dpReasonMultipleFilter],
                    ["FilterLocationIds", "=", dpLocationFilter],
                    ["PriorityId", "=", sbPriorityFilter],
                    ["TicketStatusId", "=", sbTicketStateFilter],
                    ["UserId", "=", sbTicketUserFilter],
                    ["TicketDescription", "=", textDescription],
                    ["TicketCode", "=", ticketCode],
                    ["TicketResponseTimeTargetedStart","=",(new Date(filterResponseTimeTargetedStart)).toUTCString(3)],
                    ["TicketResponseTimeTargetedEnd","=",(new Date(filterResponseTimeTargetedEnd)).toUTCString(3)],
                    ["TicketResolutionTimeTargetedStart","=",(new Date(filterResoluitonTimeTargetedStart)).toUTCString(3)],
                    ["TicketResolutionTimeTargetedEnd","=",(new Date(filterResoluitonTimeTargetedEnd)).toUTCString(3)],
                    ["ReportedUser", "=", filterDeclarativeUser],
                    ["PhoneNumber", "=", txtPhoneFilter],
                    ["AssignedGroupId", "=", sbAssignedGroupFilter],
                    ["ResponsedTime", "=", (new Date(filterResponsedTime)).toUTCString(3)],
                    ["ResoulitionedTime", "=", (new Date(filterResoluitonedTime)).toUTCString(3)],
                    ["TicketClosedTime", "=", (new Date(filterClosedTime)).toUTCString(3)],
                    ["TicketDateTicketStart", "=", (new Date(filterDateTicketStart)).toUTCString(3)],
                    ["TicketDateTicketEnd", "=", (new Date(filterDateTicketEnd)).toUTCString(3)],
                    ["InsertUser", "=", insertUser]);
                }
                else
                {
                    console.log("filterGirdi");
                    $("#gridTicket").dxDataGrid("instance").clearFilter();
                    $("#gridTicket").dxDataGrid("instance").getDataSource().reload();
                }







                //$.ajax({
                //    url: "Tickets?handler=Filter",
                //    headers: ajaxHeader,
                //    data: FormDataFilter,
                //    contentType: false,
                //    processData: false,
                //    type: 'post',
                //    success: function (response) {
                //        //var a  = JSON.stringify(response);
                //        //console.log("JSON",a);
                //        //console.log($("#gridTicket").dxDataGrid("instance").option("dataSource").store);
                //        //var denemeler = $("#gridTicket").dxDataGrid("instance").option("dataSource");



                //        //$("#gridTicket").dxDataGrid("instance").repaint(); //Yeniden render et
                //        //$("#gridTicket").dxDataGrid("instance").option("dataSource", response.data);
                //        //$("#gridTicket").dxDataGrid("instance").repaint(); //Yeniden render et

                //        //dataGrid.filter(["TicketReportedUserNameSurname", "=", data.value]);

                //        //var store = dataSource.store();
                //        //$("#gridTicket").dxDataGrid("instance").getDataSource().store().load(a);
                //        $("#loadPanel").dxLoadPanel("hide");
                //    }
                //});
            }

            //AsgGroup value change
            function OnValueChangedAsgGroup(e) {
                //todo  :  asg grouba göre filtreleme işlemi yapılcak
                if (e.value) {
                    if (e.value) {
                        $("#sbAsgGroupEmp").dxSelectBox("instance").option("value", null);
                        var ajaxHeader = {};
                        ajaxHeader["RequestVerificationToken"] = "@Xsrf.GetAndStoreTokens(Model.HttpContext).RequestToken";
                        $.ajax({
                            type: "GET",
                            url: "Tickets?handler=AspEmplooyeByAsgGroupId",
                            headers: ajaxHeader,
                            data: { "asgGroupId": e.value },
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            async: true,
                            success: function (response) {
                                var selectboxAsgGroupEmp = $("#sbAsgGroupEmp").dxSelectBox("getDataSource");
                                selectboxAsgGroupEmp.reload();
                            },
                            failure: function (response) {
                                alert(response);
                            }
                        });
                    }
                }
                else {
                    var selectboxAsgGroupEmp = $("#sbAsgGroupEmp").dxSelectBox("getDataSource");
                    selectboxAsgGroupEmp.reload();
                }
            }

            //PDF export
            function exportToPDF(e) {
                const pdfDoc = new jsPDF('l');
                pdfDoc.addFileToVFS('NotoSerif-Regular-normal.ttf', myFont);
                pdfDoc.addFont('NotoSerif-Regular-normal.ttf', 'NotoSerif-Regular', 'normal');
                pdfDoc.setFont("NotoSerif-Regular");

                DataGrid.beginUpdate();
                DataGrid.columnOption("DateTimeResponsedTimeString", "visible", true);
                DataGrid.columnOption("DateTimeResolutionedTimeString", "visible", true);                                               
                if (e.itemData.Id == 1) {
                    const options = {
                        jsPDFDocument: pdfDoc,
                        component: DataGrid,
                        autoTableOptions: {
                            rowPageBreak: 'auto',
                            bodyStyles: { valign: 'top' },
                            styles: {
                                font: 'NotoSerif-Regular'
                            }
                        },
                        customizeCell: function (options) {                            
                            var gridCell = options.gridCell;
                            var pdfCell = options.pdfCell;                   
                            if (gridCell.rowType === "data") {
                                if (gridCell.column.dataField === 'ExpectedResponseTime') {                                                                                                            
                                    pdfCell.content = $(`#expectedResponseTimeCount${gridCell.data.Id}`)[0].innerHTML;
                                }
                                if (gridCell.column.dataField === 'ExpectedResolutionTime') {                                                                                                
                                    pdfCell.content = $(`#expectedResponseTimeCount${gridCell.data.Id}`)[0].innerHTML;
                                }
                        }
                       }
                    };
                    DevExpress.pdfExporter.exportDataGrid(options).then(() => {
                        pdfDoc.setFontSize(5);
                    }).then(() => {
                        pdfDoc.save('IsEmriPDF.pdf');
                    }).then(()=>{
                        DataGrid.columnOption("DateTimeResponsedTimeString", "visible", false);
                        DataGrid.columnOption("DateTimeResolutionedTimeString", "visible", false);
                        DataGrid.endUpdate();
                    });
                }
                if (e.itemData.Id == 2) {
                    const options = {
                        jsPDFDocument: pdfDoc,
                        component: DataGrid,
                        autoTableOptions: {
                            rowPageBreak: 'auto',
                            bodyStyles: { valign: 'top' },
                            styles: {
                                font: 'NotoSerif-Regular'
                            }
                        },
                        customizeCell: function (options) {                            
                            var gridCell = options.gridCell;
                            var pdfCell = options.pdfCell;                   
                            if (gridCell.rowType === "data") {
                                if (gridCell.column.dataField === 'ExpectedResponseTime') {                                                                                                      
                                    pdfCell.content = $(`#expectedResponseTimeCount${gridCell.data.Id}`)[0].innerHTML;
                                }
                                if (gridCell.column.dataField === 'ExpectedResolutionTime') {                                    
                                    pdfCell.content = $(`#expectedResponseTimeCount${gridCell.data.Id}`)[0].innerHTML;
                                }
                        }
                       },
                        selectedRowsOnly: true
                    };
                    DevExpress.pdfExporter.exportDataGrid(options).then(() => {
                        pdfDoc.setFontSize(5);
                    }).then(() => {
                        pdfDoc.save('IsEmriPDF.pdf');
                    }).then(()=>{
                        DataGrid.columnOption("DateTimeResponsedTimeString", "visible", false);
                        DataGrid.columnOption("DateTimeResolutionedTimeString", "visible", false);
                        DataGrid.endUpdate();
                    });
                }
                
            }
            function getRangeSliderInstanceResolutionTime() {

                return $("#handlerRangeSliderResolutionTime").dxRangeSlider("instance");
            }
            function rangeSliderValueChangedResolutionTime(data){

                $("#startValueResolutionTime").dxNumberBox("instance").option("value", data.start);
                $("#endValueResolutionTime").dxNumberBox("instance").option("value", data.end);

            }
            function startValueChangedResolutionTime(data) {
                var optionRangeSlider = getRangeSliderInstanceResolutionTime();
                //optionRangeSlider.start = data.value;
                optionRangeSlider.option("start", data.value);
            }

            function endValueChangedResolutionTime(data) {
                getRangeSliderInstanceResolutionTime().option("end", data.value);
            }




            function rangeSliderValueChangedResponseTime(data){
                $("#startValueResponseTime").dxNumberBox("instance").option("value", data.start);
                $("#endValueResponseTime").dxNumberBox("instance").option("value", data.end);

            }
            function startValueChangedResponseTime(data) {
                getRangeSliderInstanceResponseTime().option("start", data.value);
            }

            function endValueChangedResponseTime(data) {
                getRangeSliderInstanceResponseTime().option("end", data.value);
            }

            function getRangeSliderInstanceResponseTime() {
                return $("#handlerRangeSliderResponseTime").dxRangeSlider("instance");
            }


            let countDownGridRefreshDate;
            function refreshTimer() {                       
                countDownGridRefreshDate = moment().add(5, 'm').toDate();
                let countOfEnteredIf = 0;

                let countDown = setInterval(function () {
                    let now = new Date().getTime();
                    let distance = countDownGridRefreshDate - now;
                    
                    if (distance < 0) {     
                        
                        if(countOfEnteredIf ==0){
                            document.getElementById("timer").innerHTML = `Yenileniyor..`;

                        var dpReasonMultipleFilter = $("#dropDownReasonMultipleFilter").dxDropDownBox("instance").option("value");
                        var dpLocationFilter = $("#dropDownLocationFilter").dxDropDownBox("instance").option("value");
                        var sbPriorityFilter = $("#sbPriorityFilter").dxSelectBox("instance").option("value");
                        var sbTicketStateFilter = $("#sbTicketStateFilter").dxSelectBox("instance").option("value");
                        var sbTicketUserFilter = $("#sbTicketUserFilter").dxSelectBox("instance").option("value");
                        var textDescription=$("#textDescription").dxTextBox("instance").option("value");
                        var ticketCode =  $("#ticketCode").dxTextBox("instance").option("value");
                        //var filterResponseTime = $("#filterResponseTime").dxTextBox("instance").option("value");
                        //var filterResoluitonTime = $("#filterResoluitonTime").dxTextBox("instance").option("value");
                        var insertUser = $("#sbTicketUserFilterTicketOwner").dxSelectBox("instance").option("value");
                        var filterResponseTimeTargetedStart = $("#filterResponseTimeTargetedStart").dxDateBox("instance").option("value");
                        var filterResponseTimeTargetedEnd = $("#filterResponseTimeTargetedEnd").dxDateBox("instance").option("value");
                        var filterResoluitonTimeTargetedStart = $("#filterResoluitonTimeTargetedStart").dxDateBox("instance").option("value");
                        var filterResoluitonTimeTargetedEnd= $("#filterResoluitonTimeTargetedEnd").dxDateBox("instance").option("value");
                        var filterDeclarativeUser =$("#filterDeclarativeUser").dxTextBox("instance").option("value");
                        var txtPhoneFilter =$("#txtPhoneFilter").dxTextBox("instance").option("value");
                        var sbAssignedGroupFilter= $("#sbAssignedGroupFilter").dxSelectBox("instance").option("value");
                        var filterResponsedTime= $("#filterResponsedTime").dxDateBox("instance").option("value");
                        var filterResoluitonedTime= $("#filterResoluitonedTime").dxDateBox("instance").option("value");
                        var filterClosedTime= $("#filterClosedTime").dxDateBox("instance").option("value");
                        var filterDateTicketStart = $("#filterDateTicketStart").dxDateBox("instance").option("value");
                        var filterDateTicketEnd = $("#filterDateTicketEnd").dxDateBox("instance").option("value");


                        if(ticketCode != null){
                            if(ticketCode.replace(/\s/g, '').length  == 0){
                            ticketCode = null;
                            }
                        }
                        if(textDescription != null){
                            if(textDescription.replace(/\s/g, '').length  == 0){
                            textDescription = null;
                            }
                        }
                        if(filterDeclarativeUser != null){
                            if(filterDeclarativeUser.replace(/\s/g, '').length  == 0){
                            filterDeclarativeUser = null;
                            }
                        }
                        if(txtPhoneFilter != null){
                            if(txtPhoneFilter.replace(/\s/g, '').length  == 0){
                            txtPhoneFilter = null;
                            }
                        }

                        if(dpReasonMultipleFilter != null || dpLocationFilter!=null ||sbPriorityFilter!=null ||  sbTicketStateFilter!=null ||sbTicketUserFilter!=null ||textDescription!=null ||
                        ticketCode!=null || filterResponseTimeTargetedStart != null || filterResponseTimeTargetedEnd!=null || filterResoluitonTimeTargetedStart!=null ||  filterResoluitonTimeTargetedEnd!=null ||
                        filterDeclarativeUser !=null || txtPhoneFilter!=null || sbAssignedGroupFilter!=null || filterResponsedTime!=null || filterResoluitonedTime!=null || filterClosedTime!=null || filterDateTicketStart!=null ||
                        filterDateTicketEnd!=null||insertUser!=null){

                        $("#gridTicket").dxDataGrid("instance").clearFilter();
                        $("#gridTicket").dxDataGrid("instance").filter(
                        ["filter"],
                        ["TicketReasonIds", "=", dpReasonMultipleFilter],
                        ["FilterLocationIds", "=", dpLocationFilter],
                        ["PriorityId", "=", sbPriorityFilter],
                        ["TicketStatusId", "=", sbTicketStateFilter],
                        ["UserId", "=", sbTicketUserFilter],
                        ["TicketDescription", "=", textDescription],
                        ["TicketCode", "=", ticketCode],
                        ["TicketResponseTimeTargetedStart","=",(new Date(filterResponseTimeTargetedStart)).toUTCString(3)],
                        ["TicketResponseTimeTargetedEnd","=",(new Date(filterResponseTimeTargetedEnd)).toUTCString(3)],
                        ["TicketResolutionTimeTargetedStart","=",(new Date(filterResoluitonTimeTargetedStart)).toUTCString(3)],
                        ["TicketResolutionTimeTargetedEnd","=",(new Date(filterResoluitonTimeTargetedEnd)).toUTCString(3)],
                        ["ReportedUser", "=", filterDeclarativeUser],
                        ["PhoneNumber", "=", txtPhoneFilter],
                        ["AssignedGroupId", "=", sbAssignedGroupFilter],
                        ["ResponsedTime", "=", (new Date(filterResponsedTime)).toUTCString(3)],
                        ["ResoulitionedTime", "=", (new Date(filterResoluitonedTime)).toUTCString(3)],
                        ["TicketClosedTime", "=", (new Date(filterClosedTime)).toUTCString(3)],
                        ["TicketDateTicketStart", "=", (new Date(filterDateTicketStart)).toUTCString(3)],
                        ["TicketDateTicketEnd", "=", (new Date(filterDateTicketEnd)).toUTCString(3)],
                        ["InsertUser", "=", insertUser]);
                        }
                        else
                        {
                            console.log("filterGirdi");
                            $("#gridTicket").dxDataGrid("instance").clearFilter();
                            $("#gridTicket").dxDataGrid("instance").getDataSource().reload();
                        }                        
                        countOfEnteredIf++;
                    }

                        
                    }
                    else{
                        let minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
                    let seconds = Math.floor((distance % (1000 * 60)) / 1000);
                    let zero = "";
                    if (seconds < 10)
                        zero = "0";
                    document.getElementById("timer").innerHTML = `Yenile: (0${minutes}:${zero}${seconds})`;
                    }
                    
                }, 1000);
            }
            
</script>



<style>
    .btn-class-dias:hover {
        background-color: #5cb85c;
    }

    .title h3 {
        font-family: 'Segoe UI Light', 'Helvetica Neue Light', 'Segoe UI', 'Helvetica Neue', 'Trebuchet MS', Verdana;
        font-weight: 200;
        font-size: 24px;
        text-align: center;
    }

    #gridTicket {
        padding - left: 10px;
        padding-right: 10px;
    }

    .btn-group {
        display: block;
        text-align: right;
        margin-right: 10px;
        margin-bottom: 5px;
    }

    img {
        height: 25px;
        width: 25px;
        display: block;
    }

    #ticketSearch {
        width: 108px !important;
    }

    #btn_refresh {
        text - align: center;
        height: 38px;
    }
</style>

<style>

    #frmTicket {
        padding: 20px;
    }
</style>

<style>

    #ticketForm {
        padding: 10px;
    }

    #textTicketNote {
        margin: 20px;
    }

    #ticketNotesGrid {
        margin: 20px;
    }

    #ticketAttachmentGrid {
        margin: 20px;
    }

    #ticketHistory {
        margin: 20px;
    }

    .edit-actions {
        width: 100%;
        margin-top: 10px;
        text-align: right;
    }

    .dx-overlay-modal .edit-label {
        width: 100%;
        margin-bottom: 10px;
        font-size: 16px;
        color: #828282;
        font-weight: bold;
        border-bottom: 1px solid #828282;
    }

    .content h4 {
        margin-bottom: 10px;
        font-weight: 500;
        font-size: 18px;
    }

    .content {
        margin-top: 50px;
        margin-left: 10px;
    }

    .selected-item {
        margin-bottom: 20px;
    }

    #selected-files {
        display: none;
    }

    #fileuploader-container {
        border: 1px solid #d3d3d3;
        margin: 20px 20px 0 20px;
    }

    .diasClass {
        text-align: left !important;
        border-right-width: 0px !important;
        border-left-width: 0px !important;
        border-top-width: 0px !important;
    }

    .dx-command-edit {
        border-left-width: 0px !important;
    }

    .dx-command-edit-with-icons {
        padding-top: 15px !important;
    }

    .dx-item .dx-tab {
        width: 200px !important;
    }


    .dx-toolbar-items-container {
        height: 50px !important;
    }

    .dx-popup-content {
        padding-top: 0px !important;
    }

    #stateImgId > div > img {
        height: 30px !important;
        width: 30px !important;
    }

    .dpbColor {
        background-color: #337ab7;
        border-radius: 4px;
    }

    .dx-toolbar-label {
        position: relative;
        left: 30px;
    }

    #dpbId > span {
        color: white !important;
    }

    #priorityOne {
        background-color: red;
    }

    #priorityTwo {
        background-color: yellow;
    }

    .warning {
        background-color: yellow !important;
        /*color: orange !important;*/
    }

        .warning.dx-state-hover {
            background-color: #e4e50a !important;
            /*color: black !important;*/
        }

        .warning.dx-state-active {
            background-color: #e4e50a !important;
            /*color: black !important;*/
        }

    /*#noteButton {
                        margin-left: 730px !important;
                    }*/

    #ticketSearch {
        width: 100% !important;
    }


    #btn_refresh {
        position: relative;
        top: 45px;
        z-index: 1;
        left: 888px;
    }

    .card-body {
        padding-top: 0px;
        padding-bottom: 20px;
    }

    .dx-datagrid-text-content {
        color: black;
        font-weight: 700;
    }

    .classTable {
        margin-top: 20px;
    }

    #attachmentButton {
        float: right;
        margin-top: 5px;
        margin-right: 20px;
    }

    #attachmentButtonDiv {
        margin-bottom: 50px;
    }

    #noteButton {
        float: right;
        margin-top: 5px;
        margin-right: 20px;
    }

    #noteButtonDiv {
        margin-bottom: 50px;
    }

    .fas fa-ellipsis-v {
        color: white;
    }

    .dx-button-mode-outlined .dx-icon {
        color: white;
    }

    .dx-button-mode-outlined {
        background-color: transparent;
        border-color: #ddd;
        color: white;
    }

    .dx-datagrid-export-button {
        background-color: #337ab7;
    }

    .dx-icon-export-to {
        color: white !important;
    }

    .dx-icon-export-excel-button {
        color: white !important;
    }


    .dx-datagrid-export-button.dx-state-hover {
        background-color: #285f8f !important;
        /*color: black !important;*/
    }

    .dx-datagrid-export-button.dx-state-active {
        background-color: #285f8f !important;
        /*color: black !important;*/
    }


    .dx-datagrid-column-chooser-button {
        background-color: #337ab7;
    }

    .dx-icon-column-chooser {
        color: white !important;
    }

    .dx-datagrid-column-chooser-button.dx-state-hover {
        background-color: #285f8f !important;
        /*color: black !important;*/
    }

    .dx-datagrid-column-chooser-button.dx-state-active {
        background-color: #285f8f !important;
        /*color: black !important;*/
    }

    .swal2-container {
        z-index: 10001 !important;
    }

    #addMahalButton {
        padding-top: 5px !important;
    }

    #dropDownReasonSingle {
        width: 402px;
    }

    .dx-master-detail-cell {
        padding-top: 0px !important;
    }

    .dx-icon-remove {
        position: relative;
        bottom: 5px;
    }

    .dx-icon-add {
        position: relative;
        bottom: 5px;
    }

    .disabled {
        pointer-events: none;
    }

    .dx-info {
        display: none !important;
    }

    h7 {
        font-weight: bold;
    }

    .dx-datagrid-rowsview .dx-row > .dx-master-detail-cell {
        padding: 0px;
    }
</style>

