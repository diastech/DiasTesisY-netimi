@page
@using DiasShared.Data.EF_Data.DiasFacilityManagement.SqlServer.DataTransferObjects.Development.Shared.Custom
@model DIAS.UI.Pages.Ticket.CustomFastTicketRedirectDto
@using static DiasShared.Enums.Standart.TicketEnums
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@functions{
    public string GetAntiXsrfRequestToken()
    {
        return Xsrf.GetAndStoreTokens(Model.HttpContext).RequestToken;
    }
}
@{
}
<script src="~/js/pages/ticket/fastTicketsRedirect.js"></script>
<script src="~/js/pages/shared/reason.js"></script>
<script src="~/js/pages/shared/location.js"></script>


<div id="accordion">
    <div class="card">
        <div class="card-header" id="headingOne">
            <h5 class="mb-0">
                <button class="btn btn-link" data-toggle="collapse" data-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                    <i style="margin-right:5px" class="fa fa-filter" aria-hidden="true"></i>Filtre
                </button>
            </h5>
        </div>

        <div id="collapseOne" class="collapse show" aria-labelledby="headingOne" data-parent="#accordion">
            <div class="card-body">
                @(Html.DevExtreme().Form().ID("#frmTicket").ColCount(3).ShowColonAfterLabel(false).Items(items =>
            {
            items.AddSimple().ColSpan(2).Label(l => l.Text("Vaka"))
                .Template(new TemplateName("ddPTFilterTicketReasonTemplate"));

                items.AddSimple().ColSpan(2).Label(l => l.Text("Ticket Durumu"))
                .Template(new TemplateName("selectBoxFilterTicketStateTemplate"));

                items.AddSimple().ColSpan(2).Label(l => l.Text("Mahal"))
                .Template(new TemplateName("dropDownFilterLocationTemplate"));

                items.AddSimple().ColSpan(2).Label(l => l.Text("Öncelik"))
                .Template(new TemplateName("selectBoxFilterPriorityTemplate"));

                items.AddSimple().ColSpan(2).Label(l => l.Text("Sorumlu Kişi"))
                .Template(new TemplateName("selectBoxFilterTicketUserTemplate"));

                items.AddSimple().Label(l => l.Text("Açıklama")).Editor(e => e.TextBox().ID("textDescription").ShowClearButton(true));
                items.AddButton()
                    .ButtonOptions(a => a.Text("Ara")
                    .Height(40)
                    .Width(180)
                    .ID("ticketSearch")
                    .Icon("fas fa-search")
                    .Type(ButtonType.Default)
                    //.OnClick("Tickets.btn_ticketFindClick")
                    .UseSubmitBehavior(true)
                    .Template(@<text>
                                <div id="widget"></div>
	                            <i class="dx-icon fas fa-search"></i>
                                <span class="dx-button-text"><%- text %></span>
                            </text>)
                            .Hint("Kayıtları Filtrele"))
                        .HorizontalAlignment(HorizontalAlignment.Right);
                }))
            </div>
        </div>
    </div>
    <div class="card">
        <div class="card-header" id="headingTwo">
            <h5 class="mb-0">
                <button class="btn btn-link" data-toggle="collapse" data-target="#collapseTwo" aria-expanded="true" aria-controls="collapseTwo">
                    <i style="margin-right:5px" class="fa fa-fighter-jet" aria-hidden="true"></i>Hızlı İş Emri Listesi
                </button>
            </h5>
        </div>

        <div id="collapseTwo" class="collapse show" aria-labelledby="headingTwo" data-parent="#accordion">
            <div class="card-body">
                @(Html.DevExtreme().DataGrid<CustomBasicTicketDto>()
                    .ID("gridFastTicket")
                    .ShowBorders(true)
                    .DataSource(ds=>ds.RemoteController()
                        .Key("Id")
                        .OnBeforeSend("beforeSend")
                        .LoadUrl(Url.Page(null, "GridData"))
                    //.InsertUrl(Url.Page(null, "GridRow"))
                    )
                    .ColumnChooser(c => c.Enabled(true).AllowSearch(true).Mode(GridColumnChooserMode.Select))
                    .OnSelectionChanged("onSelectionChanged")
                    .RemoteOperations(true)
                    .Paging(p => p.PageSize(15))
                    .Selection(s => s.Mode(SelectionMode.Single))
                    .Columns(c => {
                        c.AddFor(x => x.AddedByUserId)
                            .AllowEditing(true)
                            .Caption("Ekleyen Kullanıcı");
                        c.AddFor(x => x.MobilePhoneNumber)
                            .Format("(###) ###-####")
                            .AllowEditing(true)
                            .Caption("Telefon Numarası");
                        c.AddFor(x => x.AddedTime)
                            .DataType(GridColumnDataType.Date)
                            .Format("dd/MM/yyyy HH:mm:ss")
                            .Alignment(HorizontalAlignment.Center)
                            .Caption("Tarih");
                        c.AddFor(x => x.TicketDescription)
                            .AllowEditing(true)
                            .Caption("Açıklama");

                        c.AddFor(x => x.BasicTicketState.Name)
                        .Caption("Durum").AllowEditing(true);

                        c.Add().Caption("Yönlendirilmiş İş Emirleri")
                            .DataField("ticketAttachments")
                            .Alignment(HorizontalAlignment.Left)
                            .CellTemplate(new JS("fastTicketGridCellTemplateGridTicket"));

                        c.Add()
                        .Caption("İşlemler")
                        .Width(65)
                        .Type(GridCommandColumnType.Buttons)
                        .Alignment(HorizontalAlignment.Right)
                        .Buttons(btns =>
                        {
                            btns.Add()
                                .Name("grd_btnFastTicketDetails")
                                .Icon("fas fa-share")
                                .OnClick("openPopup")
                                .Name("Yönlendir");
                        });




                    })
                 )
            </div>
        </div>
    </div>
    <div class="card">
        <div class="card-header" id="headingThree">
            <h5 class="mb-0">
                <button class="btn btn-link" data-toggle="collapse" data-target="#collapseThree" aria-expanded="true" aria-controls="collapseThree">
                    <i style="margin-right:5px" class="fa fa-chevron-circle-down" aria-hidden="true"></i>Yönlendirilen İş Emirleri
                </button>
            </h5>
        </div>

        <div id="collapseThree" class="collapse show" aria-labelledby="headingThree" data-parent="#accordion">
            <div class="card-body">
                @(Html.DevExtreme().DataGrid<CustomTicketDto>()
                    .ID("gridFastTicket2")
                    .ShowBorders(true)
                    .DataSource(ds=>ds.RemoteController()
                        .Key("Id")
                        //.OnBeforeSend("beforeSend")
                        .LoadUrl(Url.Page(null, "GridDataByBasicTicket"))
                        .LoadParams(new { basicTicketId = new JS("15") })
                    //.InsertUrl(Url.Page(null, "GridRow"))
                    )
                    .ColumnChooser(c => c.Enabled(true).AllowSearch(true).Mode(GridColumnChooserMode.Select))
                    .RemoteOperations(true)
                    .Paging(p => p.PageSize(15))
                    .Selection(s => s.Mode(SelectionMode.Single))
                    .Columns(c => {
                        c.AddFor(x => x.TicketReason.ReasonName)
                            .AllowEditing(true)
                            .Caption("Vaka");
                        c.AddFor(x => x.TicketStatus.Name)
                            .Caption("İş Emri Durumu");
                        c.AddFor(x => x.TicketRelatedLocations)
                            .Caption("Lokasyon");
                        c.AddFor(x => x.TicketPriorityId)
                            .AllowEditing(true)
                            .Caption("Açıklama");

                        c.AddFor(x => x.TickedAssignedAssignmentGroup.GroupName).Caption("Sorumlu Grup")
                            .AllowEditing(true);
                        c.AddFor(x => x.TicketAssignedUser.UserName).Caption("Sorumlu Kişi")
                            .AllowEditing(true);
                        c.AddFor(x => x.TicketOpenedTime).Caption("Açılma Zamanı")
                            .AllowEditing(true);

                    })
                 )
            </div>
        </div>
    </div>
</div>


@using (Html.DevExtreme().NamedTemplate("selectBoxFilterTicketStateTemplate"))
{
    @(Html.DevExtreme()
    .SelectBox()
    .ID("sbTicketState")
    .DataSource(d => d.RemoteController()
    .Key("Id")
    .LoadUrl(Url.Page(null, "TicketStateData"))
    )
    .DeferRendering(false)
    .ValueExpr("Id")
    .DisplayExpr("StateDescription")
    .ShowClearButton(true)
    .DeferRendering(false)
)

}

@using (Html.DevExtreme().NamedTemplate("dropDownFilterLocationTemplate"))
{
    @(Html.DevExtreme()
    .DropDownBox()
    .ID("dropDownLocationFilter")
    .DataSource(d => d.RemoteController()
    .Key("id")
    .LoadUrl(Url.Page(null, "LocationData"))
    )
    .DeferRendering(false)
    .ValueExpr("HierarchyId")
    .DisplayExpr("LocationName")
    .DropDownOptions(o => o.Height(350))
    .Placeholder("Lütfen Seçiniz..")
    .ShowClearButton(true)
    .OnValueChanged("treeBox_valueChangedLocation")
    .ContentTemplate(
        @<text>
            @await Html.PartialAsync("_LocationTreeViewMultiple")
        </text>
    )
)

}

@using (Html.DevExtreme().NamedTemplate("selectBoxFilterPriorityTemplate"))
{
    @(Html.DevExtreme()
    .SelectBox()
    .ID("sbPriority")
    .DataSource(d => d.RemoteController()
    .Key("Id")
    .LoadUrl(Url.Page(null, "TicketPriorityData"))
    )
    //.DataSource(Html.GetEnumSelectList<PriorityEnum>().Select(i => new { Value = int.Parse(i.Value), Text = i.Text }))
    .ValueExpr("Id")
    .DisplayExpr("Name")
    .ShowClearButton(true)
)
}

@using (Html.DevExtreme().NamedTemplate("selectBoxFilterTicketUserTemplate"))
{
    @(Html.DevExtreme()
    .SelectBox()
    .ID("sbTicketUser")
    .DataSource(d => d.RemoteController()
    .Key("Id")
    .LoadUrl(Url.Page(null, "UserData"))
    )

    .DeferRendering(false)
    .ValueExpr("Id")
    .DisplayExpr(new JS("Shared.sbTicketUserDiplayExpr"))
    .ShowClearButton(true)
    .SearchEnabled(true)
    .SearchExpr("FirstName", "LastName", "UserName", "Email")
)
}

@(Html.DevExtreme().Popup()
    .ID("popupContainer")
    .Visible(false)
    .MinWidth(200)
    .MaxWidth(800)
    .MinHeight(200)
    .MaxHeight(700)
    .ShowTitle(false)
    .ShowCloseButton(false)
)

@using (Html.DevExtreme().NamedTemplate("ticketPopupTemplate"))
{
    @(Html.DevExtreme().ScrollView().Width("100%").Height("100%")
        .Content(@<text>
<div style="display: flex;">
    <div class="col-md-6">
        <label>Bilgiler</label>
        <div style="margin-bottom:10px;">
            @(Html.DevExtreme().SelectBox()
    .ID("sbFTREmployee")
    .DataSource(d => d.RemoteController()
    .Key("Id")
    .LoadUrl(Url.Page(null, "UserData")))
    .DeferRendering(false)
    .ValueExpr("Id")
    .DisplayExpr(new JS("Shared.sbTicketUserDiplayExpr"))
    .ShowClearButton(true)
    .SearchEnabled(true)
    .Placeholder("Bildiren kişi seçiniz.")
    .SearchExpr("FirstName", "LastName", "UserName", "Email"))
        </div>
        <div style="margin-bottom:10px;">
            @(Html.DevExtreme().TextBox().ID("txtPhone")
    .Mask("+1 (X00) 000-0000")
    .MaskRules(new { X = new JS("/[02-9]/") }))
        </div>
        <div style="margin-bottom:10px;">
            @(Html.DevExtreme().TextArea().ID("fastTicketRedirectDescription")
    .Placeholder("Açıklama giriniz...")
    .Height(150))
        </div>
    </div>
    <div class="col-md-6">
        <label>Ekler</label>
        <div>
        @(Html.DevExtreme().List().ID("listAttachments")
            .KeyExpr("Id")
            .ShowSelectionControls(true)
            .SelectionMode(ListSelectionMode.Multiple)
            .ItemTemplate(new JS("fastTicketAttachmentsTemplate"))
            .OnSelectionChanged("listOnSelectionChanged")
        )
        </div>

    </div>

</div>

<hr />

<div style="display: flex;">
    <div class="col-md-6">
        <label>İş Emri Oluştur</label>
        <div style="margin-bottom:10px;">
            @(Html.DevExtreme().DropDownBox()
            .ID("dropDownReasonSingle")
            .DataSource(d => d.RemoteController()
            .Key("HierarchyId")
            .LoadUrl(Url.Page(null, "TicketReasonData")))
            .DeferRendering(false)
            .ValueExpr("HierarchyId")
            .DisplayExpr("CategoryName")
            .DropDownOptions(o => o.Height(350))
            .Placeholder("Vaka seçiniz..")
            .ShowClearButton(true)
            .OnValueChanged("treeBox_valueChanged")
            .ContentTemplate(new TemplateName("reasonTreeViewSingleTemplate")))
        </div>
        <div style="margin-bottom:10px;">
            @(Html.DevExtreme().DropDownBox()
            .ID("dropDownLocation")
            .DataSource(d => d.RemoteController()
            .Key("HierarchyId")
            .LoadUrl(Url.Page(null, "LocationData"))
            .LoadMode(DataSourceLoadMode.Raw))
            .DeferRendering(false)
            .ValueExpr("HierarchyId")
            .DisplayExpr("LocationName")
            .DropDownOptions(o => o.Height(350))
            .Placeholder("Lokasyon Seçiniz..")
            .ShowClearButton(true)
            .OnValueChanged("treeBox_valueChangedLocation")
            .ContentTemplate(new TemplateName("locationTreeViewMultipleTemplate")))
        </div>

        <div style="margin-bottom:10px;">
            @(Html.DevExtreme().SelectBox()
            .ID("sbTicketPriority")
            .DataSource(d => d.RemoteController()
            .Key("Id")
            .LoadUrl(Url.Page(null, "TicketPriorityData"))
            )
            .DisplayExpr("Name")
            .OnValueChanged("OnValueChangedPriority")
            .Placeholder("Öncelik seçiniz.")
            .ValueExpr("Id"))
        </div>
    <div style="margin-bottom:10px;">
        @(Html.DevExtreme().SelectBox()
            .ID("ticketUserId")
            .DataSource(d => d.RemoteController()
            .Key("Id")
            .LoadUrl(Url.Page(null, "UserData")))
            .DeferRendering(false)
            .ValueExpr("Id")
            .DisplayExpr(new JS("Shared.sbTicketUserDiplayExpr"))
            .ShowClearButton(true)
            .SearchEnabled(true)
            .OnValueChanged("OnValueChangedTicketUserId")
            .Placeholder("Bildiren kişi seçiniz.")
            .SearchExpr("FirstName", "LastName", "UserName", "Email"))
    </div>
    <div style="margin-bottom:10px;">
        @(Html.DevExtreme().SelectBox()
            .ID("sbAsgGroup")
            .DataSource(d => d.RemoteController().CacheRawData(false)
            .Key("id")
            .LoadUrl(Url.Page(null, "TicketAssignmentGroupData"))
            .LoadMode(DataSourceLoadMode.Raw))
            .DeferRendering(false)
            .ValueExpr("Id")
            .DisplayExpr(new JS("Shared.sbTicketUserDiplayExpr"))
            .ShowClearButton(true)
            .SearchEnabled(true)
            
            .Placeholder("Atama Grubu Seçiniz..")
            .SearchExpr("FirstName", "LastName", "UserName", "Email"))
    </div>
    <div style="margin-bottom:10px;">
        @(Html.DevExtreme().SelectBox()
            .ID("sbAsgGroupEmp")
            .DataSource(d => d.RemoteController()
            .Key("Id")
            .LoadUrl(Url.Page(null, "UserData")))
            .DeferRendering(false)
            .ValueExpr("Id")
            .DisplayExpr(new JS("Shared.sbTicketUserDiplayExpr"))
            .ShowClearButton(true)
            .SearchEnabled(true)
            .OnValueChanged("OnValueChangedAsgGroupEmp")
            .Placeholder("Sorumlu kişi seçiniz.")
            .SearchExpr("FirstName", "LastName", "UserName", "Email"))
    </div>
    <div style="margin-bottom:10px;">
        @(Html.DevExtreme().DateBox().ID("dateFastTicketDate")
            .ShowClearButton(true)
            .Type(DateBoxType.DateTime)
            .OnValueChanged("OnValueChangedTicketData")
            .DisplayFormat("dd/MM/yyyy HH:mm:ss")
            .Placeholder("Tarih seçiniz."))
    </div>
    <div>
        @(Html.DevExtreme().TextArea()
        .ID("textAreaDescription")
        .OnValueChanged("OnValueChangedDescription")
     .Placeholder("Açıklama giriniz...").Height(150))
    </div>
    </div>
    </div>
</text>))



}

@using (Html.DevExtreme().NamedTemplate("ddPTFilterTicketReasonTemplate"))
{
    @(Html.DevExtreme()
    .DropDownBox()
    .ID("dropDownReasonFilterSingle")
    .DataSource(d => d.RemoteController()
    .Key("id")
    .LoadUrl(Url.Page(null, "TicketReasonData")))
    .DeferRendering(false)
    .ValueExpr("HierarchyId")
    .DisplayExpr("CategoryName")
    .DropDownOptions(o => o.Height(350))
    .Placeholder("Vaka seçiniz..")
    .ShowClearButton(true)
    .OnValueChanged("treeBox_valueChanged")
    .ContentTemplate(
        @<text>
            @await Html.PartialAsync("_ReasonTreeViewSingle")
        </text>
    )
)
}

@using (Html.DevExtreme().NamedTemplate("reasonTreeViewSingleTemplate"))
{
    @(Html.DevExtreme().TreeView()
    .ID("reasonTreeViewSingle2")
    .DataSource(new JS(@"component.getDataSource()"))
    .KeyExpr("HierarchyId")
    .DisplayExpr("CategoryName")
    .ParentIdExpr("ParentHierarchy")
    .ExpandNodesRecursive(true)
    .DataStructure(TreeViewDataStructure.Plain)
    .SelectionMode(NavSelectionMode.Single)
    .SelectNodesRecursive(false)
    .SelectByClick(true)
    .SearchEnabled(true)
    .Height(300)
    .OnItemClick(
        @<text>
            function(args) {
                component.close();
            }
        </text>
    )
    .OnItemSelectionChanged(
        @<text>
            function(args) {
                component.option("value", args.component.getSelectedNodeKeys());
            }
        </text>
    )
    .OnContentReady(
        @<text>
            function(args) {
                Reason.syncTreeViewSelection(args.component, component.option("value"));
            }
        </text>
    )
)
}

@using (Html.DevExtreme().NamedTemplate("locationTreeViewMultipleTemplate"))
{
    @(Html.DevExtreme().TreeView()
    .ID("locationTreeViewMultiple2")
    .DataSource(new JS(@"component.getDataSource()"))
    .KeyExpr("HierarchyId")
    .DisplayExpr("LocationName")
    .ParentIdExpr("ParentHierarchy")
    .DataStructure(TreeViewDataStructure.Plain)
    .SelectionMode(NavSelectionMode.Multiple)
    .ShowCheckBoxesMode(TreeViewCheckBoxMode.Normal)
    .SelectNodesRecursive(false)
    .SelectByClick(true)
    .Height(300)
    .SearchEnabled(true)
    .SearchEditorOptions(o => o.Placeholder("Mahal Ara"))
    .SearchTimeout(500)
    .OnItemClick(
        @<text>
            function(args) {
                component.close();
            }
        </text>
    )
    .OnItemSelectionChanged(
        @<text>
            function(args) {
                component.option("value", args.component.getSelectedNodeKeys());
            }
        </text>)
    .OnContentReady(
        @<text>
            function(args) {
                Location.syncTreeViewSelection(args.component, component.option("value"));
            }
        </text>)
)
}


<script type="text/javascript">

    let dataRow;
    let selectedAttachments;

    function beforeSend(type, e) {
        if (type == "load") return;
    }


    function onSelectionChanged(data) {

        let rowData = data.selectedRowsData[0];
        if (!rowData)
            return;
        dataRow = rowData;


    }

    function postFastTicketRedirect() {
        
         var ajaxHeader = {};        

        var openedTime = $("#dateFastTicketDate").dxDateBox("instance").option("value");
        //var openedTimeConverted = (new Date(openedTime)).toUTCString(3);
        
        var TicketReasonId = $("#dropDownReasonSingle").dxDropDownBox("instance").option("value");
        var TicketRelatedLocations = $("#dropDownLocation").dxDropDownBox("instance").option("value");
        var ticketUserId = $("#ticketUserId").dxSelectBox("instance").option("value");
        var TickedAssignedAssignmentGroupId = $("#sbAsgGroup").dxSelectBox("instance").option("value");
        var TicketAssignedUserId = $("#sbAsgGroupEmp").dxSelectBox("instance").option("value");
        var TicketDescription = $("#textAreaDescription").dxTextArea("instance").option("value");
        var TicketPriority = $("#sbTicketPriority").dxSelectBox("instance").option("value");
        var listAttachments = $("#listAttachments").dxList("instance").option("value");

        if (TicketReasonId == null) {                        
            $("#dropDownReasonSingle").dxDropDownBox("instance").option("isValid", false);
        }
        if (TicketRelatedLocations == null) {
            $("#dropDownLocation").dxDropDownBox("instance").option("isValid", false);
        }
        if (TicketAssignedUserId == null) {
            $("#sbAsgGroupEmp").dxSelectBox("instance").option("isValid", false);
        }

        if (ticketUserId == null) {
            $("#ticketUserId").dxSelectBox("instance").option("isValid", false);            
        }
        if (TicketDescription == "") {
            $("#textAreaDescription").dxTextArea("instance").option("isValid", false);
        }
        if (TicketPriority == null) {
            $("#sbTicketPriority").dxSelectBox("instance").option("isValid", false);
        }
        if (openedTime == null) {
            $("#dateFastTicketDate").dxDateBox("instance").option("isValid",false)
        }
        
        if (selectedAttachments == null) {
            alert("lütfen Dosya seçiniz");
        }

        if (TicketReasonId == null || TicketRelatedLocations == null || TicketAssignedUserId == null || ticketUserId == null || TicketDescription == "" || TicketPriority == null || openedTime == null || selectedAttachments == null) {
            selectedAttachments = null;
            return;
        }


        let formData = {};
        formData.TicketAssignedUserId = TicketAssignedUserId;
        formData.TickedAssignedAssignmentGroupId = 7;
        formData.TicketPriority = TicketPriority;
        formData.TicketReasonHierarchyId = TicketReasonId[0];
        formData.TicketRelatedLocationHierarchyId = TicketRelatedLocations;
        formData.TicketOwnerUserId = 1;
        formData.TicketOpenedTime = openedTime;
        formData.AttachmentId = selectedAttachments;
        formData.TicketDescription = TicketDescription;
        formData.AddedByUserId = 1;
        formData.BasicTicketId = dataRow.Id;

        var url = `http://localhost:33400/TicketWrapper/InsertWithFastTicket`;

        $.ajax({
            type: "POST",
            url: url,
            headers:
            {
                "RequestVerificationToken": $('input:hidden[name="__RequestVerificationToken"]').val()
            },
            data: JSON.stringify(formData),
            contentType: "application/json; charset=utf-8",
            async: true,
            dataType: "json",
            success: function (response) {
                $("#popupContainer").dxPopup("hide");
                $("#gridFastTicket").dxDataGrid("instance").refresh();
            },
            failure: function (response) {
                alert(response);
            }
        });
    }

    function openPopup(e) {
        var gridFastTicketRedirect = $("#gridFastTicket").dxDataGrid("instance");
        gridFastTicketRedirect.selectRowsByIndexes([e.row.rowIndex]);
        $("#popupContainer").dxPopup("show");
        $("#listAttachments").dxList("instance").option("dataSource", dataRow.Attachments);

    }

    $(function () {
        $("#popupContainer").dxPopup({
            title: "Popup Title",
            contentTemplate: ticketPopupTemplate,
            toolbarItems: [{
                text: "Hızlı İş Emri Yönlendir",

                location: "before"
            }, {
                widget: "dxButton",
                toolbar: 'bottom',
                location: "after",
                options: {
                    text: "Kapat",
                    onClick: function (e) { $("#popupContainer").dxPopup("hide"); }
                }
                },
                {
                    widget: "dxButton",
                    toolbar: 'bottom',
                    location: "after",
                    options: {
                        type: 'success',
                        text: "Kaydet",
                        onClick: function (e) {
                            postFastTicketRedirect();
                        }
                    }
                }

            ]

        });


    });

    function fastTicketGridCellTemplateGridTicket(container, options) {
        if (!options.data.Tickets)
            return;
        let result;
        options.data.Tickets.forEach((index, array) =>
        {
            result = $("<div>");
            $('<text/>').addClass('dx-text')
                .text(index.Id)
                .appendTo(result);
            
        })
        return result;
    }
    function fastTicketAttachmentsTemplate(data, index) {

        if (!data.FolderName)
            return;

        var folderName = data.FolderName;
        var result = $("<div>");
        $('<a/>').addClass('dx-link')
            .text(data.FolderName)
            .on('dxclick', function () {
                var url = `FastTicketRedirect?handler=File&fileName=${folderName}`;
                $.ajax({
                    type: 'GET',
                    url: url,
                    data: { "fileName": folderName },
                    beforeSend: function (xhr) {

                    },
                    success: function (data) {
                        window.location = url;
                    }
                });
            })
            .appendTo(result);
        return result;
    }
    function fastTicketGridCellTemplate(data,index) {

    }

    function listOnSelectionChanged(e) {
        selectedAttachments = e.component.option("selectedItemKeys").join(";");
    }

    function syncTreeViewSelection(treeView, value) {
        if (!value) {
            treeView.unselectAll();
        } else {
            treeView.selectItem(value);
        }
    }

    function treeBoxMulti_valueChanged(e) {
        if (e.component.content() == null)
            return;
        var $treeView = e.component.content().find(".dx-treeview");
        if ($treeView.length) {
            syncTreeViewSelection($treeView.dxTreeView("instance"), e.value);
        }
    }

    function treeBox_valueChanged(e) {
        if (e.component.content() == null)
            return;
        $("#dropDownReasonSingle").dxDropDownBox("instance").option("isValid", true);
        var $treeView = e.component.content().find(".dx-treeview");
        if ($treeView.length) {
            syncTreeViewSelection($treeView.dxTreeView("instance"), e.value);
        }
    }


    function syncTreeViewSelection(treeView, value) {
        if (!value) {
            treeView.unselectAll();
        } else {
            treeView.selectItem(value);
        }
    }

    function treeBox_valueChangedLocation(e) {
        if (e.component.content() == null)
            return;
        $("#dropDownLocation").dxDropDownBox("instance").option("isValid", true);
        var $treeView = e.component.content().find(".dx-treeview");
        if ($treeView.length) {
            syncTreeViewSelection($treeView.dxTreeView("instance"), e.value);
        }
    }

    function OnValueChangedPriority(e) {
        if (e.component.content() == null)
            return;
        $("#sbTicketPriority").dxSelectBox("instance").option("isValid", true);
    }

    function OnValueChangedDescription(e) {
        if (e.value != "") {
            $("#textAreaDescription").dxTextArea("instance").option("isValid", true);
        }
    }

    function OnValueChangedAsgGroupEmp(e) {
        if (e.component.content() == null)
            return;
        $("#sbAsgGroupEmp").dxSelectBox("instance").option("isValid", true);
    }
    function OnValueChangedTicketUserId(e) {
        if (e.component.content() == null)
            return;
        $("#ticketUserId").dxSelectBox("instance").option("isValid", true);
    }

    function OnValueChangedTicketData(e) {
        if (e.component.content() == null)
            return;
        $("#dateFastTicketDate").dxDateBox("instance").option("isValid", true)
    }
</script>

<style>

    .accordion {
        padding: 5px;
    }

    #accordion h1,
    #accordion p {
        margin: 0;
    }

    #accordion h1 {
        font-size: 20px;
    }
</style>