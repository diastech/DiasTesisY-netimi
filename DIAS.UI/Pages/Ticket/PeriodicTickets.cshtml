@page

@using static DiasShared.Enums.Standart.TicketEnums
@using DiasShared.Data.EF_Data.DiasFacilityManagement.SqlServer.DataTransferObjects.Development.Shared.Custom
@using DiasShared.Data.EF_Data.DiasFacilityManagement.SqlServer.DataTransferObjects.Development.Shared.Standard
@*@model DiasShared.Data.EF_Data.DiasFacilityManagement.SqlServer.DataTransferObjects.Development.Shared.Custom.CustomTicketDto*@
@model DIAS.UI.Pages.Ticket.CustomPeriodicTicketDto
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf

@{

    var locationsViewData = (List<CustomLocationDto>)ViewData["Locations"];
    var reasonsViewData = (List<CustomTicketReasonCategoryDto>)ViewData["Reasons"];
    var prioritiesViewData = (List<TicketPriorityDto>)ViewData["TicketPriorities"];
}

<script src="~/js/pages/shared/reason.js"></script>
<script src="~/js/pages/shared/location.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/polyfills.umd.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.14/jspdf.plugin.autotable.min.js"></script>
<script src="https://unpkg.com/jspdf@latest/dist/jspdf.umd.min.js"></script>
<script src="https://unpkg.com/jspdf@2.5.1/dist/jspdf.es.min.js"></script>
<script src="https://unpkg.com/jspdf-autotable@3.5.23/dist/jspdf.plugin.autotable.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/exceljs/3.8.0/exceljs.min.js" defer></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.5/FileSaver.min.js" defer></script>
<script src="~/helper/trCharHelper.js"></script>
<script>
    window.jsPDF = window.jspdf.jsPDF;
    applyPlugin(window.jsPDF);
</script>
<div class="card">
    <div class="card-header" role="tab" id="accord1">
        <h5 class="mb-0">
            <a data-toggle="collapse" href="#collapse-pane-1" role="button" aria-expanded="true" aria-controls="collapse-pane-1">
                <i style="margin-right:5px" class="fa fa-filter" aria-hidden="true"></i>Filtre
            </a>
        </h5>
    </div>

    <div id="collapse-pane-1" class="collapse " role="tabpanel" aria-labelledby="accord1">
        <div class="card-body">
            @(Html.DevExtreme().Form().ID("#frmTicket").ColCount(12).ShowColonAfterLabel(false).Items(items =>
            {
            items.AddSimple().ColSpan(4).Label(l => l.Text("Vaka"))
                .Template(@<text> @await Html.PartialAsync("../Shared/Periodic/_PeriodicFilterReasonTemplate", reasonsViewData)</text>);

        items.AddSimple().ColSpan(4).Label(l => l.Text("İş Emri Durumu"))
        .Template(@<text> @await Html.PartialAsync("../Shared/Periodic/_PeriodicFilterTicketStateTemplate")</text>);

                        items.AddSimple().ColSpan(4).Label(l => l.Text("Mahal"))

                .Template(@<text> @await Html.PartialAsync("../Shared/Periodic/_PeriodicFilterLocationTemplate", locationsViewData)</text>);

            items.AddSimple().ColSpan(4).Label(l => l.Text("Öncelik"))
                            .Editor(e => e.SelectBox()
                .ID("sbPeriodicTicketPriorityFilter")
                .DeferRendering(false)
                .DataSource(d => d.RemoteController()
                .Key("Id")
                .LoadUrl(Url.Page(null, "TicketPriorityData"))
                )
                .OnOpened("onOpenedPeriodicTicketPriorityFilter")
                .ValueExpr("Id")
                .DisplayExpr("Name")
                .ShowClearButton(true));
            }))
        </div>
    </div>
</div>
<div class="card">
    <div class="card-header" role="tab" id="accord2">
        <h5 class="mb-0">
            <a class="collapsed" data-toggle="collapse" href="#collapse-pane-2" role="button" aria-expanded="false" aria-controls="collapse-pane-2">
                <i style="margin-right:5px" class="fa fa-calendar" aria-hidden="true"></i>Periyodik İş Emirlerim
            </a>
        </h5>
    </div>
    <div id="collapse-pane-2" class="collapse show" role="tabpanel" aria-labelledby="accord2">
        <div class="card-body">
            @(Html.DevExtreme().DataGrid<CustomPeriodicTicketDto>()
            .ID("gridPeriodicTicket")
            .DataSource(ds => ds.RemoteController().OnBeforeSend("beforeSendPeriodicTicket")
            .Key("Id")
            .LoadUrl(Url.Page(null, "GridData"))
            .InsertUrl(Url.Page(null, "GridRow"))
        ).ErrorRowEnabled(false)
            .OnToolbarPreparing("onToolbarPreparingPeriodicTicket")
            .OnContentReady("onContentReadyGridPeriodicTicket")
            .OnCellPrepared("onCellPreparedPeriodicTicket")
            .OnExporting("periodicTicketGridDataExporting")
            .OnInitialized("onInitializedPeriodicTicket")
            .OnSelectionChanged("onSelectionChangedPeriodicTicket")
            .Selection(s => s.Mode(SelectionMode.Single))
            .Export(o => o.Enabled(true).AllowExportSelectedData(true))
            .RemoteOperations(true)
            .ShowBorders(true)

            .ColumnChooser(c => c.Enabled(true).AllowSearch(true).Mode(GridColumnChooserMode.Select))
             .FilterRow(f => f.Visible(true))
                .HeaderFilter(h => h.Visible(true))
                //.GroupPanel(p => p.Visible(true).EmptyPanelText(""))
                .Grouping(g => g.AutoExpandAll(false))

            .Paging(p => p.PageSize(10).Enabled(true))
                    .Pager(pager => pager.ShowNavigationButtons(true).Visible(true).ShowInfo(true).ShowPageSizeSelector(true).AllowedPageSizes(new JS("[10, 50, 100]")))

        .Editing(e => e.Mode(GridEditMode.Popup)
                .AllowUpdating(true)
                .AllowAdding(true)
                .UseIcons(true)
                .Popup(p => p
                    .Title("Planlı İş Emri")
                    .ID("popupPeriodicTicketContainer")
                    .ShowTitle(true)
                    .Width(1000)
                    .Height(600)
                    .OnShowing("setPopupTitlePeriodicTicket")
                    .ShowCloseButton(false)
                )
            .Form(f => f.Items(items =>
            {
                items.AddGroup()
                .Items(groupItems =>
                {
                groupItems.AddTabbed()
                    .TabPanelOptions(o =>
                    {
                        o.DeferRendering(false);
                        o.AnimationEnabled(true);
                        o.ID("periodicTicketTab");
                        o.Width(950);
                        o.AnimationEnabled(true);
                        o.ShowNavButtons(true);
                        o.Height("100%");
                    })

                    .Tabs(tabItems =>
                    {
                    tabItems.Add().Icon("fas fa-save").ColCount(2)
                                .Title("Planlı İş Emri Bilgileri")
                                .ColCount(2)
                                .Items(tabItem =>
                                {

                                tabItem.AddSimpleFor(m => m.PeriodicName).ColSpan(1)
                                    .Label(l => l.Text("Plan Adı").Visible(true)).Editor(e => e.TextBox().ID("textPeriodicName")
                                    .Placeholder("Plan Adı Giriniz..."))
                                    .ValidationRules(v =>
                                    {
                                        v.AddRequired().Message("Plan Adı Boş Geçilemez");
                                    });
                                tabItem.AddSimpleFor(m => m.TicketReasonId).ColSpan(1)
                                    .Label(l => l.Text("Vaka"))
                                    .Editor(e => e.DropDownBox()
                                    .ID("dropDownReasonSinglePeriodicTicket")
                                    //.DataSource(d => d.RemoteController()
                                    //.Key("HierarchyId")
                                    //.LoadUrl(Url.Page(null, "TicketReasonData")))
                                    .DataSource(reasonsViewData, "HierarchyId")
                                    .DeferRendering(false)
                                    .ValueExpr("HierarchyId")
                                    .DisplayExpr("CategoryName")
                                    .DropDownOptions(o => o.Height(350))
                                    .Placeholder("Vaka seçiniz..")
                                    .ShowClearButton(true)
                                    .OnValueChanged("reasonTreeBox_valueChangedPeriodicTicket")
                                    .ContentTemplate(@<text>@await Html.PartialAsync("../Shared/Periodic/_PeriodicTicketReasonTreeViewSingle")</text>))
                                .ValidationRules(v =>
                                {
                                    v.AddRequired().Message("Vaka Boş Geçilemez");
                                });

                                tabItem.AddButton().ColSpan(1).ButtonOptions(bo => bo.Text("Mahal Ekle").Icon("box").Width("54%").Height("32px").OnClick("onclickPeriodicTicketMahalPopup").ID("addMahalButtonPeriodicTicket").Template(@<text>
            <div>Mahal Ekle<span class='badge badge-info'></span></div>
            </text>));

                                    tabItem.AddSimpleFor(m => m.TicketPriorityId).ColSpan(1)
                                    .Label(l => l.Text("Öncelik").Visible(true)).Editor(e => e.SelectBox().ID("sbTicketPriority")
                                    .DataSource(d => d.RemoteController()
                                    .Key("Id")
                                    .LoadUrl(Url.Page(null, "TicketPriorityData"))
                                    )
                                    .DisplayExpr("Name")
                                    .Placeholder("Öncelik seçiniz.")
                                    .ValueExpr("Id"))
                                    .ValidationRules(v =>
                                    {
                                        v.AddRequired().Message("Öncelik Boş Geçilemez");
                                    });

                                    tabItem.AddSimpleFor(m => m.StartDateTime).ColSpan(2)
                                    .Label(l => l.Text("Başlangıç Tarihi").Visible(true)).Editor(e => e.DateBox().ID("dateStartPT")
                                    .ShowClearButton(true)
                                    .Type(DateBoxType.DateTime)
                                    .DisplayFormat("dd/MM/yyyy HH:mm:ss")
                                    .Placeholder("Başlangıç Tarih seçiniz."))
                                    .ValidationRules(v =>
                                    {
                                        v.AddRequired().Message("Başlangıc Tarihi boş geçilemez.");
                                    });

                                    tabItem.AddSimpleFor(m => m.EndDateTime).ColSpan(2)
                                    .Label(l => l.Text("Bitiş Tarihi").Visible(true))
                                    .Editor(e => e.DateBox().ID("dateEndPT")
                                    .ShowClearButton(true)
                                    .Type(DateBoxType.DateTime)
                                    .DisplayFormat("dd/MM/yyyy HH:mm:ss")
                                    .Placeholder("Bitiş Tarih seçiniz."))
                                    .ValidationRules(v =>
                                    {
                                        v.AddRequired().Message("Bitiş Tarihi boş geçilemez.");
                                    });

                                    tabItem.AddSimpleFor(m => m.FirstCareTime).ColSpan(2)
                                    .Label(l => l.Text("İlk Bakım Tarihi").Visible(true))
                                    .Editor(e => e.DateBox().ID("firstCatePT")
                                    .ShowClearButton(true)
                                    .Type(DateBoxType.DateTime)
                                    .DisplayFormat("dd/MM/yyyy HH:mm:ss")
                                    .Placeholder("İlk Bakım Tarihi seçiniz."))
                                    .ValidationRules(v =>
                                    {
                                        v.AddRequired().Message("İlk Bakım Tarihi boş geçilemez.");
                                    });

                                    tabItem.AddSimpleFor(m => m.TicketAssignedUser.Id).ColSpan(1)
                                    .Label(l => l.Text("Periodic İş Emri Sahibi").Visible(true))
                                    .Editor(e => e.SelectBox()
                                    .ID("sbTicketUserId")
                                    .DataSource(d => d.RemoteController()
                                    .Key("Id")
                                    .LoadUrl(Url.Page(null, "UserData")))
                                    .DataSourceOptions(o => o.Paginate(true).PageSize(20))
                                    .DeferRendering(false)
                                    .ValueExpr("Id")
                                    .DisplayExpr(new JS("Shared.sbTicketUserDiplayExpr"))
                                    .ShowClearButton(true)
                                    .SearchEnabled(true)
                                    .Placeholder("Bildiren kişi seçiniz.")
                                    .SearchExpr("FirstName", "LastName", "UserName", "Email"))
                                    .ValidationRules(v =>
                                    {
                                        v.AddRequired().Message("Bildiren Kişi Boş Geçilemez");
                                    });

                                    tabItem.AddSimpleFor(m => m.TickedAssignedAssignmentGroupId).ColSpan(1)
                                    .Label(l => l.Text("Sorumlu Grup/Kişi").Visible(true))
                                    .Editor(e => e.SelectBox()
                                    .ID("sbAsgGroup")
                                    //.OnValueChanged("OnValueChangedAsgGroup")
                                    .DataSource(d => d.RemoteController()
                                    .Key("Id")
                                    .LoadUrl(Url.Page(null, "TicketAssignmentGroupDataGetAll")))
                                    .DeferRendering(true)
                                    .ValueExpr("Id")
                                    .DisplayExpr("GroupName")
                                    .ShowClearButton(true)
                                    .SearchEnabled(true)
                                    .Placeholder("Sorumlu grup seçiniz."));

                                    tabItem.AddSimpleFor(m => m.Option).ColSpan(1)
                                    .Label(l => l.Text("Seçenekler").Visible(true)).Editor(e => e.SelectBox().ID("sbPTOption")
                                    .DataSource(Html.GetEnumSelectList<TicketPeriodEnum>().Select(i => new { Value = int.Parse(i.Value), Text = i.Text }))
                                    .DisplayExpr("Text")
                                    .Placeholder("Zamanlama seçeneği seçiniz")
                                    .ValueExpr("Value").OnValueChanged("onValueChangedOption"))
                                    .ValidationRules(v =>
                                    {
                                        v.AddRequired().Message("Opsiyon Boş Geçilemez");
                                    });
                                    tabItem.AddSimpleFor(m => m.isTime).ColSpan(2)
                                    .Label(l => l.Visible(true).Text("Saatlik Mi")).Editor(e => e.CheckBox().ID("chPTisTime").Text("Saatlik mi").Value(false)
                                    .OnValueChanged("onValueChangedIsTime"));

                                    tabItem.AddSimpleFor(m => m.DayStartedTime).ColSpan(1)
                                    .Label(l => l.Text("Başlama Tarihi").Visible(true)).Editor(e => e.DateBox().ID("dateDayStartedTime")
                                    .ShowClearButton(true)
                                    .Type(DateBoxType.Time)
                                    .DisplayFormat("HH:mm:ss")
                                    .Placeholder("Başlangıç Saat Seçiniz."));

                                    tabItem.AddSimpleFor(m => m.DayEndedTime).ColSpan(1)
                                    .Label(l => l.Text("Bitiş Tarihi").Visible(true)).Editor(e => e.DateBox().ID("dateDayEndedTime")
                                    .ShowClearButton(true)
                                    .Type(DateBoxType.Time)
                                    .DisplayFormat("HH:mm:ss")
                                    .Placeholder("Bitiş Saat Seçiniz."));

                                    tabItem.AddSimpleFor(m => m.Description).ColSpan(2)
                                    .Label(l => l.Text("Açıklama").Visible(true)).Editor(e => e.TextArea().ID("textAreaDescription")
                                    .Placeholder("Açıklama giriniz...").Height(150))
                                    .ValidationRules(v =>
                                    {
                                        v.AddRequired().Message("Bildiren Kişi Boş Geçilemez");
                                    });

                                    tabItem.AddSimpleFor(m => m.ActiveStatus).Label(l => l.Text("Aktif")).ColSpan(1).Editor(ed => ed.CheckBox().ID("periodicTicketActiveStatus"));
                                });
                    });
                });
            }).ID("ticketForm"))
            )
            .Columns(columns =>
            {
                //columns.AddFor(y => y.TicketPriorityId).Caption("Öncelik").AllowEditing(true).Visible(true)
                //        .Lookup(l => l.DataSource(Html.GetEnumSelectList<PriorityEnum>().Select(i => new { Value = int.Parse(i.Value), Text = i.Text }))
                //            .ValueExpr("Value")
                //            .DisplayExpr("Text"));

                columns.AddFor(y => y.TicketPriorityId).Caption("Öncelik").AllowEditing(true).Visible(true)
                    .Lookup(l => l.DataSource(prioritiesViewData.Select(i => new { Value = i.Id, Text = i.Name })).ValueExpr("Value").DisplayExpr("Text"));

                columns.AddFor(m => m.PeriodicName).Caption("Periyot Adı").AllowEditing(true);
                columns.AddFor(m => m.AddedByUser.FirstName).Caption("Ekleyen Kullanıcı Ad").AllowEditing(true);
                columns.AddFor(m => m.AddedByUser.LastName).Caption("Ekleyen Kullanıcı Soyad").AllowEditing(true);

                columns.AddFor(y => y.TickedAssignedAssignmentGroup.GroupName).Caption("Sorumlu Grup").AllowEditing(true);
            })
                .OnEditingStart(@<text> function(e) {onEditingStart(e) } </text>)
                )
        </div>
    </div>
</div>

@using (Html.DevExtreme().NamedTemplate("LocationPopupPeriodicTicket"))
{

    @(Html.DevExtreme().DropDownBox()
                    .ID("dropDownLocationPeriodicTicket")
                    .DataSource(locationsViewData, "HierarchyId")
                    .DeferRendering(false)
                    .Width("50%")
                    .ValueExpr("HierarchyId")
                    .DisplayExpr("LocationName")
                    .DropDownOptions(o => o.Height(350))
                    .Placeholder("Mahal Seçiniz Seçiniz..")
                    .ShowClearButton(true)
                    .OnValueChanged("locationTreeBox_valueChangedPeriodicTicket")
                    .DropDownOptions(ddo=>ddo.ShowTitle(false))
                    .ContentTemplate(
                            @<text>
                                @await Html.PartialAsync("../Shared/Periodic/_PeriodicTicketlocationTreeViewMultiple")
                            </text>
                    ))
    @(Html.DevExtreme().ScrollView().Width("100%").Height("100%").Content(@<text>
<div id="selectedLocationPeriodicTicket" class="container">

    </div></text>));

}


@(Html.DevExtreme().Popup()
    .ID("popupContainerMahalPeriodicTicket")
    .Visible(false)
    .Width("50%")
    .Height("70%")
    .ShowTitle(false)
    .ShowCloseButton(true)
)

<script type="text/javascript">

    let locationsUpdatePeriodicTicket = [];
    let locationsWithPopupPeriodicTicket = [];
    var data;
    let countDownPeriodicTicketGridRefreshDate;

    const pdfOptionsOfPeriodicTicket = [
        { Id: 1, name: 'Tüm Verileri Dışarı Aktar' },
        { Id: 2, name: 'Seçili Satırı Dışa Aktar' }
    ];
    var PeriodicTicketDataGrid;
    //$("#dateDayStartedTime").dxDateBox("instance").option("isValid", true);
    //$("#dateDayEndedTime").dxDateBox("instance").option("isValid", true);
    //row u editlemek istediğimizde
    function onEditingStart(e) {

        data = e.data;
    }
    //yeni bir row eklemek istediğimizde
    function OnInitNewRow(e) {

        data = null;
    }
    function onValueChangedOption(e) {


        if (e.value == 1) {
            var a = $("#sbPTOption").parent().parent().parent().parent();
            $("#Option2").remove();
            $("#Option3").remove();
            $("#Option4").remove();
            a.after(`<div id="Option1" >
            <div style="margin-top: 10px; margin-bottom: 10px; margin-left: 40px; margin-right: 40px; border-right: 1px solid #000; border-top: 1px solid #000; border-bottom: 1px solid #000; border-left: 1px solid #000; padding-left: 5px; padding-top: 5px; padding-bottom: 5px; border-radius: 15px;">
                <div class="form-check">
                    <input class='form-check-input' type='radio' id='gunluk1' name='radioGroup' ><label for='gunluk1'>
                        Her
                    </label>
                </div>
                <div>
                    <input  style="display: initial;" class="form-control col-md-6" type='number' id='numberGunluk' name='numberGunluk' value='0'>
                    <label>günde bir.</label>
                </div>
            </div>
                <hr>

            <div style="margin-top: 10px; margin-bottom: 10px; margin-left: 40px; margin-right: 40px; border-right: 1px solid #000; border-top: 1px solid #000; border-bottom: 1px solid #000; border-left: 1px solid #000; padding-left: 5px; padding-top: 5px; padding-bottom: 5px; border-radius: 15px;">
                <div class="form-check">
                    <input class='form-check-input' type='radio' id='gunluk2' name='radioGroup' ><label for='age1'>Haftaiçi Her gün</label>
                </div>
            </div>

</div>`)
        }
        if (e.value == 2) {
            var a = $("#sbPTOption").parent().parent().parent().parent();
            $("#Option1").remove();
            $("#Option3").remove();
            $("#Option4").remove();
            a.after(`
<div id="Option2" style="margin-top: 10px; margin-bottom: 10px; margin-left: 40px; margin-right: 40px; border-right: 1px solid #000; border-top: 1px solid #000; border-bottom: 1px solid #000; border-left: 1px solid #000; padding-left: 5px; padding-top: 5px; padding-bottom: 5px; border-radius: 15px;">
    <div class="form-check">
        <input class="form-check-input" type="radio" id="haftalik1" name="haftalik1" value="3"><label for="haftalik1">
            Her
        </label>
    </div>
    <div>
        <input class="form-control col-md-6" type="number" id="haftalik1Number" name="haftalik1Number" value="0" style="display: initial;">
        <label>haftada şu günlerde tekrarla.</label>
    </div>

    <br>
    <input type="checkbox" id="pazartesi" name="pazartesi" value="0">
    <label for="vehicle1"> Pazartesi</label>

    <input type="checkbox" id="sali" name="sali" value="1"><label for="vehicle1"> Salı</label>

    <input type="checkbox" id="carsamba" name="carsamba" value="2"><label for="vehicle1"> Çarşamba</label>

    <input type="checkbox" id="persembe" name="persembe" value="3"><label for="vehicle1"> Perşembe</label>

    <input type="checkbox" id="cuma" name="cuma" value="4"><label for="vehicle1"> Cuma</label>

    <input type="checkbox" id="cumartesi" name="cumartesi" value="5"><label for="vehicle1"> Cumartesi</label>

    <input type="checkbox" id="pazar" name="pazar" value="6"><label for="vehicle1"> Pazar</label>

</div>



`)
        }

        if (e.value == 3) {
            var a = $("#sbPTOption").parent().parent().parent().parent();
            $("#Option2").remove();
            $("#Option1").remove();
            $("#Option4").remove();
            a.after(`<div id="Option3">
    <div style="margin-top: 10px; margin-bottom: 10px; margin-left: 40px; margin-right: 40px; border-right: 1px solid #000; border-top: 1px solid #000; border-bottom: 1px solid #000; border-left: 1px solid #000; padding-left: 5px; padding-top: 5px; padding-bottom: 5px; border-radius: 15px;">
        <div class="form-check">
            <input class="form-check-input" type="radio" id="aylik1" name="radioGroup" value="3"><label for="aylik1">
                Her
            </label>
        </div>
        <div>
            <input class="form-control col-md-6" type="number" id="aylik1Number1" name="aylik1Number" value="0" style="display: initial;"><label>ayda bir,ayın</label>
        </div>
        <div style="margin-top: 10px;">
            <input class="form-control col-md-6" type="number" id="aylik1Number2" name="aylik1Number2" value="0" style="display: initial;">
            <label>günü</label>
        </div>

    </div>
    <br>
    <div style="margin-top: 10px; margin-bottom: 10px; margin-left: 40px; margin-right: 40px; border-right: 1px solid #000; border-top: 1px solid #000; border-bottom: 1px solid #000; border-left: 1px solid #000; padding-left: 5px; padding-top: 5px; padding-bottom: 5px; border-radius: 15px;">
        <div class="form-check" style="padding-left: 0px;">
            <input type="radio" id="aylik2" name="radioGroup" value="3"><label for="aylik2">
                Her
            </label>
        </div>

        <div>
            <input class="form-control col-md-6" type="number" id="aylik2Number1" name="aylik2Number1" value="0" style="
    display: initial;"><label>ayda bir,</label>
        </div>
        <div style="margin-top: 10px;">
            <select class="form-control col-md-6" name="weekNumber" id="weekNumber" style="display: initial;">
                <option value="0">1</option>
                <option value="1">2</option>
                <option value="2">3</option>
                <option value="3">4</option>
                <option value="4">5</option>

            </select><label>.</label>
        </div>

        <div style="margin-top: 10px;">
            <select class="form-control col-md-6" name="weekName" id="weekName" style="display: initial;">
                <option value="0">Pazartesi</option>
                <option value="1">Salı</option>
                <option value="2">Çarşamba</option>
                <option value="3">Perşembe</option>
                <option value="4">Cuma</option>
                <option value="5">Cumartesi</option>
                <option value="6">Pazar</option>
            </select>
            <label>günü</label>
        </div>
    </div>
</div>
`)
        }

        if (e.value == 4) {
            var a = $("#sbPTOption").parent().parent().parent().parent();
            $("#Option2").remove();
            $("#Option3").remove();
            $("#Option1").remove();
            a.after(`

<div id="Option4">
    <div style="margin-top: 10px; margin-bottom: 10px; margin-left: 40px; margin-right: 40px; border-right: 1px solid #000; border-top: 1px solid #000; border-bottom: 1px solid #000; border-left: 1px solid #000; padding-left: 5px; padding-top: 5px; padding-bottom: 5px; border-radius: 15px;">
        <div class="form-check">
            <input class="form-check-input" type="radio" id="yillik1" name="radioGroup" value="3"><label for="yillik1">
                Her yıl
            </label>
        </div>
        <div>
            <select class="form-control col-md-6" name="yearMonth" id="yearMonth" style="display: initial;">
                <option value="0">Ocak</option>
                <option value="1">Şubat</option>
                <option value="2">Mart</option>
                <option value="3">Nisan</option>
                <option value="4">Mayıs</option>
                <option value="5">Haziran</option>
                <option value="6">Temmuz</option>
                <option value="7">Ağustos</option>
                <option value="8">Eylül</option>
                <option value="9">Ekim</option>
                <option value="10">Kasım</option>
                <option value="11">Aralık</option>
            </select><label>ayının</label>
        </div>


        <div style="margin-top: 10px;">
            <input class="form-control col-md-6" type="number" id="yillik1number1" name="yillik1number1" value="0" style="display: initial;">
            <label>.günü</label>
        </div>
    </div>
    <hr>
    <div style="margin-top: 10px; margin-bottom: 10px; margin-left: 40px; margin-right: 40px; border-right: 1px solid #000; border-top: 1px solid #000; border-bottom: 1px solid #000; border-left: 1px solid #000; padding-left: 5px; padding-top: 5px; padding-bottom: 5px; border-radius: 15px;">
        <div class="form-check" style="padding-left: 0px;">
            <input type="radio" id="yillik2" name="radioGroup" value="3"><label for="yillik2">
                Her yıl
            </label>
        </div>

        <div>
            <select class="form-control col-md-6" name="yearMonth2" id="yearMonth2" style="display: initial;">
                <option value="0">Ocak</option>
                <option value="1">Şubat</option>
                <option value="2">Mart</option>
                <option value="3">Nisan</option>
                <option value="4">Mayıs</option>
                <option value="5">Haziran</option>
                <option value="6">Temmuz</option>
                <option value="7">Ağustos</option>
                <option value="8">Eylül</option>
                <option value="9">Ekim</option>
                <option value="10">Kasım</option>
                <option value="11">Aralık</option>
            </select>
            <label>ayının</label>
        </div>


        <div style="margin-top: 10px;">
            <select class="form-control col-md-6" name="yillikNumber" id="yillikNumber" style="display: initial;">
                <option value="0">1</option>
                <option value="1">2</option>
                <option value="2">3</option>
                <option value="3">4</option>
                <option value="4">5</option>
            </select><label>.</label>

        </div>
        <div style="margin-top: 10px;">
            <select class="form-control col-md-6" name="weekYil" id="weekYil" style="display: initial;">
                <option value="0">Pazartesi</option>
                <option value="1">Salı</option>
                <option value="2">Çarşamba</option>
                <option value="3">Perşembe</option>
                <option value="4">Cuma</option>
                <option value="5">Cumartesi</option>
                <option value="6">Pazar</option>
            </select>
            <label>günü</label>
        </div>


    </div>
</div>



                `)
        }
    }

    function onValueChangedIsTime(e) {
        if (e.value == true) {
            $("#dateDayStartedTime").dxDateBox("instance").option("visible", true);
            $("#dateDayEndedTime").dxDateBox("instance").option("visible", true);
            //$("#dateDayStartedTime").dxDateBox("instance").option("isValid", false);
            //$("#dateDayEndedTime").dxDateBox("instance").option("isValid", false);
        }
        else {
            $("#dateDayStartedTime").dxDateBox("instance").option("visible", false);
            $("#dateDayEndedTime").dxDateBox("instance").option("visible", false);

        }
    }

    function onToolbarPreparingPeriodicTicket(e) {
        e.toolbarOptions.items.forEach((value, index, array) => {
            if (value.name == "addRowButton") {
                e.toolbarOptions.items[index].showText = "always";
                e.toolbarOptions.items[index].options.text = "Planlı iş Emri ";
                e.toolbarOptions.items[index].options.icon = "plus";
                e.toolbarOptions.items[index].options.type = "success";
            }
        });
    }

    function onOpenedPeriodicTicketPriorityFilter(e) {
        var listItems = e.component.content().find(".dx-list-item");
        listItems[0].id = "priorityOne";
        listItems[1].id = "priorityTwo";
    }

    function setPopupTitlePeriodicTicket(e) {

        $("#dateDayStartedTime").dxDateBox("instance").option("visible", false);
        $("#dateDayEndedTime").dxDateBox("instance").option("visible", false);
        $("#popupPeriodicTicketContainer").dxPopup("instance").option("height", "85%");
        $("#popupPeriodicTicketContainer").dxPopup("instance").option("toolbarItems[0].toolbar", "top");
        $("#popupPeriodicTicketContainer").dxPopup("instance").option("toolbarItems[0].options.icon", "save");
        $("#popupPeriodicTicketContainer").dxPopup("instance").option("toolbarItems[0].options.type", "success");
        $("#popupPeriodicTicketContainer").dxPopup("instance").option("toolbarItems[1].location", "after");
        $("#popupPeriodicTicketContainer").dxPopup("instance").option("toolbarItems[1].toolbar", "top");
        $("#popupPeriodicTicketContainer").dxPopup("instance").option("toolbarItems[1].options.text", "Kapat");
        $("#popupPeriodicTicketContainer").dxPopup("instance").option("toolbarItems[1].options.icon", "close");
        $("#popupPeriodicTicketContainer").dxPopup("instance").option("toolbarItems[1].options.type", "default");
        $("#popupPeriodicTicketContainer").dxPopup("instance").option("toolbarItems[1].location", "after");

        if (data == null) {
            $("#popupPeriodicTicketContainer").dxPopup("instance").option("toolbarItems[1].options.onClick", function onPeriodicTicketPopupCloseClick(e) {
                if ($(".classTable").length != 0) {
                    var tableCount = $(".classTable").length;
                    var tableArray = [];
                    tableArray = $(".classTable");
                    for (var i = 0; i < tableCount; i++) {

                        $("#dropDownLocationPeriodicTicket").dxDropDownBox("instance").option("value", null);
                        $("#locationTreeViewMultiplePeriodicTicket").dxTreeView("instance").unselectAll();
                        tableArray[i].remove();
                    }
                }
                locationsWithPopupPeriodicTicket = [];
                $("#popupPeriodicTicketContainer").dxPopup("hide");

            });
        }

        if (data != null) {
            $("#popupPeriodicTicketContainer").dxPopup({
                title: "Ticket Düzenle",
            });

            $("#popupPeriodicTicketContainer").dxPopup("instance").option("toolbarItems[0].toolbar", "top");
            $("#popupPeriodicTicketContainer").dxPopup("instance").option("toolbarItems[0].options.icon", "save");
            $("#popupPeriodicTicketContainer").dxPopup("instance").option("toolbarItems[0].options.type", "success");
            $("#popupPeriodicTicketContainer").dxPopup("instance").option("toolbarItems[0].options.text", "Güncelle");

            $("#popupPeriodicTicketContainer").dxPopup("instance").option("toolbarItems[1].toolbar", "top");
            $("#popupPeriodicTicketContainer").dxPopup("instance").option("toolbarItems[1].options.text", "Kapat");
            $("#popupPeriodicTicketContainer").dxPopup("instance").option("toolbarItems[1].options.icon", "close");
            $("#popupPeriodicTicketContainer").dxPopup("instance").option("toolbarItems[1].options.type", "default");

            //var TicketRelatedLocations = $("#dropDownLocationPeriodicTicket").dxDropDownBox("instance").option("value");

            let locations = [];
            data.TicketRelatedLocations.forEach((location, index, array) => {
                locations.push(location.TicketLocation.HierarchyId);
                locationsWithPopupPeriodicTicket.push(location.TicketLocation);
            });

            $("#addMahalButtonPeriodicTicket").dxButton("instance")._$element.children().children().children()[0].innerHTML = `${locations.length}`;

            locationsUpdate = locations;
            //labelText = `Ticket: #${data.TicketViewObj.id}`;
            //data.TicketViewObj.responsibleUserId = "1";
            //$("#dropDownReasonSingle").dxDropDownBox("instance").option("value", String(data.Ticket.TicketReasonId));
            //$("#dropDownReasonSingle").dxDropDownBox("instance").option("disabled", true);

            //$("#dropDownLocationPeriodicTicketSingle").dxDropDownBox("instance").option("value", data.Location.Id);
            //$("#dropDownLocationPeriodicTicketSingle").dxDropDownBox("instance").option("disabled", true);

            //$("#sbTicketPriority").dxSelectBox("instance").option("disabled", true);

            //$("#sbTicketOwner").dxSelectBox("instance").option("value", data.Ticket.AddedByUserId);
            //$("#sbTicketOwner").dxSelectBox("instance").option("disabled", true);

            //$("#sbAsgGroup").dxSelectBox("instance").option("value", data.Ticket.TickedAssignedAssignmentGroupId);
            //$("#sbAsgGroup").dxSelectBox("instance").option("disabled", true);

            //$("#sbAsgGroupEmp").dxSelectBox("instance").option("value", data.Ticket.TicketAssignedUserId);
            //$("#sbAsgGroupEmp").dxSelectBox("instance").option("disabled", true);

            //$("#dateTicket").dxDateBox("instance").option("value", data.Ticket.TicketOpenedTime);
            //$("#dateTicket").dxDateBox("instance").option("disabled", true);

            //$("#textAreaDescription").dxTextArea("instance").option("value", data.Ticket.TicketDescription);
            //$("#textAreaDescription").dxTextArea("instance").option("disabled", true);
        }
    }

    function onSelectionChangedPeriodicTicket(data) {
        let rowData = data.selectedRowsData[0];
        if (!rowData)
            return;
        dataRow = rowData;
    }

    function beforeSendPeriodicTicket(type, e) {
        if (type == "load") return;



        var chpValue = $("#chPTisTime").dxCheckBox("instance").option("value");
        if (chpValue == true) {
            var valueDateStart = $("#dateDayStartedTime").dxDateBox("instance").option("value");
            var valueDateEnd = $("#dateDayEndedTime").dxDateBox("instance").option("value");
            if (valueDateStart == null || valueDateEnd == null) {
                return;
            }
        }

        var numberGunluk = 0;
        var gunluk1 = null;
        var haftalik1Number = 0;
        var haftalar = [];
        var aylik1Number1 = 0;
        var aylik1Number2 = 0;
        var aylik2Number1 = 0;
        var weekNumber = 0;
        var weekName = null;
        var yearMonth = null;
        var yillik1number1 = 0;
        var yearMonth2 = null;
        var yillikNumber = 0;
        var weekYil = null;

        var optionValue = $("#sbPTOption").dxSelectBox("instance").option("value");
        if (optionValue == 1) {
            gunluk1 = $("#gunluk1").prop('checked');
            if (gunluk1 == true) {
                numberGunluk = $("#numberGunluk").val();
            }
        }

        if (optionValue == 2) {

            haftalik1Number = $("#haftalik1Number").val();
            if ($("#pazartesi").prop('checked') == true) {
                var pazartesi = $("#pazartesi").val();
                haftalar.push(pazartesi);
            }
            if ($("#sali").prop('checked') == true) {
                var sali = $("#sali").val();
                haftalar.push(sali);
            }
            if ($("#carsamba").prop('checked') == true) {
                var carsamba = $("#carsamba").val();
                haftalar.push(carsamba);
            }

            if ($("#persembe").prop('checked') == true) {
                var persembe = $("#persembe").val();
                haftalar.push(persembe);
            }

            if ($("#cuma").prop('checked') == true) {
                var cuma = $("#cuma").val();
                haftalar.push(cuma);
            }

            if ($("#cumartesi").prop('checked') == true) {
                var cumartesi = $("#cumartesi").val();
                haftalar.push(cumartesi);
            }

            if ($("#pazar").prop('checked') == true) {
                var pazar = $("#pazar").val();
                haftalar.push(pazar);
            }
        }

        if (optionValue == 3) {
            if ($("#aylik1").prop('checked') == true) {
                aylik1Number1 = $("#aylik1Number1").val();
                aylik1Number2 = $("#aylik1Number2").val();
            }

            if ($("#aylik2").prop('checked') == true) {
                aylik2Number1 = $("#aylik2Number1").val();
                weekNumber = $("#weekNumber").val();
                weekName = $("#weekName").val();

            }

        }

        if (optionValue == 4) {
            if ($("#yillik1").prop('checked') == true) {
                yearMonth = $("#yearMonth").val();
                yillik1number1 = $("#yillik1number1").val();
            }

            if ($("#yillik2").prop('checked') == true) {
                yearMonth2 = $("#yearMonth2").val();
                yillikNumber = $("#yillikNumber").val();
                weekYil = $("#weekYil").val();

            }

        }
        var ajaxHeader = {};
        ajaxHeader["RequestVerificationToken"] = "@Xsrf.GetAndStoreTokens(Model.HttpContext).RequestToken";
        var formData = new FormData();

        formData.append("Description", $("#textAreaDescription").dxTextArea("instance").option("value"));
        formData.append("TicketReasonId", $("#dropDownReasonSinglePeriodicTicket").dxDropDownBox("instance").option("value"));
        formData.append("LocationId", 18);
        formData.append("Option", $("#sbPTOption").dxSelectBox("instance").option("value"));
        formData.append("PeriodicName", $("#textPeriodicName").dxTextBox("instance").option("value"));
        formData.append("StartDateTime", $("#dateStartPT").dxDateBox("instance").option("value"));
        formData.append("EndDateTime", $("#dateEndPT").dxDateBox("instance").option("value"));
        formData.append("TicketPriority", $("#sbTicketPriority").dxSelectBox("instance").option("value"));
        formData.append("TicketUserId", 1);
        formData.append("DayNumber", numberGunluk);
        formData.append("WeekPeriod", haftalik1Number);
        formData.append("Weeks", haftalar);
        formData.append("MonthADayOptionOne", aylik1Number1);
        formData.append("MonthDay", aylik1Number2);
        formData.append("MonthADayOptionsTwo", aylik2Number1);
        formData.append("WeekDayinMonth", weekName);
        formData.append("WeekNumberinMonth", weekNumber);
        formData.append("YearMonthOptionOne", yearMonth);
        formData.append("YearMonthDay", yillik1number1);
        formData.append("YearMonthOptionTwo", yearMonth2);
        formData.append("YearMonthWeekNumber", yillikNumber);
        formData.append("YearMonthWeekName", weekYil);
        formData.append("AddedByUserId", 1);

        e.data = formData;
        e.headers = ajaxHeader;
        e.async = true;
        e.contentType = false;
        e.processData = false;
    }

    function onCellPreparedPeriodicTicket(e) {
        if (e.column.type == "buttons") {
            e.cellElement.children().removeClass('dx-icon-edit').addClass("dx-icon-search");
            e.cellElement.children().attr("title", "Detay");
        }
    }

    function periodicTicketGridDataExporting(e) {
        let workbook = new ExcelJS.Workbook();
        let worksheet = workbook.addWorksheet('periodictTickets');

        DevExpress.excelExporter.exportDataGrid({
            component: e.component,
            worksheet: worksheet,
            autoFilterEnabled: true
        }).then(function () {
            workbook.xlsx.writeBuffer().then(function (buffer) {
                saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'PeryodikIsEmirleri.xlsx');
            });
        });
        e.cancel = true;
    }

    function syncTreeViewSelectionPeriodicTicketReason(treeView, value) {
        if (!value) {
            treeView.unselectAll();
        } else {
            treeView.selectItem(value);
        }
    }

    function reasonTreeBoxMulti_valueChangedPeriodicTicketReason(e) {
        if (e.component.content() == null)
            return;
        var $treeView = e.component.content().find(".dx-treeview");
        if ($treeView.length) {
            syncTreeViewSelectionPeriodicTicketReason($treeView.dxTreeView("instance"), e.value);
        }
    }

    function reasonTreeBox_valueChangedPeriodicTicket(e) {
        if (e.component.content() == null)
            return;
        var $treeView = e.component.content().find(".dx-treeview");
        if ($treeView.length) {
            syncTreeViewSelectionPeriodicTicketReason($treeView.dxTreeView("instance"), e.value);
        }
    }
    $(function () {
        $("#popupContainerMahalPeriodicTicket").dxPopup({
            title: "Popup Title",
            contentTemplate: LocationPopupPeriodicTicket,
            deferRendering: false,
            showCloseButton: true,
            toolbarItems: [{
                text: "Mahal Ekle",
                location: "before"
            },
            {
                widget: "dxButton",
                toolbar: 'top',
                location: "after",
                options: {
                    type: 'success',
                    text: "Kaydet",
                    icon: "save",
                    onClick: function (e) {
                        $("#popupContainerMahalPeriodicTicket").dxPopup("hide");
                        var lengthDP = $("#dropDownLocationPeriodicTicket").dxDropDownBox("instance").option("value");
                        $("#addMahalButtonPeriodicTicket").dxButton("instance")._$element.children().children().children()[0].innerHTML = `${lengthDP.length}`;
                    }
                }
            },
            {
                widget: "dxButton",
                toolbar: 'top',
                location: "after",
                options: {
                    type: "default",
                    text: "Kapat",
                    icon: "close",
                    onClick: function (e) {

                        if ($(".classTable").length != 0) {
                            var tableCount = $(".classTable").length;
                            var tableArray = [];
                            tableArray = $(".classTable");
                            for (var i = 0; i < tableCount; i++) {
                                $("#dropDownLocationPeriodicTicket").dxDropDownBox("instance").option("value", null);
                                $("#locationTreeViewMultiplePeriodicTicket").dxTreeView("unselectAll");
                                tableArray[i].remove();
                            }
                        }
                        $("#popupContainerMahalPeriodicTicket").dxPopup("hide");
                    }
                }
            }


            ]
        });
    });

    function onclickPeriodicTicketMahalPopup(e) {

        $("#popupContainerMahalPeriodicTicket").dxPopup("show");
        console.log("onclickPeriodicTicketMahalPopup");
        if (data != null) {

            if (locationsWithPopupPeriodicTicket.length != 0) {
                let locations = [];
                locationsWithPopupPeriodicTicket.forEach((location, index, array) => {
                    locations.push(location.HierarchyId);
                });

                $("#dropDownLocationPeriodicTicket").dxDropDownBox("instance").option("value", locations);


                for (var i = 0; i < locationsWithPopupPeriodicTicket.length; i++) {

                    $("#locationTreeViewMultiplePeriodicTicket").dxTreeView("selectItem", locationsWithPopupPeriodicTicket[i].HierarchyId);
                }
            }
        }

    }

    function syncTreeViewSelectionLocationPeriodicTicket(treeView, value) {
        if (!value) {
            count = 0;
            treeView.unselectAll();

            if ($(".classTable").length != 0) {
                var tableCount = $(".classTable").length;
                var tableArray = [];
                tableArray = $(".classTable");
                for (var i = 0; i < tableCount; i++) {
                    tableArray[i].remove();
                }

            }
        }
        else {
            value.forEach(function (key) {
                treeView.selectItem(key);
            });
        }

    }

    function locationTreeBox_valueChangedPeriodicTicket(e) {
        if (e.component.content() == null)
            return;
        var $treeView = e.component.content().find(".dx-treeview");
        if ($treeView.length) {
            syncTreeViewSelectionLocationPeriodicTicket($treeView.dxTreeView("instance"), e.value);
        }
    }

    var count = 0;
    function OnItemSelectionChangedLocationTmPeriodicTicket(args) {

        count = count + 1;

        if (args.itemData.selected == true) {
            $("#dropDownLocationPeriodicTicket").dxDropDownBox("instance").option("value", args.component.getSelectedNodeKeys());
            $("#selectedLocationPeriodicTicket").append(`
<table id="table${args.itemData.Id}" class="table table-bordered classTable">
  <thead>
  </thead>
  <tbody>
    <tr>
      <th class="col-md-2" scope="row">${count}</th>
      <td class="col-md-5">${args.itemData.LocationName}</td>
      <td class="col-md-5">
<button style="display: block;margin: auto;" type="button" id="location${args.itemData.Id}" name="location${args.node.key}" class="btn btn-primary" onclick="onDeleteLocationPeriodicTicket(this)">Kaldır</button></td>
    </tr
  </tbody>
</table>`)
        }
        else {
            $(`#table${args.itemData.Id}`).remove();
            for (var i = 0; i < $(".classTable").length; i++) {
                $(".classTable")[i].rows[0].cells[0].innerHTML = `${i + 1}`;
            }
            count = $(".classTable").length;
            locationsUpdatePeriodicTicket.push(args.node.key);
        }
    }
    function onDeleteLocationPeriodicTicket(a) {
        var str = a.id.toString();
        var strName = a.name;

        var stringId = str.substring(8);
        var stringName = strName.substring(8);
        var selectedItemsArr = [];
        $(`#table${stringId}`).remove();
        const index = locationsUpdatePeriodicTicket.indexOf(stringName);
        locationsUpdatePeriodicTicket.splice(index, 1);

        for (var i = 0; i < $(".classTable").length; i++) {
            $(".classTable")[i].rows[0].cells[0].innerHTML = `${i + 1}`;
        }

        count = $(".classTable").length;

        for (var i = 0; i < $("#locationTreeViewMultiplePeriodicTicket").dxTreeView("getSelectedNodes").length; i++) {

            if ($("#locationTreeViewMultiplePeriodicTicket").dxTreeView("getSelectedNodes")[i].key == stringName) {

                $("#locationTreeViewMultiplePeriodicTicket").dxTreeView("unselectItem", stringName);
                var selectedItems = $("#dropDownLocationPeriodicTicket").dxDropDownBox("instance").option("value");
                for (var i = 0; i < selectedItems.length; i++) {
                    if (selectedItems[i] != stringName) {
                        selectedItemsArr.push(selectedItems[i]);
                    }
                }
                $("#dropDownLocationPeriodicTicket").dxDropDownBox("instance").option("value", selectedItemsArr);
            }
        }
    }
    function cellTemplate_CurrentStatus(container, options) {
        if (options.data.TicketPriorityId == 2) {
            container.css("background-color", "red");
        }
        if (options.data.TicketPriorityId == 3) {
            container.css("background-color", "yellow");
        }
        console.log(options.data);
        console.log(options.data.TicketStatusId);

        if (options.data.TicketStatusId == 1)
            $("<div title='Yeni'>")
                .append($("<img >", { "src": "../../images/general/01_acik.svg" }))
                .appendTo(container);

        else if (options.data.TicketStatusId == 2)
            $("<div title='Atandı'>")
                .append($("<img>", { "src": "../../images/general/02_atandi.svg" }))
                .appendTo(container);
        else if (options.data.TicketStatusId == 3)
            $("<div title='Üzerinde Çalışılıyor'>")
                .append($("<img>", { "src": "../../images/general/03_calisiliyor.svg" }))
                .appendTo(container);
        else if (options.data.TicketStatusId == 4)
            $("<div title='Çözümlendi'>")
                .append($("<img>", { "src": "../../images/general/06_cozumlendi.svg" }))
                .appendTo(container);
        else if (options.data.TicketStatusId == 5)
            $("<div title='Kapatıldı'>")
                .append($("<img>", { "src": "../../images/general/07_kapali.svg" }))
                .appendTo(container);
        else if (options.data.TicketStatusId == 6)
            $("<div title='Askıya Alındı'>")
                .append($("<img>", { "src": "../../images/general/06_cozumlendi.svg" }))
                .appendTo(container);
        else if (options.data.TicketStatusId == 7)
            $("<div title='Beklemede'>")
                .append($("<img>", { "src": "../../images/general/04_beklet.svg" }))
                .appendTo(container);
        else if (options.data.TicketStatusId == 8)
            $("<div title='İptal Edildi'>")
                .append($("<img>", { "src": "../../images/general/05_reddet.svg" }))
                .appendTo(container);
        else
            $("<div title='Açık'>")
                .append($("<img>", {}))
                .appendTo(container);
    }
    function onInitializedPeriodicTicket() {
        refreshTimerPeriodicTicket(0);
    }
    function refreshTimerPeriodicTicket(count) {
        countDownPeriodicTicketGridRefreshDate = moment().add(5, 'm').toDate();
        let countDown = setInterval(function () {
            let now = new Date().getTime();
            let distance = countDownPeriodicTicketGridRefreshDate - now;
            if (distance < 0) {
                document.getElementById("timer_periodicTicket").innerHTML = `Yenileniyor..`;
                refreshTimerPeriodicTicket(0);
            }
            let minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
            let seconds = Math.floor((distance % (1000 * 60)) / 1000);
            let zero = "";
            if (seconds < 10)
                zero = "0";
            document.getElementById("timer_periodicTicket").innerHTML = `Yenile: (0${minutes}:${zero}${seconds})`;
        }, 1000);
    }
    function onContentReadyGridPeriodicTicket(e) {
        PeriodicTicketDataGrid = e.component;
        e.component.deselectRows(e.component.getSelectedRowKeys());
        var toolbar = e.element.find('.dx-datagrid-header-panel .dx-toolbar').dxToolbar('instance');
        toolbar.on('optionChanged', function (arg) {
            //addCustomItemPdfButton(toolbar);
        });
        addCustomItemPdfButtonPeriodicTicket(toolbar);
        addCustomItemPeriodicTicket(toolbar);
        if ($(".classTable").length != 0) {
            var tableCount = $(".classTable").length;
            var tableArray = [];
            tableArray = $(".classTable");
            for (var i = 0; i < tableCount; i++) {
                $("#dropDownLocationPeriodicTicket").dxDropDownBox("instance").option("value", null);
                $("#locationTreeViewMultiplePeriodicTicket").dxTreeView("unselectAll");
                tableArray[i].remove();
            }
        }
    }
    function addCustomItemPeriodicTicket(toolbar) {
        var items = toolbar.option('items');
        var myItem = DevExpress.data.query(items).filter(function (item) {
            return item.name == 'periodicTicketButton';
        }).toArray();
        if (!myItem.length) {
            items.push({
                id: 'btn_refresh_periodicTicket',
                location: 'after',
                widget: 'dxButton',
                name: 'periodicTicketButton',
                options: {
                    template: function (container, options) {
                        return `<i class='dx-icon fas fa-redo'></i><span class='dx-button-text' id='timer_periodicTicket'></span>`
                    },
                    hint: 'yenile',
                    type: "default",
                    onClick: function btn_refreshGridClick(e) {
                        $("#gridPeriodicTicket").dxDataGrid("instance").refresh();

                    },
                },
            });
            toolbar.option('items', items);
        }
    }
    function addCustomItemPdfButtonPeriodicTicket(toolbar) {
        var items = toolbar.option('items');
        var myItem = DevExpress.data.query(items).filter(function (item) {
            return item.name == 'btn_pdf_periodicTicket';
        }).toArray();
        if (!myItem.length) {
            items.push({
                id: 'btn_pdf_periodicTicket',
                location: 'after',
                widget: 'dxDropDownButton',
                name: 'btn_pdf_periodicTicket',
                options: {
                    text: 'Pdf',
                    icon: 'save',
                    displayExpr: 'name',
                    keyExpr: 'Id',
                    elementAttr: {
                        id: "btn_pdf_periodicTicketId",
                        class: "dpbColor"
                    },
                    dropDownOptions: {
                        width: 230,
                    },
                    onItemClick: exportToPDF,
                    items: pdfOptionsOfPeriodicTicket,
                },
            });
            toolbar.option('items', items);
        }
    }
    function exportToPDF(e) {
        const pdfDoc = new jsPDF('l');
        pdfDoc.addFileToVFS('NotoSerif-Regular-normal.ttf', myFont);
        pdfDoc.addFont('NotoSerif-Regular-normal.ttf', 'NotoSerif-Regular', 'normal');
        pdfDoc.setFont("NotoSerif-Regular");
        if (e.itemData.Id == 1) {
            const options = {
                jsPDFDocument: pdfDoc,
                component: PeriodicTicketDataGrid,
                autoTableOptions: {
                    rowPageBreak: 'auto',
                    bodyStyles: { valign: 'top' },
                    styles: {
                        font: 'NotoSerif-Regular'
                    }
                }
            };
            DevExpress.pdfExporter.exportDataGrid(options).then(() => {
                pdfDoc.setFontSize(5);
            }).then(() => {
                pdfDoc.save('PeryodikIsEmri.pdf');
            });
        }
        if (e.itemData.Id == 2) {
            const options = {
                jsPDFDocument: pdfDoc,
                component: PeriodicTicketDataGrid,
                autoTableOptions: {
                    rowPageBreak: 'auto',
                    bodyStyles: { valign: 'top' },
                    styles: {
                        font: 'NotoSerif-Regular'
                    }
                },
                selectedRowsOnly: true
            };
            DevExpress.pdfExporter.exportDataGrid(options).then(() => {
                pdfDoc.setFontSize(5);
            }).then(() => {
                pdfDoc.save('PeryodikIsEmri.pdf');
            });
        }
    }

</script>

<style>
    .dpbColor {
        background-color: #337ab7;
        border-radius: 4px;
    }

    .btn-class-dias:hover {
        background-color: #5cb85c;
    }

    .accordion {
        padding: 5px;
    }

    #accordion h1,
    #accordion p {
        margin: 0;
    }

    #accordion h1 {
        font-size: 20px;
    }

    .warning {
        background-color: #e4e50a !important;
        color: white;
    }


    .warning {
        background-color: yellow !important;
        /*color: orange !important;*/
        border-color: #ffca51 !important;
    }

        .warning.dx-state-hover {
            background-color: #e4e50a !important;
            /*color: black !important;*/
        }

        .warning.dx-state-active {
            background-color: #e4e50a !important;
            /*color: black !important;*/
        }

    .dx-icon-close {
        color: white !important;
    }

    .dx-widget warning {
        border: none;
    }
    /*bu ve altındaki css özelliği yazıların ve ikonların beyaz olmasını sağlamaktadır.*/
    .dx-button-mode-outlined {
        background-color: transparent;
        border-color: #ddd;
        color: white;
    }

        .dx-button-mode-outlined .dx-icon {
            color: white;
        }


    .dx-datagrid-export-button {
        background-color: #337ab7;
    }

    .dx-icon-export-to {
        color: white !important;
    }

    .dx-icon-export-excel-button {
        color: white !important;
    }


    .dx-datagrid-export-button.dx-state-hover {
        background-color: #285f8f !important;
        /*color: black !important;*/
    }

    .dx-datagrid-export-button.dx-state-active {
        background-color: #285f8f !important;
        /*color: black !important;*/
    }


    .dx-datagrid-column-chooser-button {
        background-color: #337ab7;
    }

    .dx-icon-column-chooser {
        color: white !important;
    }

    .dx-datagrid-column-chooser-button.dx-state-hover {
        background-color: #285f8f !important;
    }

    .dx-datagrid-column-chooser-button.dx-state-active {
        background-color: #285f8f !important;
    }

    .dx-datagrid-text-content {
        color: black;
        font-weight: 700;
    }
</style>
