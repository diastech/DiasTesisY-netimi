@page
@model DIAS.UI.Pages.Definition.UserDefinitionModel
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@using DIAS.UI.Helpers
@{
}

<script src="https://cdnjs.cloudflare.com/ajax/libs/exceljs/3.8.0/exceljs.min.js" defer></script>
<script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<div class="card">

    <div class="card-body">

        @(Html.DevExtreme().DataGrid<UserHelperDto>()
                            .ID("gridUserDefinition")
                            .DataSource(ds => ds.RemoteController()
                            .OnBeforeSend("beforeSendUserDefinition")
                            .Key("Id")
                            .LoadUrl(Url.Page(null, "GridData"))
                            .InsertUrl(Url.Page(null, "GridRow"))
                            .UpdateUrl(Url.Page(null, "GridRowUpdate"))
                            .DeleteUrl(Url.Page(null, "GridRowDelete"))
                        )
                            .ErrorRowEnabled(false)
                            .Export(o => o.Enabled(true).AllowExportSelectedData(true))
                            .OnExporting("userDefinitionGridDataExporting")
                            .ColumnChooser(c => c.Enabled(true).AllowSearch(true).Mode(GridColumnChooserMode.Select))
                            .HeaderFilter(o=>o.AllowSearch(true))
                            .FilterRow(o => o.Visible(true))
                            .Selection(s => s.Mode(SelectionMode.Single))
                            .OnSelectionChanged("onSelectionChangedUserDefinition")
                            .OnToolbarPreparing("onToolbarPreparingUserDefinition")
                            .OnCellPrepared("onCellPreparedUserDefinition")
                        .RemoteOperations(true)
                            .ShowBorders(true)
                            .Paging(p => p.Enabled(false))
                        .Editing(e => e.Mode(GridEditMode.Popup)
                                .AllowUpdating(true)
                                .AllowDeleting(true)
                                .AllowAdding(true)
                                .SelectTextOnEditStart(true)
                                .StartEditAction(GridStartEditAction.DblClick)
                                .Popup(p => p
                                    .Title("Kullanıcı Tanımlama")
                                    .ID("popupUserDefinitionContainer")
                                    .ShowTitle(true)
                                    .Width(700)
                                    .Height(100)
                                    .OnShowing("setPopupTitleUserDefinition")
                                    .ShowCloseButton(false)
                                )
                            .Form(f => f.Items(items =>
                            {
                                items.AddGroup()
                                    .Items(groupItems =>
                                    {
                                        groupItems.AddTabbed()
                    .TabPanelOptions(o =>
                    {
                        o.DeferRendering(false);
                        o.AnimationEnabled(true);
                        o.ID("UserDefinitionTab");
                        o.Width(650);
                        o.AnimationEnabled(true);
                        o.ShowNavButtons(true);
                        o.Height("100%");
                    })
                    .Tabs(tabItems =>
                    {
                        tabItems.Add().Icon("fas fa-save")
                    .Title("Tesis Tanımı").ColCount(2)
                    .Items(tabItem =>
                    {
                        //Todo : Tesis Kodu alanı dto ya eklenmesi gerekmektedir.
                        tabItem.AddSimpleFor(m => m.TcNo).Label(l => l.Text("TC Kimlik No")).ColSpan(1).Editor(ed => ed.TextBox().ID("userDefinitionTc").Mask("99999999999")
                          .Placeholder("TC Kimlik Numaranızı Giriniz")).ValidationRules(v =>
                          {
                              v.AddRequired().Message("Tesis Kodu Alanı Zorunludur.");
                          });

                        tabItem.AddButton().ColSpan(1)
                    .HorizontalAlignment(HorizontalAlignment.Left)
                    .ButtonOptions(b => b.Text("LDAP dan Kullanıcıları Al")
                        .Type(ButtonType.Success)
                        .UseSubmitBehavior(true));

                        tabItem.AddSimpleFor(m => m.Name).Label(l => l.Text("Adı")).ColSpan(1).Editor(ed => ed.TextBox().ID("userDefinitionName")
                          .Placeholder("Adınızı Giriniz")).ValidationRules(v =>
                          {
                              v.AddRequired().Message("Ad Alanı Zorunludur.");
                          });
                        tabItem.AddSimpleFor(m => m.Surname).Label(l => l.Text("Soyadı")).ColSpan(1).Editor(ed => ed.TextBox().ID("userDefinitionSurName")
                          .Placeholder("Soyadınızı Giriniz")).ValidationRules(v =>
                          {
                              v.AddRequired().Message("Soyad Alanı Zorunludur.");
                          });

                        tabItem.AddSimpleFor(m => m.UserName).Label(l => l.Text("Kullanıcı Adı")).ColSpan(2).Editor(ed => ed.TextBox().ID("userDefinitionUserName")
                          .Placeholder("Kullanıcı Adı Giriniz")).ValidationRules(v =>
                          {
                              v.AddRequired().Message("Kullanıcı Adı Alanı Zorunludur.");
                          });

                        tabItem.AddSimpleFor(m => m.Password).Label(l => l.Text("Şifre")).ColSpan(2).Editor(ed => ed.TextBox().ID("userDefinitionPassword")
                          .Placeholder("Şifre Giriniz")).ValidationRules(v =>
                          {
                              v.AddRequired().Message("Şifre Alanı Zorunludur.");
                          });

                        tabItem.AddSimpleFor(m => m.RoleHelperId).ColSpan(2)
                        .Label(l => l.Text("Rol").Visible(true))
                        .Editor(e => e.SelectBox()
                        .ID("sbRoleUser")
                        .DataSource(d => d.RemoteController()
                        .Key("Id")
                        .LoadUrl(Url.Page(null, "RoleData")))
                        .DisplayExpr("Name")
                        .ShowClearButton(true)
                        .DeferRendering(false)
                        .SearchEnabled(true)
                        .Placeholder("Role Seçiniz.")
                        .ValueExpr("Id"))
                        .ValidationRules(v =>
                        {
                            v.AddRequired().Message("Role Seçmeniz Gerekmektedir.");
                        });

                        tabItem.AddSimpleFor(m => m.PhoneNumber).Label(l => l.Text("Telefon No")).ColSpan(1).Editor(ed => ed.TextBox().ID("userDefinitionPhoneNumber")
                        .Mask("(X00)000-0000")
                        .MaskRules(new { X = new JS("/[02-9]/") })
                          .Placeholder("Telefon Numaranızı Giriniz")).ValidationRules(v =>
                          {
                              v.AddRequired().Message("Telefon Numarası Alanı Zorunludur.");
                          });
                        tabItem.AddSimpleFor(m => m.ActiveStatus).Label(l => l.Text("Aktif")).ColSpan(1).Editor(ed => ed.CheckBox().Value(true).ID("userDefinitionActiveStatus"));

                    });

                    });
                                    });
                            }).ID("UserDefinitionForm")))
        .Columns(columns =>
        {
            columns.AddFor(m => m.TcNo).Caption("TC Kimlik Numarası").AllowEditing(true);
            columns.AddFor(m => m.Name).Caption("Ad").AllowEditing(true);
            columns.AddFor(m => m.Surname).Caption("Soyad").AllowEditing(true);
            columns.AddFor(m => m.UserName).Caption("Kullanıcı Adı").AllowEditing(true);
            columns.AddFor(m => m.RoleHelper.Name).Caption("Rol").AllowEditing(true);
            
        })
        .OnEditingStart(@<text> function(e) {onEditingStartUserDefinition(e) } </text>)
        .OnInitNewRow(@<text> function(e) { onInitNewRowUserDefinition(e); } </text>)

    )
    </div>
</div>



<script type="text/javascript">
    var data;
    var ajaxHeader = {};
        ajaxHeader["RequestVerificationToken"] = "@Xsrf.GetAndStoreTokens(Model.HttpContext).RequestToken";
    function onEditingStartUserDefinition(e) {
        data = e.data;
    }
    function onInitNewRowUserDefinition(e) {
        data = null;
    }
    function onToolbarPreparingUserDefinition(e) {
        e.toolbarOptions.items[0].showText = "always";
        e.toolbarOptions.items[0].options.text = "Kullanıcı Ekle";
        e.toolbarOptions.items[0].options.icon = "plus";
        e.toolbarOptions.items[0].options.type = "success";
    }
    function onSelectionChangedUserDefinition(data) {
        let rowData = data.selectedRowsData[0];
        if (!rowData)
            return;
        dataRow = rowData;
    }
    function setPopupTitleUserDefinition(e) {
        if (data == null) {
            $("#popupUserDefinitionContainer").dxPopup("instance").option("height", "52%");
            $("#popupUserDefinitionContainer").dxPopup("instance").option("toolbarItems[0].toolbar", "top");
            $("#popupUserDefinitionContainer").dxPopup("instance").option("toolbarItems[0].options.icon", "save");
            $("#popupUserDefinitionContainer").dxPopup("instance").option("toolbarItems[0].options.type", "success");
            $("#popupUserDefinitionContainer").dxPopup("instance").option("toolbarItems[1].toolbar", "top");
            $("#popupUserDefinitionContainer").dxPopup("instance").option("toolbarItems[1].options.text", "Kapat");
            $("#popupUserDefinitionContainer").dxPopup("instance").option("toolbarItems[1].options.icon", "close");
            $("#popupUserDefinitionContainer").dxPopup("instance").option("toolbarItems[1].options.type", "default");
            $(".dx-toolbar-before").children().children().children().prepend("<i class='fas fa-user' style='padding-right:6px;'></i>");
            $(".dx-toolbar-before").children().children().children().css("width", "fit-content");
        }
        if (data != null) {
            $("#popupUserDefinitionContainer").dxPopup({
                title: "Kullanıcı Düzenle",
            });

            $("#userDefinitionTc").dxTextBox("instance").option("value", data.TcNo);
            $("#userDefinitionName").dxTextBox("instance").option("value", data.Name);
            $("#userDefinitionSurName").dxTextBox("instance").option("value", data.SurName);
            $("#userDefinitionUserName").dxTextBox("instance").option("value", data.UserName);
            $("#userDefinitionPassword").dxTextBox("instance").option("value", data.Password);
            $("#sbRoleUser").dxSelectBox("instance").option("value", data.RoleHelperId);
            $("#userDefinitionPhoneNumber").dxTextBox("instance").option("value", data.PhoneNumber);
            $("#userDefinitionActiveStatus").dxCheckBox("instance").option("value", data.ActiveStatus);
            $(".dx-toolbar-before").children().children().children().prepend("<i class='fas fa-user' style='padding-right:6px;'></i>");
            $(".dx-toolbar-before").children().children().children().css("width", "fit-content");
        }
    }
    function beforeSendUserDefinition(type, e) {
        if (type == "load") return;
        if (type == "update")
        {
            var TcNo = $("#userDefinitionTc").dxTextBox("instance").option("value");
            var TCControl = TCNOKontrol(TcNo)
            if (TCControl == false) {
                Swal.fire('Tc Kimlik No Formatı Yanlışdır;');
                return;
            }
            var Name = $("#userDefinitionName").dxTextBox("instance").option("value");
            var Surname = $("#userDefinitionSurName").dxTextBox("instance").option("value");
            var UserName = $("#userDefinitionUserName").dxTextBox("instance").option("value");
            var Password = $("#userDefinitionPassword").dxTextBox("instance").option("value");
            var RoleHelperId = $("#sbRoleUser").dxSelectBox("instance").option("value");
            var PhoneNumber = $("#userDefinitionPhoneNumber").dxTextBox("instance").option("value");
            var ActiveStatus = $("#userDefinitionActiveStatus").dxCheckBox("instance").option("value");


            var formData = new FormData();

            formData.append("Id", data.Id);
            formData.append("AddedTime", data.AddedTime);
            formData.append("IsDeleted", data.IsDeleted);
            formData.append("IsActive", data.IsActive);
            formData.append("TcNo", TcNo);
            formData.append("Name", Name);
            formData.append("Surname", Surname);
            formData.append("UserName", UserName);
            formData.append("Password", Password);
            formData.append("RoleHelperId", RoleHelperId);
            formData.append("PhoneNumber", PhoneNumber);
            formData.append("ActiveStatus", ActiveStatus);

            e.data = formData;
            e.contentType = false;
            e.processData = false;
            e.headers = ajaxHeader;
        }
        if (type == "insert")
        {
            var TcNo = $("#userDefinitionTc").dxTextBox("instance").option("value");

            var TCControl = TCNOKontrol(TcNo)
            if (TCControl == false) {
                Swal.fire('Tc Kimlik No Formatı Yanlışdır;');
                return;
            }
            
            var Name = $("#userDefinitionName").dxTextBox("instance").option("value");
            var Surname = $("#userDefinitionSurName").dxTextBox("instance").option("value");
            var UserName = $("#userDefinitionUserName").dxTextBox("instance").option("value");
            var Password = $("#userDefinitionPassword").dxTextBox("instance").option("value");
            var RoleHelperId = $("#sbRoleUser").dxSelectBox("instance").option("value");
            var PhoneNumber = $("#userDefinitionPhoneNumber").dxTextBox("instance").option("value");
            var ActiveStatus = $("#userDefinitionActiveStatus").dxCheckBox("instance").option("value");

            var formData = new FormData();
            formData.append("TcNo", TcNo);
            formData.append("Name", Name);
            formData.append("Surname", Surname);
            formData.append("UserName", UserName);
            formData.append("Password", Password);
            formData.append("RoleHelperId", RoleHelperId);
            formData.append("PhoneNumber", PhoneNumber);
            formData.append("ActiveStatus", ActiveStatus);

            e.data = formData;
            e.contentType = false;
            e.processData = false;
            e.headers = ajaxHeader;
        }
        if (type == "delete")
        {
            var Id = e.data.key;
            @*var ajaxHeader = {};
            ajaxHeader["RequestVerificationToken"] = "@Xsrf.GetAndStoreTokens(Model.HttpContext).RequestToken";*@
            var formData = new FormData();
            formData.append("Id", Id);
            e.data = formData;
            e.contentType = false;
            e.processData = false;
            e.headers = ajaxHeader;
        }
    }
    function userDefinitionGridDataExporting(e){
        let workbook = new ExcelJS.Workbook();
        let worksheet = workbook.addWorksheet('UserDefinition');

        DevExpress.excelExporter.exportDataGrid({
            component: e.component,
            worksheet: worksheet,
            autoFilterEnabled: true
        }).then(function () {
            workbook.xlsx.writeBuffer().then(function (buffer) {
                saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'Tesisler.xlsx');
            });
        });
        e.cancel = true;
    }
    function onCellPreparedUserDefinition(e) {
        if (e.column.type == "buttons") {
            e.cellElement.children().removeClass('dx-icon-edit').addClass("dx-icon-search");
            e.cellElement.children().attr("title", "Detay");
        }
    }


    function TCNOKontrol(TCNO) {
        var tek = 0,
            cift = 0,
            sonuc = 0,
            TCToplam = 0,
            i = 0;

        if (TCNO.length != 11) return false;
        if (isNaN(TCNO)) return false;
        if (TCNO[0] == 0) return false;

        tek = parseInt(TCNO[0]) + parseInt(TCNO[2]) + parseInt(TCNO[4]) + parseInt(TCNO[6]) + parseInt(TCNO[8]);
        cift = parseInt(TCNO[1]) + parseInt(TCNO[3]) + parseInt(TCNO[5]) + parseInt(TCNO[7]);

        tek = tek * 7;
        sonuc = Math.abs(tek - cift);
        if (sonuc % 10 != TCNO[9]) return false;

        for (var i = 0; i < 10; i++) {
            TCToplam += parseInt(TCNO[i]);
        }

        if (TCToplam % 10 != TCNO[10]) return false;

        return true;
    }
</script>

<style>
    .btn-class-dias:hover {
        background-color: #5cb85c;
    }

    .btn-class-dias:hover {
        background-color: #5cb85c;
    }

    .dx-datagrid-column-chooser-button {
        background-color: #337ab7;
    }

    .dx-datagrid-export-button {
        background-color: #337ab7;
    }

    .dx-icon-export-to {
        color: white !important;
    }

    .dx-icon-column-chooser {
        color: white !important;
    }

    .dx-icon-export-excel-button {
        color: white !important;
    }

    .dx-datagrid-export-button.dx-state-hover {
        background-color: #285f8f !important;
        /*color: black !important;*/
    }

    .dx-datagrid-export-button.dx-state-active {
        background-color: #285f8f !important;
        /*color: black !important;*/
    }

    .dx-datagrid-column-chooser-button.dx-state-hover {
        background-color: #285f8f !important;
        /*color: black !important;*/
    }

    .dx-datagrid-column-chooser-button.dx-state-active {
        background-color: #285f8f !important;
        /*color: black !important;*/
    }
    .swal2-container {
        z-index: 10001 !important;
    }
</style>
