@page
@model DIAS.UI.Pages.Definition.SurveyQuestionMatchDefinition.SurveyQuestionMatchDefinitionModel
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@using DIAS_UI.Helpers
@using Newtonsoft.Json;
@using DiasShared.Data.EF_Data.DiasFacilityManagement.SqlServer.DataTransferObjects.Development.Shared.Custom
@using DiasShared.Data.EF_Data.DiasFacilityManagement.SqlServer.DataTransferObjects.Development.Shared.Standard
@{

    var user = SessionHelper.GetObjectFromJson(HttpContext.Session, "user");
    var convertedUser = JsonConvert.DeserializeObject<UserDto>(user);
    var userViewData = convertedUser;

    List<SurveyQuestionDto> surveyQuestionDtos = new List<SurveyQuestionDto>
    {
        new SurveyQuestionDto
        {
        Code="DenemeSoruKodu1",
        QuestionName="DenemeSoru",
        Ad="Dinçer",
        SoyAd="Kalaç",
        AddedTime=DateTime.Now,
        IsActive = true,
        Id=1
        }
    };


}
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/polyfills.umd.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.14/jspdf.plugin.autotable.min.js"></script>
<script src="https://unpkg.com/jspdf@latest/dist/jspdf.umd.min.js"></script>
<script src="https://unpkg.com/jspdf@2.5.1/dist/jspdf.es.min.js"></script>
<script src="https://unpkg.com/jspdf-autotable@3.5.23/dist/jspdf.plugin.autotable.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/exceljs/3.8.0/exceljs.min.js" defer></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.5/FileSaver.min.js" defer></script>
<script src="~/helper/trCharHelper.js"></script>
<script>
    window.jsPDF = window.jspdf.jsPDF;
    applyPlugin(window.jsPDF);
</script>
<div class="card">

    <div class="card-body">

        @(Html.DevExtreme().DataGrid<SurveyQuestionMatchDto>
                ()
                .ID("gridSurveyQuestionMatchDefinition")
                .DataSource(ds => ds.RemoteController()
                .OnBeforeSend("beforeSurveyQuestionMatchDefinition")
                .Key("Id")
                .LoadUrl(Url.Page(null, "GridData"))
                .InsertUrl(Url.Page(null, "GridRow"))
                .UpdateUrl(Url.Page(null, "GridRowUpdate"))
                .DeleteUrl(Url.Page(null, "GridRowDelete"))
                )
                .Export(o => o.Enabled(true).AllowExportSelectedData(true))
                //.Selection(s => s.Mode(SelectionMode.Multiple))
                .OnExporting("surveyQuestionMatchGridDataExporting")
                .ColumnChooser(c => c.Enabled(true).AllowSearch(true).Mode(GridColumnChooserMode.Select))
                .HeaderFilter(o=>o.AllowSearch(true))
                .FilterRow(o => o.Visible(true))
                .Selection(s => s.Mode(SelectionMode.Single))
                .OnSelectionChanged("onSelectionChangedSurveyQuestionMatchDefinition")
                .OnToolbarPreparing("onToolbarPreparingSurveyQuestionMatchDefinition")
                .OnCellPrepared("onCellPreparedSurveyQuestionMatchDefinition")
                .OnContentReady("onContentReadySurveyQuestionMatchDefinition")
                .RemoteOperations(true)
                .ShowBorders(true)
                .Paging(p => p.Enabled(false))
                .Editing(e => e.Mode(GridEditMode.Popup)
                .AllowUpdating(true)
                .AllowDeleting(true)
                .AllowAdding(true)
                .SelectTextOnEditStart(true)
                .UseIcons(true)
                .StartEditAction(GridStartEditAction.DblClick)
                .Popup(p => p
                .Title("Vaka Soru Eşleştirme")
                .ID("popupSurveyQuestionMatchDefinitionContainer")
                .ShowTitle(true)
                .Width(1500)
                .Height(1000)
                .OnShowing("setPopupTitleSurveyQuestionMatchDefinition")
                .ShowCloseButton(false)
                )
                .Form(f => f.Items(items =>
                {
                    items.AddGroup()
                    .Items(groupItems =>
                    {
                        groupItems.AddTabbed()
                    .TabPanelOptions(o =>
                    {
                        o.DeferRendering(false);
                        o.AnimationEnabled(true);
                        o.ID("surveyQuestionMatchDefinitionTab");
                        o.Width(1400);
                        o.AnimationEnabled(true);
                        o.ShowNavButtons(true);
                        o.Height(670);
                    })
                    .Tabs(tabItems =>
                    {
                        tabItems.Add().Icon("fas fa-save").ColCount(3)
                    .Title("Vaka-Soru Eşleştir").Items(item=>

                    {
                    item.AddSimple().Template(new TemplateName("surveyQuestionMatchDefinitionTicketReasonAndStateTemplate")).ColSpan(1);

                    @*item.AddSimpleFor(m => m.TicketReasonId).ColSpan(1)
                        .Label(l => l.Text("Vaka").Visible(true))
                        .Editor(e=>e.DropDownBox()
                    .ID("dropDownSurveyQuestionMatchDefinitionReasonMulti").Disabled(false)
                    .DataSource(d => d.RemoteController().LoadUrl(Url.Page(null, "TicketReasonData")).Key("HierarchyId"))
                    .DeferRendering(true)
                    .ValueExpr("HierarchyId")
                    .DisplayExpr("CategoryName")
                    .DropDownOptions(o => o.Height(350).Width(402))
                    .Placeholder("Vaka Seçiniz")
                    .ShowClearButton(true)
                    .OnValueChanged("treeBoxMulti_valueChanged")
                    .ContentTemplate(
                            @<text>
                                @await Html.PartialAsync("../Definition/SurveyQuestionMatchDefinition/_SurveyQuestionMatchReasonTreeViewMultiple")
                            </text>
                                    ))
                            .ValidationRules(v =>
                            {
                                v.AddRequired().Message("Vaka Boş Geçilemez");
                            });*@

                        item.AddSimple().ColSpan(2)
                        //.Label(l => l.Text("Soru Seti"))
                        .Template(new TemplateName("surveyQuestionMatchDefinitionSurveyQuestionsTemplate"));
                    });

                    });
                    });
                }).ID("SurveyQuestionMatchDefinitionForm")))
                .Columns(columns =>
                {                    
                    columns.AddFor(m => m.TicketReason.ReasonName).Caption("Arama Nedeni").AllowEditing(true);
                    columns.AddFor(m => m.TicketState.Name).Caption("İş Emri Statü").AllowEditing(true);
                    columns.AddFor(m => m.SurveyQuestion.QuestionName).Caption("Soru Seti").AllowEditing(true);
                    columns.AddFor(m => m.IsActive).Caption("Aktif").AllowEditing(true);
                    columns.AddFor(m => m.AddedByUser.FirstName).Caption("Ekleyen Kullanıcı Ad").AllowEditing(true);
                    columns.AddFor(m => m.AddedByUser.LastName).Caption("Ekleyen Kullanıcı Soyad").AllowEditing(true);

                })
                .OnEditingStart(@<text> function(e) {onEditingStartSurveyQuestionMatchDefinition(e) } </text>)
                .OnInitNewRow(@<text> function(e) { onInitNewRowSurveyQuestionMatchDefinition(e); } </text>)

                )
    </div>
</div>


@using (Html.DevExtreme().NamedTemplate("surveyQuestionMatchDefinitionTicketReasonAndStateTemplate"))
{
    <div style="display:flex;">
        <div>
            @(Html.DevExtreme().TreeView()
    .DataSource(d => d.RemoteController().LoadUrl(Url.Page(null, "TicketReasonData")).Key("HierarchyId"))
    .KeyExpr("HierarchyId")
    .DisplayExpr("CategoryName")
    .ParentIdExpr("ParentHierarchy")
    .DataStructure(TreeViewDataStructure.Plain)
    .SelectionMode(NavSelectionMode.Multiple)
    .ShowCheckBoxesMode(TreeViewCheckBoxMode.Normal)
    .SelectNodesRecursive(false)
    .SelectByClick(true)
    .SearchEnabled(true)
    .Height(600)
    .Width(300)
    .OnItemClick(
        @<text>
            function(args) {
                component.close();
            }
        </text>
    )
    .OnItemSelectionChanged(
        @<text>
            function(args) {
                component.option("value", args.component.getSelectedNodeKeys());
            }
        </text>
    )
    .OnContentReady(
        @<text>
            function(args) {
                syncTreeViewSelection(args.component, component.option("value"));
            }
        </text>
    )
)

        </div>
        <div>
            @(Html.DevExtreme().List()
            .ID("tabTicketHistoryGridTemplateList")
            .Height(400)
            .ShowSelectionControls(true)
            .SelectionMode(ListSelectionMode.All)
            .DataSource(d => d.RemoteController().LoadUrl(Url.Page(null, "TicketStateData")).Key("Id"))
            .DisplayExpr("Name")
            .Width(200)
            .ItemTemplate(@<text><%- Name %></text>)
            .OnSelectionChanged("onSelectionChangedTabTicketHistoryGridTemplate")
        )
        </div>
    </div>
}
@using (Html.DevExtreme().NamedTemplate("surveyQuestionMatchDefinitionSurveyQuestionsTemplate"))
{
<div style="float: right;">
    @(Html.DevExtreme().DataGrid<SurveyQuestionDto>().ID("surveyQuestionMatchDefinitionSurveyQuestionsTemplateGrid")
            .LoadPanel(panel => panel.Enabled(true))
            .ShowColumnLines(false)
            .ShowRowLines(true)
            .Selection(s => s.Mode(SelectionMode.Multiple))
            .ShowBorders(true)
            .HeaderFilter(o => o.AllowSearch(true))
            .FilterRow(o => o.Visible(true))
            .RenderAsync(true)            
            .DataSource(surveyQuestionDtos, "Id")
            .Width(800)
            .Paging(paging => paging.Enabled(true).PageSize(6))
            .RemoteOperations(true)
            .Columns(columns => {

                columns.AddFor(x => x.Code).Visible(true).Caption("Soru Kodu").Alignment(HorizontalAlignment.Left);
                columns.AddFor(x => x.QuestionName).Visible(true).Caption("İsmi").Alignment(HorizontalAlignment.Left);
                columns.AddFor(x => x.Ad).Visible(true).Caption("Ekleyen Kullanıcı Ad").Alignment(HorizontalAlignment.Left);
                columns.AddFor(x => x.SoyAd).Visible(true).Caption("Ekleyen Kullanıcı Soyad").Alignment(HorizontalAlignment.Left);
                columns.AddFor(x => x.AddedTime).Visible(true).Caption("Eklne Tarihi").Alignment(HorizontalAlignment.Left);
                columns.AddFor(x => x.IsActive).Visible(true).Caption("Aktif").Alignment(HorizontalAlignment.Left);
            })
        )
</div>
}



<script type="text/javascript">
        var data;
    var SurveyQuestionMatchDefinitionDataGrid;
        const pdfOptionsOfSurveyQuestionStateDefinition = [
            { Id: 1, name: 'Tüm Verileri Dışarı Aktar' },
            { Id: 2, name: 'Seçili Satırı Dışa Aktar' }
        ];
    function onEditingStartSurveyQuestionMatchDefinition(e) {
            data = e.data;
        }
    function onInitNewRowSurveyQuestionMatchDefinition(e) {
            data = null;
        }
    function onToolbarPreparingSurveyQuestionMatchDefinition(e) {
            e.toolbarOptions.items.forEach((value, index, array) => {
                if (value.name == "addRowButton") {
                    e.toolbarOptions.items[0].showText = "always";
                    e.toolbarOptions.items[0].options.text = "Yeni";
                    e.toolbarOptions.items[0].options.icon = "plus";
                    e.toolbarOptions.items[0].options.type = "success";
                }
            });
        }
    function onSelectionChangedSurveyQuestionMatchDefinition(data) {
            let rowData = data.selectedRowsData[0];
            if (!rowData)
                return;
            dataRow = rowData;
        }
    function setPopupTitleSurveyQuestionMatchDefinition(e) {
            if (data == null) {
                $("#popupSurveyQuestionMatchDefinitionContainer").dxPopup("instance").option("height", "90%");
                $("#popupSurveyQuestionMatchDefinitionContainer").dxPopup("instance").option("toolbarItems[0].toolbar", "top");
                $("#popupSurveyQuestionMatchDefinitionContainer").dxPopup("instance").option("toolbarItems[0].options.icon", "save");
                $("#popupSurveyQuestionMatchDefinitionContainer").dxPopup("instance").option("toolbarItems[0].options.type", "success");
                $("#popupSurveyQuestionMatchDefinitionContainer").dxPopup("instance").option("toolbarItems[1].toolbar", "top");
                $("#popupSurveyQuestionMatchDefinitionContainer").dxPopup("instance").option("toolbarItems[1].options.text", "Kapat");
                $("#popupSurveyQuestionMatchDefinitionContainer").dxPopup("instance").option("toolbarItems[1].options.icon", "close");
                $("#popupSurveyQuestionMatchDefinitionContainer").dxPopup("instance").option("toolbarItems[1].options.type", "default");
                $(".dx-toolbar-before").children().css("width", "206");
                $(".dx-toolbar-before").children().children().children().prepend("<i class='fas fa-check-double' style='padding-right:6px;'></i>");

            }
            if (data != null) {
                $("#popupSurveyQuestionMatchDefinitionContainer").dxPopup({
                    title: "Vaka Soru Eşleştirme Düzenle",
                });
                $("#popupSurveyQuestionMatchDefinitionContainer").dxPopup("instance").option("height", "40%");
                $("#popupSurveyQuestionMatchDefinitionContainer").dxPopup("instance").option("toolbarItems[0].toolbar", "top");
                $("#popupSurveyQuestionMatchDefinitionContainer").dxPopup("instance").option("toolbarItems[0].options.icon", "save");
                $("#popupSurveyQuestionMatchDefinitionContainer").dxPopup("instance").option("toolbarItems[0].options.type", "success");
                $("#popupSurveyQuestionMatchDefinitionContainer").dxPopup("instance").option("toolbarItems[1].toolbar", "top");
                $("#popupSurveyQuestionMatchDefinitionContainer").dxPopup("instance").option("toolbarItems[1].options.text", "Kapat");
                $("#popupSurveyQuestionMatchDefinitionContainer").dxPopup("instance").option("toolbarItems[1].options.icon", "close");
                $("#popupSurveyQuestionMatchDefinitionContainer").dxPopup("instance").option("toolbarItems[1].options.type", "default");
                $(".dx-toolbar-before").children().css("width", "206");
                $(".dx-toolbar-before").children().children().children().prepend("<i class='fas fa-check-double' style='padding-right:6px;'></i>");


            }
        }
    function beforeSurveyQuestionMatchDefinition(type, e) {
            if (type == "load") return;
            if (type == "update") {
                var ajaxHeader = {};
                ajaxHeader["RequestVerificationToken"] = "@Xsrf.GetAndStoreTokens(Model.HttpContext).RequestToken";

                var Name = $("#SurveyQuestionDefinitionName").dxTextBox("instance").option("value");
                var SurveyQuestionCode = $("#SurveyQuestionDefinitionCode").dxTextBox("instance").option("value");
                var Adress = $("#SurveyQuestionDefinitionAdress").dxTextArea("instance").option("value");

                var formData = new FormData();
                formData.append("Id", data.Id);
                formData.append("AddedTime", data.AddedTime);
                formData.append("IsDeleted", data.IsDeleted);
                formData.append("IsActive", data.IsActive);
                formData.append("Name", Name);
                formData.append("SurveyQuestionCode", SurveyQuestionCode);
                formData.append("Address", Adress);
                formData.append("AddedByUserId", data.AddedByUserId);
                formData.append("LastModifiedByUserId", @userViewData.Id);
                e.data = formData;
                e.contentType = false;
                e.processData = false;
                e.headers = ajaxHeader;
            }
            if (type == "insert") {
                var ajaxHeader = {};
                ajaxHeader["RequestVerificationToken"] = "@Xsrf.GetAndStoreTokens(Model.HttpContext).RequestToken";
                var Name = $("#SurveyQuestionDefinitionName").dxTextBox("instance").option("value");
                var SurveyQuestionCode = $("#SurveyQuestionDefinitionCode").dxTextBox("instance").option("value");
                var Adress = $("#SurveyQuestionDefinitionAdress").dxTextArea("instance").option("value");
                var formData = new FormData();
                formData.append("Name", Name);
                formData.append("SurveyQuestionCode", SurveyQuestionCode);
                formData.append("Address", Adress);
                formData.append("AddedByUserId", @userViewData.Id);
                e.data = formData;
                e.contentType = false;
                e.processData = false;
                e.headers = ajaxHeader;
            }
            if (type == "delete") {
                var Id = e.data.key;
                var ajaxHeader = {};
                ajaxHeader["RequestVerificationToken"] = "@Xsrf.GetAndStoreTokens(Model.HttpContext).RequestToken";
                var formData = new FormData();
                formData.append("Id", Id);
                e.data = formData;
                e.contentType = false;
                e.processData = false;
                e.headers = ajaxHeader;
            }
        }
    function surveyQuestionMatchGridDataExporting(e) {
            let workbook = new ExcelJS.Workbook();
            let worksheet = workbook.addWorksheet('Tesis');

            DevExpress.excelExporter.exportDataGrid({
                component: e.component,
                worksheet: worksheet,
                autoFilterEnabled: true
            }).then(function () {
                workbook.xlsx.writeBuffer().then(function (buffer) {
                    saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'Tesisler.xlsx');
                });
            });
            e.cancel = true;
        }
    function onCellPreparedSurveyQuestionMatchDefinition(e) {
            if (e.column.type == "buttons") {
                e.cellElement.children().removeClass('dx-icon-edit').addClass("dx-icon-search");
                e.cellElement.children().attr("title", "Detay");
            }
        }
    function onContentReadySurveyQuestionMatchDefinition(e) {
            SurveyQuestionDefinitionDataGrid = e.component;
            e.component.deselectRows(e.component.getSelectedRowKeys());
            var toolbar = e.element.find('.dx-datagrid-header-panel .dx-toolbar').dxToolbar('instance');
            addSurveyQuestionMatchDefinitionCustomItemPdfButton(toolbar);
        }
    function addSurveyQuestionMatchDefinitionCustomItemPdfButton(toolbar) {
            var items = toolbar.option('items');
            var myItem = DevExpress.data.query(items).filter(function (item) {
                return item.name == 'btn_pdf_SurveyQuestionMatchDefinition';
            }).toArray();
            if (!myItem.length) {
                items.push({
                    id: 'btn_pdf_SurveyQuestionMatchDefinition',
                    location: 'after',
                    widget: 'dxDropDownButton',
                    name: 'btn_pdf_SurveyQuestionMatchDefinition',
                    options: {
                        text: 'Pdf',
                        icon: 'save',
                        displayExpr: 'name',
                        keyExpr: 'Id',
                        elementAttr: {
                            id: "btn_pdf_SurveyQuestionMatchDefinitionId",
                            class: "dpbColor"
                        },
                        dropDownOptions: {
                            width: 230,
                        },
                        onItemClick: exportToPDF,
                        items: pdfOptionsOfSurveyQuestionStateDefinition,
                    },
                });
                toolbar.option('items', items);
            }
        }
        function exportToPDF(e) {
            const pdfDoc = new jsPDF('l');
            pdfDoc.addFileToVFS('NotoSerif-Regular-normal.ttf', myFont);
            pdfDoc.addFont('NotoSerif-Regular-normal.ttf', 'NotoSerif-Regular', 'normal');
            pdfDoc.setFont("NotoSerif-Regular");
            if (e.itemData.Id == 1) {
                const options = {
                    jsPDFDocument: pdfDoc,
                    component: SurveyQuestionDefinitionDataGrid,
                    autoTableOptions: {
                        rowPageBreak: 'auto',
                        bodyStyles: { valign: 'top' },
                        styles: {
                            font: 'NotoSerif-Regular'
                        }
                    }
                };
                DevExpress.pdfExporter.exportDataGrid(options).then(() => {
                    pdfDoc.setFontSize(5);
                }).then(() => {
                    pdfDoc.save('filePDF.pdf');
                });
            }
            if (e.itemData.Id == 2) {
                const options = {
                    jsPDFDocument: pdfDoc,
                    component: SurveyQuestionDefinitionDataGrid,
                    autoTableOptions: {
                        rowPageBreak: 'auto',
                        bodyStyles: { valign: 'top' },
                        styles: {
                            font: 'NotoSerif-Regular'
                        }
                    },
                    selectedRowsOnly: true
                };
                DevExpress.pdfExporter.exportDataGrid(options).then(() => {
                    pdfDoc.setFontSize(5);
                }).then(() => {
                    pdfDoc.save('filePDF.pdf');
                });
            }
    }

    function treeBoxMulti_valueChanged(e) {
        if (e.component.content() == null)
            return;
        var $treeView = e.component.content().find(".dx-treeview");
        if ($treeView.length) {
            syncTreeViewSelection($treeView.dxTreeView("instance"), e.value);
        }
    }

    function syncTreeViewSelection(treeView, value) {
        if (!value) {
            treeView.unselectAll();
        } else {
            treeView.selectItem(value);
        }
    }

    function onSelectionChangedTabTicketHistoryGridTemplate(e) {

    }
</script>

<style>

    .dpbColor {
        background-color: #337ab7;
        border-radius: 4px;
    }

    .btn-class-dias:hover {
        background-color: #5cb85c;
    }

    .dx-datagrid-text-content {
        color: black;
        font-weight: 700;
    }

    .dx-datagrid-export-button {
        background-color: #337ab7;
    }

    /*bu ve altındaki css özelliği yazıların ve ikonların beyaz olmasını sağlamaktadır.*/
    .dx-button-mode-outlined {
        background-color: transparent;
        border-color: #ddd;
        color: white;
    }

        .dx-button-mode-outlined .dx-icon {
            color: white;
        }

    .dx-icon-export-to {
        color: white !important;
    }

    .dx-icon-export-excel-button {
        color: white !important;
    }


    .dx-datagrid-export-button.dx-state-hover {
        background-color: #285f8f !important;
    }

    .dx-datagrid-export-button.dx-state-active {
        background-color: #285f8f !important;
    }


    .dx-datagrid-column-chooser-button {
        background-color: #337ab7;
    }

    .dx-icon-column-chooser {
        color: white !important;
    }

    .dx-datagrid-column-chooser-button.dx-state-hover {
        background-color: #285f8f !important;
    }

    .dx-datagrid-column-chooser-button.dx-state-active {
        background-color: #285f8f !important;
    }
</style>
