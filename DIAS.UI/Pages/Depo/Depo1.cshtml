@page
@*
    @using DIAS.Domain.Models
    @using System.Security.Claims
    @using Microsoft.AspNetCore.Authorization
    @inject IAuthorizationService AuthorizationService

    @{
        var webApiUrl = Configuration.GetValue<string>("WebApiUrl");

        var userIdentity = (ClaimsIdentity)User.Identity;
        var claims = userIdentity.Claims;

        var userId = claims.FirstOrDefault(c => c.Type == "UserId")?.Value;
        var roles = claims.Where(c => c.Type == ClaimTypes.Role).ToList();

        bool kontrol = false;

        if (HttpContext.User.IsInRole("Admin"))
            kontrol = true;

        if (AuthorizationService.AuthorizeAsync(User, "RoleBasedClaim").Result.Succeeded)
            kontrol = false;

        //string returnAddress = HttpContext.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role)?.Value;
        //List<Claim> userClaims = HttpContext.User.Claims.Where(c => c.Type == this.GetType().Name).ToList();
    }
    <script src="~/js/pages/depo/depo1.js"></script>

    <p class="content-block dx-card responsive-paddings">
        Warehouse Operations Add / Edit / Delete / Update
    </p>

    <div class="content-block dx-card responsive-paddings">
        <div class="frm-title">
            <h3>Warehouse Operations</h3>
        </div>

        <div class="btn-group">

            @if (kontrol)
            {
                @(Html.DevExtreme().Button().Hint("New Record").Text("New")
                    .Icon("fas fa-plus-square")
                    .Type(ButtonType.Success)
                    .OnClick("Depo1.createWarehouse")
                )
            }
            @(Html.DevExtreme().Button().Hint("Delete Record").Text("Delete")
                .Icon("fas fa-trash-alt")
                .Type(ButtonType.Danger)
                .OnClick("Depo1.deleteWarehouse")
            )

        </div>

        @(Html.DevExtreme().Form().ID("frmWarehouseOperations").ColCount(4).Items(items =>
        {

            items.AddSimple().ColSpan(2).Label(l => l.Text("Warehouse")).DataField("WarehouseId")
                .Editor(e => e.Lookup().ID("lookUpWarehouse").OnValueChanged("Depo1.lookUpWarehouseOnValueChanged").SearchMode(DropDownSearchMode.Contains).DataSource(d => d.RemoteController()
                .LoadUrl(webApiUrl + "api/warehouses/getwarehouses")
                .LoadMode(DataSourceLoadMode.Raw)
                .OnBeforeSend("Depo1.beforeSend")
                .Key("WarehouseId"))
                .DisplayExpr("WarehouseName")
                .ValueExpr("WarehouseId")
                .SearchExpr("WarehouseName", "WarehouseCode")
                .SearchEnabled(true)
                .Placeholder("")
                .MinSearchLength(3)
                .ShowClearButton(true)
                .ShowCancelButton(true)
                .ShowDataBeforeSearch(true)
                )
                .HelpText("Min. 3 Character for Warehouse Search");

        }))
        @(Html.DevExtreme().DataGrid<Warehouse>().ID("grid")
            .DataSource(d => d.RemoteController().Key("WarehouseId"))
            .Editing(e => e.Mode(GridEditMode.Popup).RefreshMode(GridEditRefreshMode.Repaint))
            .Paging(paging => paging.PageSize(5))
            .Pager(pager => pager.ShowNavigationButtons(true).ShowInfo(true).ShowPageSizeSelector(true))
            .Selection(s => s.Mode(SelectionMode.Single))
            .Height("auto")
            .ShowBorders(true)
            .ShowColumnLines(true)
            .ShowRowLines(true)
            .OnSelectionChanged("Depo1.selectRow")
            //.Export(e => e.FileName("BinaInf"))
            .OnContentReady("Depo1.selectFirstRow")
            .ColumnChooser(e => e.Enabled(true))
            .Columns(columns => {

            columns.Add()
                .DataField("WarehouseId").Caption("Warehouse ID").Alignment(HorizontalAlignment.Left).Visible(false);
            columns.Add()
                .DataField("WarehouseCode").Caption("Warehouse Code").Alignment(HorizontalAlignment.Left);
            columns.Add()
                .DataField("WarehouseName").Caption("Warehouse Name").Alignment(HorizontalAlignment.Left);
            columns.Add().Caption("Details").Width(75).Type(GridCommandColumnType.Buttons).Buttons(btns =>
            {
                btns.Add().Name("grdWarehouseDetails").Icon("fas fa-info-circle").OnClick("Depo1.gridDetailsOnClick").Hint("Warehouse Details");
            });

        })
        )
    </div>

    @(Html.DevExtreme().Popup()
            .ID("details-form-popup")
            .Visible(false)
            .Width(750)
            .Height("auto")
            .ShowTitle(false)
            .ShowCloseButton(false)
            .ContentTemplate(@<text>
            <div id="edit">
                <div class="edit-label" id="grid-details-label"></div>
                @(Html.DevExtreme().Form<Warehouse>()
                        .ID("details-form")
                        .ShowColonAfterLabel(false)
                        .ShowValidationSummary(true)
                        .LabelLocation(FormLabelLocation.Left)
                        .Height(290)
                        //.ScreenByWidth("Depo1.screenByWidth")
                        .Items(items => {
                            items.AddGroup().ColCount(2)
                                .Items(groupItems => {
                                    groupItems.AddSimpleFor(m => m.Id)
                                        .Label(l => l.Text("Warehouse ID").Alignment(HorizontalAlignment.Left))
                                        .Editor(e => e.TextBox().ReadOnly(true).Height(30)
                                        ).HelpText("Leave it Empty").ColSpan(2);

                                    groupItems.AddSimpleFor(m => m.WarehouseCode)
                                        .Label(l => l.Text("Warehouse Code").Alignment(HorizontalAlignment.Left))
                                        .Editor(e => e.TextBox().Height(30)
                                        );

                                    groupItems.AddSimpleFor(m => m.WarehouseName)
                                        .Label(l => l.Text("Warehouse Name").Alignment(HorizontalAlignment.Left))
                                        .Editor(e => e.TextBox().Height(30)
                                        );

                                });
                        })
                )
                <div class="btn-group">
                    @(Html.DevExtreme().Button()
                            .Text("Save")
                            .Type(ButtonType.Default)
                            .Icon("fas fa-save")
                            .OnClick("Depo1.saveWarehouse")
                    )
                    @(Html.DevExtreme().Button()
                            .Text("Cancel")
                            .Icon("fas fa-window-close")
                            .OnClick("Depo1.hideDetailsPopup")
                    )
                </div>
            </div>
            </text>)
        )
    <style>

        .dxbButton_MaterialCompact.dxbTSys {
            text-transform: none;
        }

        #frmWarehouseOperations {
            padding: 20px;
        }

        .frm-grid {
            padding: 20px;
        }

        .content-block {
            padding: 10px;
            margin-top: 5px;
            margin-left: 5px;
            margin-right: 5px;
            border-color: lightgray;
        }

        .frm-title h3 {
            font-family: 'Segoe UI Light', 'Helvetica Neue Light', 'Segoe UI', 'Helvetica Neue', 'Trebuchet MS', Verdana;
            font-weight: 300;
            font-size: 28px;
            text-align: center;
            margin-bottom: 10px;
            margin-top: 10px;
        }

        .frm-title-detail h3 {
            font-family: 'Segoe UI Light', 'Helvetica Neue Light', 'Segoe UI', 'Helvetica Neue', 'Trebuchet MS', Verdana;
            font-weight: 300;
            font-size: 22px;
            text-align: left;
            padding-left: 20px;
        }

        .btn-group {
            display: block;
            text-align: right;
            margin-right: 20px;
        }
    </style>*@