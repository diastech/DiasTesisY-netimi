@(Html.DevExtreme().TreeView()
    .ID("reasonTreeViewSingle")
    .DataSource(new JS(@"component.getDataSource()"))
    .KeyExpr("HierarchyId")
    .DisplayExpr("CategoryName")
    .ParentIdExpr("ParentHierarchy")
    .ExpandNodesRecursive(true)
    .DataStructure(TreeViewDataStructure.Plain)
    .SelectionMode(NavSelectionMode.Single)
    .SelectNodesRecursive(false)
    .SelectByClick(true)
    .SearchEnabled(true)
    .Height(300)
    .OnItemClick(
        @<text>
            function(args) {
                if(args.itemData.IsReason == false){
                    return;
                    }
                    else{
                    component.close();
                    }
            }
        </text>
    )
    .OnItemSelectionChanged(
        @<text>
            function(args) {
                if(args.itemData.IsReason == false)
                    return;
                component.option("value", args.component.getSelectedNodeKeys());
            }
        </text>
    )
    .OnContentReady(
        @<text>
            function(args) {
                @*var mask = new RegExp('^[a-zA-ZğüşöçİĞÜŞÖÇ]+$');
                $("input").regexMask(mask);*@
                syncTreeViewSelection(args.component, component.option("value"));
            }
        </text>
    )
)

@*<script type="text/javascript">
    $.fn.regexMask = function (mask) {
        $(this).keypress(function (event) {
            if (!event.charCode) return true;
            var part1 = this.value.substring(0, this.selectionStart);
            var part2 = this.value.substring(this.selectionEnd, this.value.length);
            if (!mask.test(part1 + String.fromCharCode(event.charCode) + part2))
                return false;
        });
    };
</script>*@