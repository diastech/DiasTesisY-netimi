@page
@using static DiasShared.Enums.Standart.TicketEnums
@using DiasShared.Data.EF_Data.DiasFacilityManagement.SqlServer.DataTransferObjects.Development.Shared.Custom
@*@model DiasShared.Data.EF_Data.DiasFacilityManagement.SqlServer.DataTransferObjects.Development.Shared.Custom.CustomTicketDto*@
@model DIAS.UI.Pages.TicketWrapper.CustomTicketDto
@{
    <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-polyfill/7.10.1/polyfill.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/exceljs/3.8.0/exceljs.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.5/FileSaver.min.js"></script>
    <script src="https://unpkg.com/devextreme-aspnet-data/js/dx.aspnet.data.js"></script>

    var priority = new object[] {
        new {
            ID = 1,
            Text = "Kritik",
        },
        new {
            ID = 2,
            Text = "Yüksek Öncelikli",
        },
        new {
            ID = 3,
            Text = "Normal",
        },
        new {
            ID = 4,
            Text = "Düşük Öncelikli",
        }
    };
}

<script src="~/js/pages/ticket/tickets.js"></script>
<script src="~/js/pages/shared/reason.js"></script>
<script src="~/js/pages/shared/location.js"></script>

<div id="accordion">
    <div class="card">
        <div class="card-header" id="headingOne">
            <h5 class="mb-0">
                <button class="btn btn-link" data-toggle="collapse" data-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                    Filtre
                </button>
            </h5>
        </div>

        @*<div id="collapseOne" class="collapse show" aria-labelledby="headingOne" data-parent="#accordion">
                <div class="card-body">
                    @(Html.DevExtreme().Form().ID("#frmTicket").ColCount(3).ShowColonAfterLabel(false).Items(items =>
                {
                items.AddSimple().ColSpan(2).Label(l => l.Text("Arama Nedeni"))
                    .Template(new TemplateName("dropDownFilterReasonTemplate"));

                    items.AddSimple().ColSpan(2).Label(l => l.Text("Ticket Durumu"))
                    .Template(new TemplateName("selectBoxFilterTicketStateTemplate"));

                    items.AddSimple().ColSpan(2).Label(l => l.Text("Mahal"))
                    .Template(new TemplateName("dropDownFilterLocationTemplate"));

                    items.AddSimple().ColSpan(2).Label(l => l.Text("Öncelik"))
                    .Template(new TemplateName("selectBoxFilterPriorityTemplate"));

                    items.AddSimple().ColSpan(2).Label(l => l.Text("Sorumlu Kişi"))
                    .Template(new TemplateName("selectBoxFilterTicketUserTemplate"));

                    items.AddSimple().Label(l => l.Text("Açıklama")).Editor(e => e.TextBox().ID("textDescription").ShowClearButton(true));
                    //items.AddSimple()
                    //    .Template();
                    items.AddButton()
                        .ButtonOptions(a => a.Text("Ara")
                        .Height(40)
                        .Width(180)
                        .ID("ticketSearch")
                        .Icon("fas fa-search")
                        .Type(ButtonType.Default)
                        .OnClick("Tickets.btn_ticketFindClick")
                        .UseSubmitBehavior(true)
                        .Template(@<text>
                                    <div id="widget"></div>
                                    <i class="dx-icon fas fa-search"></i>
                                    <span class="dx-button-text"><%- text %></span>
                                </text>)
                                .Hint("Kayıtları Filtrele"))
                            .HorizontalAlignment(HorizontalAlignment.Right);
                    }))
                </div>
            </div>*@
    </div>
    <div class="card">
        <div class="card-header" id="headingTwo">
            <h5 class="mb-0">
                <button class="btn btn-link collapsed" data-toggle="collapse" data-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
                    Liste
                </button>
            </h5>
        </div>
        <div id="collapseTwo" class="collapse" aria-labelledby="headingTwo" data-parent="#accordion">
            <div class="card-body">
                <div class="btn-group">
                    @(Html.DevExtreme().Button().ID("btn_refresh")
        .Hint("Yenile")
        .Template(
            @<text>
	                <i class="dx-icon fas fa-redo">
                    </i>
                    <span class="dx-button-text" id="timer"></span>
            </text>)
        .Type(ButtonType.Normal)
        .OnClick("Tickets.btn_refreshGridClick")
    )

                </div>
                @(Html.DevExtreme().DataGrid<CustomTicketDto>()
            .ID("gridTicket")
            .DataSource(ds => ds.RemoteController().Key("Id").OnBeforeSend("beforeSend")
            .OnLoaded(@<text> function(e) { OnLoadedGrid(e); } </text>)
            .LoadUrl(Url.Page(null, "GridData"))
            //.InsertUrl("http://localhost:33400/ticketwrapper/Insert")
        ).DataSourceOptions(o=>o.PageSize(1))
            .RemoteOperations(o=>o.GroupPaging(true))
            .ShowBorders(true)
            .Paging(p => p.Enabled(false))

        .Columns(columns =>
        {
            columns.Add()
               .Caption("")
               .AllowSearch(false)
               .AllowSorting(false)
               .Alignment(HorizontalAlignment.Center)
               .CellTemplate(new JS("Tickets.cellTemplate_CurrentStatus"))
               .Width(41);
            columns.AddFor(m => m.TicketReason.ReasonName).Caption("Arama Sebebi").AllowEditing(true);
            columns.AddFor(m => m.TicketStatusId).Caption("İş Emri Durumu")
            .Lookup(lookup => lookup
            .DataSource(Html.GetEnumSelectList<TicketStatusEnum>().Select(i => new { Value = int.Parse(i.Value), Text = i.Text }))
            .ValueExpr("Value")
            .DisplayExpr("Text")
        );
            columns.AddFor(m => m.AddedByUserId).AllowEditing(true);
            columns.AddFor(y => y.TicketRelatedLocations).Caption("Lokasyon").AllowEditing(true);
            columns.AddFor(y => y.TicketPriorityId).Caption("Öncelik").AllowEditing(true)
            .Lookup(l => l.DataSource(Html.GetEnumSelectList<PriorityEnum>().Select(i => new { Value = int.Parse(i.Value), Text = i.Text }))
                .ValueExpr("Value")
                .DisplayExpr("Text"));
            columns.AddFor(y => y.TickedAssignedAssignmentGroup.GroupName).Caption("Sorumlu Grup").AllowEditing(true);
            columns.AddFor(y => y.TicketReportedUserId).Caption("Sorumlu Kişi").AllowEditing(true);
            columns.AddFor(y => y.TicketAssignedUserId).AllowEditing(true).HidingPriority(0);
            columns.AddFor(m => m.TicketDescription).AllowEditing(true).HidingPriority(0);

            columns.Add()
                  .Caption("Kalan Süre")
                  .AllowSearch(false)
                  .AllowFiltering(false)
                  .AllowGrouping(false)
                  .AllowHeaderFiltering(false)
                  .AllowHiding(false)
                  .AllowReordering(false)
                  .AllowResizing(false)
                  .Alignment(HorizontalAlignment.Left)
                  .CellTemplate(new JS("Tickets.cellTemplate_TimeRemaining"))
                  .Width(140);
        })
        .OnSelectionChanged("Tickets.grd_selectionChanged")
        .OnRowPrepared("Tickets.grd_onRowPrepared")//önceliğine göre grid renklerini ayarlama
        .OnContentReady("Tickets.grd_onContentReady")
        .OnEditingStart(@<text> function(e) {onEditingStart(e) } </text>)
        .OnInitNewRow(@<text> function(e) { OnInitNewRow(e); } </text>)


        .MasterDetail(md => md
        .Enabled(true)
        .Template(@<text>

            @(Html.DevExtreme().DataGrid<CustomTicketDto>()
            .ColumnAutoWidth(true)
            .ShowBorders(true)
            .RemoteOperations(true)
            .Columns(column =>
            {
                column.AddFor(m => m.TicketRelatedLocations).Caption("Lokasyon");
                column.AddFor(m => m.TicketReason.ReasonName).Caption("Arama Sebebi");
                column.AddFor(m => m.TickedAssignedAssignmentGroup.GroupName).Caption("Sorumlu Gurup");
            })
            .DataSource(d => d.RemoteController()
            .Key("id")
            .LoadUrl("https://localhost:44376/api/v1/ticket/GetTicketVwById")
            .LoadParams(new { ticketId = new JS("data.id") })
            )

            )

        </text>)
    )
    )
            </div>
        </div>
    </div>

</div>



@using (Html.DevExtreme().NamedTemplate("selectBoxFilterTicketStateTemplate"))
{
    @(Html.DevExtreme()
    .SelectBox()
    .ID("sbTicketState")
    .DataSource(d => d.RemoteController()
    .Key("id")
    .LoadUrl("https://localhost:44376/api/v1/ticketstate/GetAllTicketStates")
    )
    .ValueExpr("id")
    .DisplayExpr("ticketStateDescription")
    .ShowClearButton(true)
)

}

@using (Html.DevExtreme().NamedTemplate("dropDownFilterLocationTemplate"))
{
    @(Html.DevExtreme()
    .DropDownBox()
    .ID("dropDownLocation")
    .DataSource(d => d.RemoteController()
    .Key("id")
    .LoadUrl("https://localhost:44376/api/v1/location/GetAllLocations")
    )
    .ValueExpr("locationHierarchy")
    .DisplayExpr("locationName")
    .DropDownOptions(o => o.Height(350))
    .Placeholder("Lütfen Seçiniz..")
    .ShowClearButton(true)
    .OnValueChanged("Location.treeBox_valueChanged")
    .ContentTemplate(
        @<text>
            @await Html.PartialAsync("_LocationTreeViewMultiple")
        </text>
    )
)

}

@using (Html.DevExtreme().NamedTemplate("selectBoxFilterPriorityTemplate"))
{
    @(Html.DevExtreme()
    .SelectBox()
    .ID("sbPriority")
    .DataSource(Html.GetEnumSelectList<PriorityEnum>().Select(i => new { Value = int.Parse(i.Value), Text = i.Text }))
    .ValueExpr("ID")
    .DisplayExpr("Text")
    .ShowClearButton(true)
)
}

@using (Html.DevExtreme().NamedTemplate("selectBoxFilterTicketUserTemplate"))
{
    @(Html.DevExtreme()
    .SelectBox()
    .ID("sbTicketUser")
    .DataSource(d => d.RemoteController()
    .Key("Id")
    //.LoadUrl("https://localhost:44376/api/user/GetUsers")
    )

    .DeferRendering(false)
    .ValueExpr("Id")
    .DisplayExpr(new JS("Shared.sbTicketUserDiplayExpr"))
    .ShowClearButton(true)
    .SearchEnabled(true)
    .SearchExpr("FirstName", "LastName", "UserName", "Email")
)
}
<!-- #endregion -->


@using (Html.DevExtreme().NamedTemplate("EmbeddedTreeViewSingle"))
{
    @(Html.DevExtreme().TreeView()
    .ID("reasonTreeViewSingle")
    .DataSource(new JS(@"component.getDataSource()"))
    .KeyExpr("reasonCategoryHierarchy")
    .DisplayExpr("reasonCategoryName")
    .ParentIdExpr("reasonCategoryParentId")
    //.DisabledExpr("isDisabled")
    .ExpandNodesRecursive(true)
    .DataStructure(TreeViewDataStructure.Plain)
    .SelectionMode(NavSelectionMode.Single)
    //.ShowCheckBoxesMode(TreeViewCheckBoxMode.None)
    .SelectNodesRecursive(false)
    .SelectByClick(true)
    .SearchEnabled(true)
    .Height(300)
    //TODO çoklu seçildiğinde otomatik kapnmıyorum
    .OnItemClick(
        @<text>
            function(args) {
                if(args.itemData.isDisabled)
                    return;
                component.close();
            }
        </text>
    )
    .OnItemSelectionChanged(
        @<text>
            function(args) {
                component.option("value", args.component.getSelectedNodeKeys());
            }
        </text>
    )
    .OnContentReady(
        @<text>
            function(args) {
                Reason.syncTreeViewSelection(args.component, component.option("value"));
            }
        </text>
    )
)
}


<script type="text/javascript">
    var data;

    //row u editlemek istediğimizde
    function onEditingStart(e) {

        data = e.data;
    }
    //yeni bir row eklemek istediğimizde
    function OnInitNewRow(e) {

        data = null;
    }

    function selection_changed(selectedItems) {
    }

    function valueChangeUser(selectedItems) {        
    }


    //title açıldığında
    function setPopupTitle(e) {
        if (data != null) {            
            $("#popupContainer").dxPopup({
                title: "Ticket Düzenle",
            });
            labelText = `Ticket: #${data.TicketViewObj.id}`;
            data.TicketViewObj.responsibleUserId = "1";
            $("#dropDownReasonSingle").dxDropDownBox("instance").option("value", String(data.Ticket.TicketReasonId));
            $("#dropDownReasonSingle").dxDropDownBox("instance").option("disabled", true);

            $("#dropDownLocationSingle").dxDropDownBox("instance").option("value", data.Location.Id);
            $("#dropDownLocationSingle").dxDropDownBox("instance").option("disabled", true);

            $("#sbTicketPriority").dxSelectBox("instance").option("disabled", true);

            $("#sbTicketOwner").dxSelectBox("instance").option("value", data.Ticket.AddedByUserId);
            $("#sbTicketOwner").dxSelectBox("instance").option("disabled", true);

            $("#sbAsgGroup").dxSelectBox("instance").option("value", data.Ticket.TickedAssignedAssignmentGroupId);
            $("#sbAsgGroup").dxSelectBox("instance").option("disabled", true);

            $("#sbAsgGroupEmp").dxSelectBox("instance").option("value", data.Ticket.TicketAssignedUserId);
            $("#sbAsgGroupEmp").dxSelectBox("instance").option("disabled", true);

            $("#dateTicket").dxDateBox("instance").option("value", data.Ticket.TicketOpenedTime);
            $("#dateTicket").dxDateBox("instance").option("disabled", true);

            $("#textAreaDescription").dxTextArea("instance").option("value", data.Ticket.TicketDescription);
            $("#textAreaDescription").dxTextArea("instance").option("disabled", true);
        }
    }



    //göndermeden önce kontrol ediyoruz.
    function beforeSend(type, e) {
        //if (type == "load") return;
        //var ajaxHeader = {};
        //ajaxHeader["Content-Type"] = "application/json";
        //let formData = {};
        //formData.ticketDescription = $("#textAreaDescription").dxTextArea("instance").option("value");
        //e.data = JSON.stringify(formData);
        //e.headers = ajaxHeader;
        //e.async = true;
        if (type == "load") return;
        var ajaxHeader = {};
        ajaxHeader["Content-Type"] = "application/json";
        let formData = {};
        let TicketViewObj = {};
        formData.Ticket = TicketViewObj;
        formData.Ticket.ticketDescription = $("#textAreaDescription").dxTextArea("instance").option("value");
        formData.Ticket.reasonCategory = $("#dropDownReasonSingle").dxDropDownBox("instance").option("value")[0];

        e.data = JSON.stringify(formData);
        e.headers = ajaxHeader;
        e.async = true;
    }


    function syncTreeViewSelection(treeView, value) {
        if (!value) {
            treeView.unselectAll();
        } else {
            treeView.selectItem(value);
        }
    }

    function treeBox_valueChangedReason(e) {
        if (e.component.content() == null)
            return;
        var $treeView = e.component.content().find(".dx-treeview");
        if ($treeView.length) {
            syncTreeViewSelection($treeView.dxTreeView("instance"), e.value);
        }
        $("#sbAsgGroup").dxSelectBox("instance").option("value", null);
        $("#sbAsgGroupEmp").dxSelectBox("instance").option("value", null);
        if (e.value) {
            if (e.value[0]) {
                var reasonValue = $("#ticketForm").dxForm("instance").option("formData").TicketViewObj.reasonCategory;
                var asgGroup = $("#sbAsgGroup").dxSelectBox("instance").getDataSource().items();
                var itemAsgGroup = [];
                //$("#sbAsgGroup").dxSelectBox("instance").getDataSource()
                asgGroup.filter(function (e2) {
                    if (e2.reasonId == reasonValue[0]) {
                        itemAsgGroup.push(e2);
                    }
                })
                if (itemAsgGroup.length != 0) {
                    $("#sbAsgGroup").dxSelectBox("instance").option("items", itemAsgGroup);
                }
                else {
                    $("#sbAsgGroup").dxSelectBox("instance").getDataSource().reload();
                }
            }
        }
        else {
            $("#sbAsgGroup").dxSelectBox("instance").getDataSource().filter(null);
            $("#sbAsgGroup").dxSelectBox("instance").getDataSource().reload();
        }
    }

    function OnLoadedGrid(e) {        
    }


</script>

<style>
    .accordion {
        padding: 5px;
    }

    #accordion h1,
    #accordion p {
        margin: 0;
    }

    #accordion h1 {
        font-size: 20px;
    }
</style>

<style>


    .title h3 {
        font-family: 'Segoe UI Light', 'Helvetica Neue Light', 'Segoe UI', 'Helvetica Neue', 'Trebuchet MS', Verdana;
        font-weight: 200;
        font-size: 24px;
        text-align: center;
    }

    #gridTicket {
        padding - left: 10px;
        padding-right: 10px;
    }

    .btn-group {
        display: block;
        text-align: right;
        margin-right: 10px;
        margin-bottom: 5px;
    }

    img {
        height: 25px;
        width: 25px;
        display: block;
    }

    #btn_refresh {
        text - align: center;
        height: 38px;
    }
</style>

<style>

    #frmTicket {
        padding: 20px;
    }
</style>

<style>

    #ticketForm {
        padding: 10px;
    }

    #textTicketNote {
        margin: 20px;
    }

    #ticketNotesGrid {
        margin: 20px;
    }

    #ticketAttachmentGrid {
        margin: 20px;
    }

    #ticketHistory {
        margin: 20px;
    }

    .edit-actions {
        width: 100%;
        margin-top: 10px;
        text-align: right;
    }

    .dx-overlay-modal .edit-label {
        width: 100%;
        margin-bottom: 10px;
        font-size: 16px;
        color: #828282;
        font-weight: bold;
        border-bottom: 1px solid #828282;
    }

    .content h4 {
        margin-bottom: 10px;
        font-weight: 500;
        font-size: 18px;
    }

    .content {
        margin-top: 50px;
        margin-left: 10px;
    }

    .selected-item {
        margin-bottom: 20px;
    }

    #selected-files {
        display: none;
    }

    #fileuploader-container {
        border: 1px solid #d3d3d3;
        margin: 20px 20px 0 20px;
    }
</style>



