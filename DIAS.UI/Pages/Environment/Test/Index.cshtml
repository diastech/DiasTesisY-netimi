@page
@using System.Net.Http;
@using Newtonsoft.Json;
@using DiasShared.Data.EF_Data.DiasFacilityManagement.SqlServer.DataTransferObjects.Test.Shared.Standard;
@inject DIAS.UI.Service.CommonLocalizationService localizer

@{
    List<MenuPageDto> userPages = new List<MenuPageDto>
    {	
        new MenuPageDto(){Id= "13", HierarchicalLevel = 0, HierarchicalOrder = 1, MenuText = "Sistem Yönetimi", MenuIcon = "fas fa-cogs", ExpandOnStart = true},
        new MenuPageDto(){Id= "14", ParentId = "13", HierarchicalLevel = 1, HierarchicalOrder = 1, MenuText = "Kullanıcı İşlemleri", MenuIcon = "", ExpandOnStart = false},
        new MenuPageDto(){Id= "20", ParentId = "14", HierarchicalLevel = 2, HierarchicalOrder = 1, MenuText = "Test 1", UrlPath = "", MenuIcon = "", ExpandOnStart = false},
        new MenuPageDto(){Id= "21", ParentId = "14", HierarchicalLevel = 2, HierarchicalOrder = 2, MenuText = "Test 2", UrlPath = "", MenuIcon = "", ExpandOnStart = false},
        new MenuPageDto(){Id= "22", ParentId = "14", HierarchicalLevel = 2, HierarchicalOrder = 3, MenuText = "Test 3", UrlPath = "", MenuIcon = "", ExpandOnStart = false},
        new MenuPageDto(){Id= "23", ParentId = "14", HierarchicalLevel = 2, HierarchicalOrder = 4, MenuText = "Test 4", UrlPath = "", MenuIcon = "", ExpandOnStart = false},     
        new MenuPageDto(){Id= "24", ParentId = "13", HierarchicalLevel = 1, HierarchicalOrder = 1, MenuText = "Tanım İşlemleri", MenuIcon = "", ExpandOnStart = false},
        new MenuPageDto(){Id= "25", ParentId = "24", HierarchicalLevel = 2, HierarchicalOrder = 1, MenuText = "Test 1", UrlPath = "", MenuIcon = "", ExpandOnStart = false},
        new MenuPageDto(){Id= "26", ParentId = "24", HierarchicalLevel = 2, HierarchicalOrder = 2, MenuText = "Test 2", UrlPath = "", MenuIcon = "", ExpandOnStart = false},
        new MenuPageDto(){Id= "27", ParentId = "24", HierarchicalLevel = 2, HierarchicalOrder = 3, MenuText = "Test 3", UrlPath = "", MenuIcon = "", ExpandOnStart = false},
        new MenuPageDto(){Id= "28", ParentId = "24", HierarchicalLevel = 2, HierarchicalOrder = 4, MenuText = "Test 4", UrlPath = "", MenuIcon = "", ExpandOnStart = false},
        new MenuPageDto(){Id= "15", HierarchicalLevel = 0, HierarchicalOrder = 2, MenuText = "İş Emri Modülü", MenuIcon = "fas fa-clipboard", ExpandOnStart = false},
        new MenuPageDto(){Id= "16", ParentId = "15", HierarchicalLevel = 1, HierarchicalOrder = 1, MenuText = "İş Emri", UrlPath = "/Ticket/Tickets", MenuIcon = "fas fa-tasks", ExpandOnStart = false},
        new MenuPageDto(){Id= "17", ParentId = "15", HierarchicalLevel = 1, HierarchicalOrder = 2, MenuText = "Hızlı İş Emri", UrlPath = "/Ticket/FastTickets", MenuIcon = "fas fa-fighter-jet", ExpandOnStart = false},
        new MenuPageDto(){Id= "18", ParentId = "15", HierarchicalLevel = 1, HierarchicalOrder = 3, MenuText = "Hızlı İş Emri Yönlendir", UrlPath = "/Ticket/FastTicketRedirect", MenuIcon = "fas fa-map-signs", ExpandOnStart = false},
        new MenuPageDto(){Id= "19", ParentId = "15", HierarchicalLevel = 1, HierarchicalOrder = 4, MenuText = "Planlı İş Emri", UrlPath = "/Ticket/PeriodicTickets", MenuIcon = "fas fa-calendar-alt", ExpandOnStart = false}
    };
    string lang = "";
    lang = Configuration.GetValue<string>("defaultSystemLang");
    if (!string.IsNullOrEmpty(Request.Cookies["userLang"]))
        lang = Request.Cookies["userLang"];

    var langList = new[]
    {
        new { key = "Türkçe", value = "tr" },
        new { key = "English", value = "en" },
        new { key = "Deutsch", value = "de" },
    };
}
<script src="~/js/pages/index.js"></script>
<body onload="Index.IndexLoad()">
    @(Html.DevExtreme().Toolbar().ID("toolbar").Items(a=>
        {
            a.Add().Location(ToolbarItemLocation.Before)
                .Widget(w => w.Button().Icon("fas fa-bars")
                .OnClick("Index.drawerMenu_click")
                .StylingMode(ButtonStylingMode.Outlined));

            a.Add().Location(ToolbarItemLocation.Before)
                .Template(@<text><div id="headerLogo"> </div></text>);

            a.Add().Location(ToolbarItemLocation.Before)
                .Template(@<text><b>@localizer.Get("index.companyName")</b></text>);

            a.Add().Location(ToolbarItemLocation.Before)
                .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
                .Template(@<text><div id="divFacility"></div></text>);

            a.Add().Location(ToolbarItemLocation.After)
                .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
                .ShowText(ToolbarItemShowTextMode.InMenu)
                .Widget(w => w.Button().ID("btnAboutPage").Text("About Page").Hint("About").Icon("fas fa-question")
                .OnClick("Index.btnAboutPage_click").StylingMode(ButtonStylingMode.Outlined));

            a.Add().Location(ToolbarItemLocation.After)
                .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
                .ShowText(ToolbarItemShowTextMode.InMenu)
                .Widget(w => w.Button().ID("btnChangePassword").Text("Change Password").Hint("Change Password").Icon("fas fa-key")
                .OnClick("Index.btnChangePassword_click").StylingMode(ButtonStylingMode.Outlined));

            a.Add().Location(ToolbarItemLocation.After)
                .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
                .ShowText(ToolbarItemShowTextMode.InMenu)
                .Widget(w => w.Button().ID("btnHelpDesk").Text("Report a Bug").Hint("Report a Bug").Icon("fas fa-bug")
                .OnClick("Index.btnHelpDesk_click").StylingMode(ButtonStylingMode.Outlined));

            a.Add().Location(ToolbarItemLocation.After)
                .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
                .ShowText(ToolbarItemShowTextMode.InMenu)
                .Widget(w => w.Button().ID("btnChangeFacility").Text("Change Facility").Hint("Change Facility").Icon("fas fa-industry")
                .OnClick("Index.btnChangeFacility_click").StylingMode(ButtonStylingMode.Outlined));

            a.Add().Location(ToolbarItemLocation.After)
                .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
                .ShowText(ToolbarItemShowTextMode.InMenu)
                .Widget(w => w.Button().ID("btnRefresh").Text("Refresh Page").Hint("Refresh Page").Icon("fas fa-sync")
                .OnClick("Index.btnRefresh_click").StylingMode(ButtonStylingMode.Outlined));

            a.Add().Location(ToolbarItemLocation.After)
                .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
                .ShowText(ToolbarItemShowTextMode.InMenu)
                .Widget(w => w.Button().ID("btnLogOut").Text("Log Out").Hint("Log Out").Icon("fas fa-power-off")
                .OnClick("Index.btnLogOut_click").StylingMode(ButtonStylingMode.Outlined));

            a.Add().Location(ToolbarItemLocation.After)
                .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
                .Template(new TemplateName("templateUserDropDown"));

            a.Add().Location(ToolbarItemLocation.After)
                .LocateInMenu(ToolbarItemLocateInMenuMode.Always)
                .Widget(w => w.SelectBox().ID("sbLangTemplates").StylingMode(EditorStylingMode.Outlined)
                .DataSource(langList)
                .DisplayExpr("key")
                .ValueExpr("value")
                .Value(lang)
                .Width(120)
                .OnValueChanged("Index.onLanguageSelectValueChanged")
                .FieldTemplate(new JS("Index.onLanguageSelectBoxFieldTemplate"))
                .ItemTemplate(new JS("Index.onLanguageSelectBoxItemTemplate"))
                .ShowClearButton(false).DeferRendering(true));
            })
    )
    <div id="divDetay" style="height:94.7vh">
        @(Html.DevExtreme().Drawer().ID("drawer")
            .Position(DrawerPosition.Left)
            .RevealMode(DrawerRevealMode.Slide)
            .OpenedStateMode(DrawerOpenedStateMode.Shrink)
            .CloseOnOutsideClick(false)
            .Opened(true).ActiveStateEnabled(true)
            .HoverStateEnabled(true)
            .Content(@<text>
                <div id="tabMain">
                    @Html.DevExtreme().TabPanel().Items(t =>
                    {
                        t.Add().Title("Anasayfa")
                            .Template(@"<text><iframe src='Base/Homepage' id='tabIframe' style='width: 100%; height:100%; border:none;'></iframe></text>")
                            //.Template(@"<text><iframe src='Ticket/Tickets' id='tabIframe' style='width: 100%; height:100%; border:none;'></iframe></text>")
                            .Option("key", "-1");
                    }
                    ).ID("tabMain").DeferRendering(false).ItemTitleTemplate(new JS("Index.titleTemplate")).RepaintChangesOnly(true).Height("100%")
                </div>
            </text>)
            .Template(@<text>
                <div id="clock"></div>
                <div id="treeview">
                    @Html.DevExtreme().TreeView().AnimationEnabled(true).SearchEnabled(true).SearchEditorOptions(o => o.ShowClearButton(true).Height(30)
                    .Placeholder("Ara").StylingMode(EditorStylingMode.Underlined).Width("auto")).ElementAttr("color","white").ID("treeMenu").ActiveStateEnabled(true).FocusStateEnabled(false).Items(i =>
                    {
                        foreach (var y in userPages.Where(s => s.HierarchicalLevel == 0 && s.ParentId == null).OrderBy(s => s.HierarchicalOrder))
                        {
                            i.Add().Icon(y.MenuIcon).Text(" " + y.MenuText).Option("url", y.UrlPath).Expanded(y.ExpandOnStart).Items(a =>
                            {
                                foreach (var x in userPages.Where(s => s.HierarchicalLevel == 1 && s.ParentId == y.Id).OrderBy(s => s.HierarchicalOrder))
                                {
                                    a.Add().Icon(x.MenuIcon).Text(" " + x.MenuText).Option("url", x.UrlPath).Expanded(x.ExpandOnStart).Items(b => 
                                    {
                                        foreach (var z in userPages.Where(s => s.HierarchicalLevel == 2 && s.ParentId == x.Id).OrderBy(s => s.HierarchicalOrder))
                                        {
                                            b.Add().Icon(z.MenuIcon).Text(" " + z.MenuText).Option("url", z.UrlPath).Expanded(z.ExpandOnStart);
                                        }
                                    });
                                }
                            });
                        };
                    }).SelectionMode(NavSelectionMode.Single).OnItemClick("Index.onTreeViewItem_click").Width(250).Height("100%")
                </div>
            </text>))
    </div>

    @using (Html.DevExtreme().NamedTemplate("templateUserDropDown"))
    {
        @(Html.DevExtreme().DropDownButton()
            .Width(150)
            .Hint("User Information")
            .SplitButton(true)
            //.Text("  " +userName)
            .KeyExpr("Id").DisplayExpr("Text")
            .Icon(Url.Content("~/images/LoginPic.png")) //TODO: Change Icon based on last known status
            .UseSelectMode(false)
            .DataSource(new object[] {
                new {
                    Id = 1,
                    Text = "Çevrimiçi",
                    icon = (Url.Content("~/images/status/status-online.png"))
                },
                new {
                    Id = 2,
                    Text = "Meşgul",
                    icon = (Url.Content("~/images/status/status-busy.png"))
                },
                new {
                    Id = 3,
                    Text = "Uzakta",
                    icon = (Url.Content("~/images/status/status-away.png"))
                },
                new {
                    Id = 4,
                    Text = "Çevrimdışı",
                    icon = (Url.Content("~/images/status/status-offline.png"))
                },
                new {
                    Id = 5,
                    Text = "Mesajlarım",
                    icon = "email",
                    badge = "5"
                },
                new {
                    Id = 6,
                    Text = "Ekibim",
                    icon = "group"
                },
                new {
                    Id = 7,
                    Text = "Çıkış Yap",
                    icon = "runner"
                },
            })
            .OnButtonClick("Index.profileButton_click")
            .OnItemClick("Index.profileItem_click")
        )
    }

</body>


<style>
    #toolbar {
        background-color: rgba(191, 191, 191, .15);
        padding: 5px 10px 10px;
        box-shadow: 0 2px 5px 0 rgba(0,0,0,0.25);
        height: 51px;
    }

    #divDetay {
        padding-top: 7px;
    }

    #tabMain {
        padding-left: 2px;
        padding-right: 2px;
        padding-bottom: 2px;
    }

    #headerLogo {
        background-image: url('/images/KurumLogo.png');
        background-repeat: no-repeat;
        background-size: contain;
        height: 43px;
        width: 50px;
    }

    #customImg {
        width: 40px;
        height: 40px;
        padding: 2px;
        float: left;
    }

    #clock {
        color: black;
        text-align: center;
        padding: 10px;
    }

    #treeMenu {
        padding-left: 10px;
        padding-right: 10px;
    }

    #treeMenu, .dx-treeview-toggle-item-visibility {
        color: #000000 !important;
    }

    .dx-drawer-panel-content {
        background-color: gainsboro !important;
    }

    a {
        cursor: pointer;
        white-space: nowrap;
        border-bottom: 1px dashed;
        border-bottom-color: white;
        text-decoration: none;
    }

    .currently-active-item {
        font-weight: bold;
        background-color: darkgray;
    }

    .dx-treeview-item:after {
        display: block;
        left: 0;
        width: 0;
        height: 2px;
        background-color: darkgray;
        content: "";
        transition: width 0.2s;
    }

    .dx-treeview-item:hover {
        color: black;
    }

    .dx-treeview-item:hover:after {
        width: 100%;
    }

    /*  .dx-treelist-checkbox-size .dx-checkbox-icon {
        height: 20px;
        width: 20px;
    }  */
</style>