// <auto-generated />
using System;
using DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;

namespace DiasDataAccessLayer.Migrations.DiasFacilityManagementTemplate.SqlServer.Development
{
    [DbContext(typeof(DiasFacilityManagementTemplateSqlServer))]
    [Migration("20211209153548_IdentityBaseModify")]
    partial class IdentityBaseModify
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("idn")
                .HasAnnotation("Relational:Collation", "Turkish_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.AssignmentGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Atama Grubu tanım tablosunun primary keyi")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddedByUserId")
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("AddedTime")
                        .HasColumnType("datetime");

                    b.Property<int>("GroupManagerUserId")
                        .HasColumnType("int")
                        .HasComment("Atama grubunun sorumlusu HR tablosunun ID si ile tutulur FK");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasComment("Atama grubu adını tutar");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TicketReasonId")
                        .HasColumnType("int")
                        .HasComment("arama nedeni tablosunun ID si");

                    b.HasKey("Id");

                    b.HasIndex("AddedByUserId");

                    b.HasIndex("GroupManagerUserId");

                    b.HasIndex("LastModifiedByUserId");

                    b.HasIndex("TicketReasonId");

                    b.ToTable("AssignmentGroup", "adm");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.AssignmentGroupAuthorizedLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddedByUserId")
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("AddedTime")
                        .HasColumnType("datetime");

                    b.Property<int>("AssignmentGroupId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddedByUserId");

                    b.HasIndex("AssignmentGroupId");

                    b.HasIndex("LastModifiedByUserId");

                    b.HasIndex("LocationId");

                    b.ToTable("AssignmentGroupAuthorizedLocation", "adm");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.AssignmentGroupEmployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddedByUserId")
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("AddedTime")
                        .HasColumnType("datetime");

                    b.Property<int>("AssignmentGroupId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeUserId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AddedByUserId");

                    b.HasIndex("AssignmentGroupId");

                    b.HasIndex("EmployeeUserId");

                    b.HasIndex("LastModifiedByUserId");

                    b.ToTable("AssignmentGroupEmployee", "adm");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddedByUserId")
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("AddedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("AttachmentDescription")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("BasicTicketId")
                        .HasColumnType("int");

                    b.Property<byte[]>("FileData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FolderName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TicketId")
                        .HasColumnType("int");

                    b.Property<int?>("TicketNoteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddedByUserId");

                    b.HasIndex("BasicTicketId");

                    b.HasIndex("LastModifiedByUserId");

                    b.HasIndex("TicketId");

                    b.HasIndex("TicketNoteId");

                    b.ToTable("Attachment", "usr");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.BasicTicket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddedByUserId")
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("AddedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MobilePhoneNumber")
                        .HasColumnType("int");

                    b.Property<int>("StateId")
                        .HasColumnType("int")
                        .HasDefaultValueSql("((9))");

                    b.Property<string>("TicketDescription")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.HasKey("Id");

                    b.HasIndex("AddedByUserId");

                    b.HasIndex("LastModifiedByUserId");

                    b.HasIndex("StateId");

                    b.ToTable("BasicTicket", "usr");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.BasicTicketState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddedByUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("AddedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("BasicStateDescription")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AddedByUserId");

                    b.HasIndex("LastModifiedByUserId");

                    b.ToTable("BasicTicketState", "lst");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddedByUserId")
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("AddedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("HierarchicalParentId")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<Geometry>("LatitudeLongitude")
                        .HasColumnType("geography");

                    b.Property<string>("LocationDescription")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("LocationHierarchy")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LocationNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AddedByUserId");

                    b.HasIndex("LastModifiedByUserId");

                    b.ToTable("Location", "lst");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.LocationV2", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddedByUserId")
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("AddedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<HierarchyId>("HierarchyId")
                        .IsRequired()
                        .HasColumnType("hierarchyid");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<Geometry>("LatitudeLongitude")
                        .HasColumnType("geography");

                    b.Property<string>("LocationDescription")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LocationNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<HierarchyId>("OldHierarchyId")
                        .HasColumnType("hierarchyid");

                    b.HasKey("Id");

                    b.HasIndex("AddedByUserId");

                    b.HasIndex("LastModifiedByUserId");

                    b.ToTable("LocationV2", "lst");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.MenuPage", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AddedByUserId")
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("AddedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("ExpandOnStart")
                        .HasColumnType("bit");

                    b.Property<int>("HierarchicalLevel")
                        .HasColumnType("int");

                    b.Property<int>("HierarchicalOrder")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MenuIcon")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("MenuImagePath")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("MenuText")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ParentId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UrlPath")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddedByUserId");

                    b.HasIndex("LastModifiedByUserId");

                    b.ToTable("MenuPage", "lst");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.MenuPageV2", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddedByUserId")
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("AddedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("ExpandOnStart")
                        .HasColumnType("bit");

                    b.Property<HierarchyId>("HierarchyId")
                        .IsRequired()
                        .HasColumnType("hierarchyid");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MenuIcon")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("MenuImagePath")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("MenuText")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<HierarchyId>("OldHierarchyId")
                        .HasColumnType("hierarchyid");

                    b.Property<string>("UrlPath")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddedByUserId");

                    b.HasIndex("LastModifiedByUserId");

                    b.ToTable("MenuPageV2", "lst");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.PeriodicTicket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddedByUserId")
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("AddedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("PeriodFrequency")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PeriodicName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("TicketPriority")
                        .HasColumnType("int");

                    b.Property<int>("TicketReasonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddedByUserId");

                    b.HasIndex("LastModifiedByUserId");

                    b.HasIndex("LocationId");

                    b.HasIndex("TicketReasonId");

                    b.ToTable("PeriodicTicket", "usr");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.ResolutionForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddedByUserId")
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("AddedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("FormDescription")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMandatory")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TicketReasonCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("TicketReasonId")
                        .HasColumnType("int");

                    b.Property<int>("TicketStateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddedByUserId");

                    b.HasIndex("LastModifiedByUserId");

                    b.HasIndex("TicketReasonCategoryId");

                    b.HasIndex("TicketReasonId");

                    b.HasIndex("TicketStateId");

                    b.ToTable("ResolutionForm", "adm");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.ResolutionFormAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddedByUserId")
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("AddedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Answer")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)")
                        .HasComment("If yes or no question it is null");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ResolutionFormId")
                        .HasColumnType("int");

                    b.Property<int>("ResolutionFormQuestionId")
                        .HasColumnType("int");

                    b.Property<bool?>("YesOrNo")
                        .HasColumnType("bit")
                        .HasComment("If not yes or no question it is null");

                    b.HasKey("Id");

                    b.HasIndex("AddedByUserId");

                    b.HasIndex("LastModifiedByUserId");

                    b.HasIndex("ResolutionFormId");

                    b.HasIndex("ResolutionFormQuestionId");

                    b.ToTable("ResolutionFormAnswer", "adm");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.ResolutionFormChoiceOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddedByUserId")
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("AddedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ChoiceOptionText")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AddedByUserId");

                    b.HasIndex("LastModifiedByUserId");

                    b.ToTable("ResolutionFormChoiceOption", "adm");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.ResolutionFormMultipleChoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddedByUserId")
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("AddedTime")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Option1Text")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("Option2Text")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("Option3Text")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("Option4Text")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("Option5Text")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<int>("TicketFormId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddedByUserId");

                    b.HasIndex("LastModifiedByUserId");

                    b.HasIndex("TicketFormId");

                    b.ToTable("ResolutionFormMultipleChoice", "adm");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.ResolutionFormQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddedByUserId")
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("AddedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("ResolutionFormQuestionTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddedByUserId");

                    b.HasIndex("LastModifiedByUserId");

                    b.HasIndex("ResolutionFormQuestionTypeId");

                    b.ToTable("ResolutionFormQuestion", "adm");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.ResolutionFormQuestionAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddedByUserId")
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("AddedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<int>("ResolutionFormId")
                        .HasColumnType("int");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddedByUserId");

                    b.HasIndex("LastModifiedByUserId");

                    b.HasIndex("ResolutionFormId");

                    b.HasIndex("TicketId");

                    b.ToTable("ResolutionFormQuestionAnswer", "adm");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.ResolutionFormQuestionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddedByUserId")
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("AddedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("QuestionType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AddedByUserId");

                    b.HasIndex("LastModifiedByUserId");

                    b.ToTable("ResolutionFormQuestionType", "lst");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.ResolutionFormSingleQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddedByUserId")
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("AddedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMandatory")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<int>("TicketFormId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddedByUserId");

                    b.HasIndex("LastModifiedByUserId");

                    b.ToTable("ResolutionFormSingleQuestion", "adm");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.ResolutionFormV2", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddedByUserId")
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("AddedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("FormXml")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5000)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMandatory")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TicketReasonCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("TicketReasonId")
                        .HasColumnType("int");

                    b.Property<int>("TicketStateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddedByUserId");

                    b.HasIndex("LastModifiedByUserId");

                    b.HasIndex("TicketReasonCategoryId");

                    b.HasIndex("TicketReasonId");

                    b.HasIndex("TicketStateId");

                    b.ToTable("ResolutionFormV2", "adm");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.ResolutionFormYesNo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddedByUserId")
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("AddedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<int>("TicketFormId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddedByUserId");

                    b.HasIndex("LastModifiedByUserId");

                    b.HasIndex("TicketFormId");

                    b.ToTable("ResolutionFormYesNo", "adm");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddedByUserId")
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("AddedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("BasicTicketId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PeriodicTicketId")
                        .HasColumnType("int");

                    b.Property<int?>("TickedAssignedAssignmentGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("TicketAssignedUserId")
                        .HasColumnType("int");

                    b.Property<string>("TicketDescription")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<DateTime>("TicketOpenedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("TicketOwnerUserId")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int>("TicketPriority")
                        .HasColumnType("int");

                    b.Property<int>("TicketReasonId")
                        .HasColumnType("int");

                    b.Property<int>("TicketReportedUserId")
                        .HasColumnType("int");

                    b.Property<int>("TicketStatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddedByUserId");

                    b.HasIndex("BasicTicketId");

                    b.HasIndex("LastModifiedByUserId");

                    b.HasIndex("TickedAssignedAssignmentGroupId");

                    b.HasIndex("TicketAssignedUserId");

                    b.HasIndex("TicketReasonId");

                    b.HasIndex("TicketStatusId");

                    b.ToTable("Ticket", "usr");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.TicketAuditHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ActivityEndTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ActivityStartTime")
                        .HasColumnType("datetime");

                    b.Property<int>("AddedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AddedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("HistoryAddTime")
                        .HasColumnType("datetime");

                    b.Property<string>("HistoryType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<int?>("NextAssignedAssignmentGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("NextTicketAssignedUserId")
                        .HasColumnType("int");

                    b.Property<int?>("NextTicketStateId")
                        .HasColumnType("int");

                    b.Property<int?>("PreviousAssignedAssignmentGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("PreviousTicketAssignedUserId")
                        .HasColumnType("int");

                    b.Property<int?>("PreviousTicketStateId")
                        .HasColumnType("int");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddedByUserId");

                    b.HasIndex("LastModifiedByUserId");

                    b.HasIndex("LocationId");

                    b.HasIndex("NextAssignedAssignmentGroupId");

                    b.HasIndex("NextTicketAssignedUserId");

                    b.HasIndex("NextTicketStateId");

                    b.HasIndex("PreviousAssignedAssignmentGroupId");

                    b.HasIndex("PreviousTicketAssignedUserId");

                    b.HasIndex("PreviousTicketStateId");

                    b.HasIndex("TicketId");

                    b.ToTable("TicketAuditHistory", "usr");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.TicketNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddedByUserId")
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("AddedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("NoteText")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddedByUserId");

                    b.HasIndex("LastModifiedByUserId");

                    b.HasIndex("TicketId");

                    b.ToTable("TicketNote", "usr");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.TicketPriority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddedByUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("AddedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("Id");

                    b.ToTable("TicketPriority", "lst");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.TicketReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddedByUserId")
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("AddedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReasonDescription")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ReasonName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int>("ResolutionTime")
                        .HasColumnType("int");

                    b.Property<int>("ResponseTime")
                        .HasColumnType("int");

                    b.Property<int>("TicketReasonCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddedByUserId");

                    b.HasIndex("LastModifiedByUserId");

                    b.HasIndex("TicketReasonCategoryId");

                    b.ToTable("TicketReason", "adm");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.TicketReasonCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddedByUserId")
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("AddedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CategoryDescription")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("CategoryHierarchy")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("HierarchicalParentId")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AddedByUserId");

                    b.HasIndex("LastModifiedByUserId");

                    b.ToTable("TicketReasonCategory", "adm");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.TicketReasonCategoryV2", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddedByUserId")
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("AddedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CategoryDescription")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<HierarchyId>("HierarchyId")
                        .IsRequired()
                        .HasColumnType("hierarchyid");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<HierarchyId>("OldHierarchyId")
                        .HasColumnType("hierarchyid");

                    b.HasKey("Id");

                    b.HasIndex("AddedByUserId");

                    b.HasIndex("LastModifiedByUserId");

                    b.ToTable("TicketReasonCategoryV2", "adm");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.TicketRelatedLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddedByUserId")
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("AddedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<int>("TicketLocationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddedByUserId");

                    b.HasIndex("LastModifiedByUserId");

                    b.HasIndex("TicketId");

                    b.HasIndex("TicketLocationId");

                    b.ToTable("TicketRelatedLocation", "usr");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.TicketState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddedByUserId")
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("AddedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("StateDescription")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("AddedByUserId");

                    b.HasIndex("LastModifiedByUserId");

                    b.ToTable("TicketState", "lst");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.TicketStateTransition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddedByUserId")
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("AddedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("DestinationTicketStateId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("SourceTicketStateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddedByUserId");

                    b.HasIndex("DestinationTicketStateId");

                    b.HasIndex("LastModifiedByUserId");

                    b.HasIndex("SourceTicketStateId");

                    b.ToTable("TicketStateTransition", "lst");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.UserMenuPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddedByUserId")
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("AddedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ApplicationPageId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AddedByUserId");

                    b.HasIndex("LastModifiedByUserId");

                    b.ToTable("UserMenuPage", "adm");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.UserPageView", b =>
                {
                    b.Property<bool>("Expanded")
                        .HasColumnType("bit");

                    b.Property<string>("Icon")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Image")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("PageId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ParentId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Path")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Text")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.ToView("UserPageView");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.VwAssigmentGroupEmployee", b =>
                {
                    b.Property<int?>("AssignmentGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeUserId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.ToView("vw_AssigmentGroupEmployee");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.VwReasonCategory", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<bool?>("IsDisabled")
                        .HasColumnType("bit")
                        .HasColumnName("isDisabled");

                    b.Property<string>("ReasonCategory")
                        .IsRequired()
                        .HasMaxLength(281)
                        .IsUnicode(false)
                        .HasColumnType("varchar(281)")
                        .HasColumnName("reasonCategory");

                    b.Property<string>("ReasonCategoryDescription")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("reasonCategoryDescription");

                    b.Property<string>("ReasonCategoryHierarchy")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("reasonCategoryHierarchy");

                    b.Property<string>("ReasonCategoryName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("reasonCategoryName");

                    b.Property<string>("ReasonCategoryParentId")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("reasonCategoryParentId");

                    b.ToView("vw_ReasonCategory");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.VwTicket", b =>
                {
                    b.Property<DateTime?>("ExpectedResolutionTime")
                        .HasColumnType("datetime")
                        .HasColumnName("expectedResolutionTime");

                    b.Property<DateTime?>("ExpectedResponseTime")
                        .HasColumnType("datetime")
                        .HasColumnName("expectedResponseTime");

                    b.Property<string>("GroupName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("LocationHierarchy")
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)")
                        .HasColumnName("locationHierarchy");

                    b.Property<string>("LocationName")
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)")
                        .HasColumnName("locationName");

                    b.Property<string>("ReasonCategory")
                        .IsRequired()
                        .HasMaxLength(281)
                        .IsUnicode(false)
                        .HasColumnType("varchar(281)")
                        .HasColumnName("reasonCategory");

                    b.Property<string>("ReasonName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int>("ResolutionTime")
                        .HasColumnType("int");

                    b.Property<int>("ResponseTime")
                        .HasColumnType("int");

                    b.Property<string>("ResponsibleUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("responsibleUser");

                    b.Property<string>("ResponsibleUserId")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("responsibleUserId");

                    b.Property<string>("StateDescription")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("TickedAssignedAssignmentGroupId")
                        .HasColumnType("int");

                    b.Property<string>("TicketDescription")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("TicketLocations")
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)")
                        .HasColumnName("ticketLocations");

                    b.Property<DateTime>("TicketOpenedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("TicketOwnerUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ticketOwnerUser");

                    b.Property<string>("TicketOwnerUserId")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int>("TicketPriority")
                        .HasColumnType("int");

                    b.Property<int>("TicketReasonId")
                        .HasColumnType("int");

                    b.Property<int>("TicketStatusId")
                        .HasColumnType("int");

                    b.ToView("vw_Ticket");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.VwTicketFormQ", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool?>("IsMandatory")
                        .HasColumnType("bit");

                    b.Property<string>("Q1")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("Q2")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("Q3")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("Q4")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("Q5")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<int>("TicketFormId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.ToView("vw_TicketFormQ");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.VwTicketLocation", b =>
                {
                    b.Property<string>("HierarchicalParentId")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<Geometry>("LatitudeLongitude")
                        .HasColumnType("geography");

                    b.Property<string>("LocationDescription")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("LocationHierarchy")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LocationNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.ToView("vw_TicketLocation");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.VwTicketLocation1", b =>
                {
                    b.Property<string>("Location")
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)")
                        .HasColumnName("location");

                    b.Property<string>("LocationHierarchy")
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)")
                        .HasColumnName("locationHierarchy");

                    b.Property<string>("LocationName")
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)")
                        .HasColumnName("locationName");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.ToView("vw_TicketLocations");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.VwTicketNote", b =>
                {
                    b.Property<DateTime?>("AddedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("addedTime");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("NoteText")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("NotesAddedUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("notesAddedUser");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<string>("TicketNoteAttachments")
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)")
                        .HasColumnName("ticketNoteAttachments");

                    b.ToView("vw_TicketNotes");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.VwTicketStateLevel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("TicketStateDestination")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("ticketStateDestination");

                    b.Property<int>("TicketStateDestinationId")
                        .HasColumnType("int")
                        .HasColumnName("ticketStateDestinationId");

                    b.Property<string>("TicketStateSource")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("ticketStateSource");

                    b.Property<int>("TicketStateSourceId")
                        .HasColumnType("int")
                        .HasColumnName("ticketStateSourceId");

                    b.ToView("vw_TicketStateLevel");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.WorkShift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddedByUserId")
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("AddedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ShiftEndTime")
                        .HasColumnType("datetime");

                    b.Property<string>("ShiftName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime>("ShiftStartTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AddedByUserId");

                    b.HasIndex("LastModifiedByUserId");

                    b.ToTable("WorkShift", "lst");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.CompanyRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AddedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("ParentCompanyRoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("CompanyRole");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("AccountLockTime")
                        .HasColumnType("datetime");

                    b.Property<byte>("AccountLockout")
                        .HasColumnType("tinyint");

                    b.Property<int>("AddedByUserId")
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("AddedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobilePhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("WorkShiftId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddedByUserId");

                    b.HasIndex("LastModifiedByUserId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("WorkShiftId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.AssignmentGroup", b =>
                {
                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", "AddedByUser")
                        .WithMany("AssignmentGroupAddedByUsers")
                        .HasForeignKey("AddedByUserId")
                        .HasConstraintName("FK_AssignmentGroup_AddedByUserId_User_Id")
                        .IsRequired();

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", "GroupManagerUser")
                        .WithMany("AssignmentGroupGroupManagerUsers")
                        .HasForeignKey("GroupManagerUserId")
                        .HasConstraintName("FK_assignmentgroup_hr")
                        .IsRequired();

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", "LastModifiedByUser")
                        .WithMany("AssignmentGroupLastModifiedByUsers")
                        .HasForeignKey("LastModifiedByUserId")
                        .HasConstraintName("FK_AssignmentGroup_LastModifiedByUserId_User_Id");

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.TicketReason", "TicketReason")
                        .WithMany("AssignmentGroups")
                        .HasForeignKey("TicketReasonId")
                        .HasConstraintName("FK_assignmentgroup_reason")
                        .IsRequired();

                    b.Navigation("AddedByUser");

                    b.Navigation("GroupManagerUser");

                    b.Navigation("LastModifiedByUser");

                    b.Navigation("TicketReason");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.AssignmentGroupAuthorizedLocation", b =>
                {
                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", "AddedByUser")
                        .WithMany("AssignmentGroupAuthorizedLocationAddedByUsers")
                        .HasForeignKey("AddedByUserId")
                        .HasConstraintName("FK_AssignmentGroupAuthorizedLocation_AddedByUserId_User_Id")
                        .IsRequired();

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.AssignmentGroup", "AssignmentGroup")
                        .WithMany("AssignmentGroupAuthorizedLocations")
                        .HasForeignKey("AssignmentGroupId")
                        .HasConstraintName("FK_assignmentgroupauthorizedplaces_assignmentgroup")
                        .IsRequired();

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", "LastModifiedByUser")
                        .WithMany("AssignmentGroupAuthorizedLocationLastModifiedByUsers")
                        .HasForeignKey("LastModifiedByUserId")
                        .HasConstraintName("FK_AssignmentGroupAuthorizedLocation_LastModifiedByUserId_User_Id");

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.LocationV2", "Location")
                        .WithMany("AssignmentGroupAuthorizedLocations")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK_AssignmentGroupAuthorizedLocation_LocationId_LocationV2_Id")
                        .IsRequired();

                    b.Navigation("AddedByUser");

                    b.Navigation("AssignmentGroup");

                    b.Navigation("LastModifiedByUser");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.AssignmentGroupEmployee", b =>
                {
                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", "AddedByUser")
                        .WithMany("AssignmentGroupEmployeeAddedByUsers")
                        .HasForeignKey("AddedByUserId")
                        .HasConstraintName("FK_AssignmentGroupEmployee_AddedByUserId_User_Id")
                        .IsRequired();

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.AssignmentGroup", "AssignmentGroup")
                        .WithMany("AssignmentGroupEmployees")
                        .HasForeignKey("AssignmentGroupId")
                        .HasConstraintName("FK_assignmentgroupemployee_assignmentgroup")
                        .IsRequired();

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", "EmployeeUser")
                        .WithMany("AssignmentGroupEmployeeEmployeeUsers")
                        .HasForeignKey("EmployeeUserId")
                        .HasConstraintName("FK_assignmentgroupemployee_hr")
                        .IsRequired();

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", "LastModifiedByUser")
                        .WithMany("AssignmentGroupEmployeeLastModifiedByUsers")
                        .HasForeignKey("LastModifiedByUserId")
                        .HasConstraintName("FK_AssignmentGroupEmployee_LastModifiedByUserId_User_Id");

                    b.Navigation("AddedByUser");

                    b.Navigation("AssignmentGroup");

                    b.Navigation("EmployeeUser");

                    b.Navigation("LastModifiedByUser");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.Attachment", b =>
                {
                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", "AddedByUser")
                        .WithMany("AttachmentAddedByUsers")
                        .HasForeignKey("AddedByUserId")
                        .HasConstraintName("FK_Attachment_AddedByUserId_User_Id")
                        .IsRequired();

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.BasicTicket", "BasicTicket")
                        .WithMany("Attachments")
                        .HasForeignKey("BasicTicketId")
                        .HasConstraintName("FK_Attachments_Basic_Ticket");

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", "LastModifiedByUser")
                        .WithMany("AttachmentLastModifiedByUsers")
                        .HasForeignKey("LastModifiedByUserId")
                        .HasConstraintName("FK_Attachment_LastModifiedByUserId_User_Id");

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.Ticket", "Ticket")
                        .WithMany("Attachments")
                        .HasForeignKey("TicketId")
                        .HasConstraintName("FK_ticketattachments_ticketattachments");

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.TicketNote", "TicketNote")
                        .WithMany("Attachments")
                        .HasForeignKey("TicketNoteId")
                        .HasConstraintName("FK_Attachments_Ticket_Notes");

                    b.Navigation("AddedByUser");

                    b.Navigation("BasicTicket");

                    b.Navigation("LastModifiedByUser");

                    b.Navigation("Ticket");

                    b.Navigation("TicketNote");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.BasicTicket", b =>
                {
                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", "AddedByUser")
                        .WithMany("BasicTicketAddedByUsers")
                        .HasForeignKey("AddedByUserId")
                        .HasConstraintName("FK_BasicTicket_AddedByUserId_User_Id")
                        .IsRequired();

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", "LastModifiedByUser")
                        .WithMany("BasicTicketLastModifiedByUsers")
                        .HasForeignKey("LastModifiedByUserId")
                        .HasConstraintName("FK_BasicTicket_LastModifiedByUserId_User_Id");

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.BasicTicketState", "StateOfBasicTicket")
                        .WithMany("BasicTicketStateFK")
                        .HasForeignKey("StateId")
                        .HasConstraintName("FK_BasicTicket_BasicTicketState_StateId_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AddedByUser");

                    b.Navigation("LastModifiedByUser");

                    b.Navigation("StateOfBasicTicket");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.BasicTicketState", b =>
                {
                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", "LastModifiedByUser")
                        .WithMany()
                        .HasForeignKey("LastModifiedByUserId");

                    b.Navigation("AddedByUser");

                    b.Navigation("LastModifiedByUser");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.Location", b =>
                {
                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", "AddedByUser")
                        .WithMany("LocationAddedByUsers")
                        .HasForeignKey("AddedByUserId")
                        .HasConstraintName("FK_Location_AddedByUserId_User_Id")
                        .IsRequired();

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", "LastModifiedByUser")
                        .WithMany("LocationLastModifiedByUsers")
                        .HasForeignKey("LastModifiedByUserId")
                        .HasConstraintName("FK_Location_LastModifiedByUserId_User_Id");

                    b.Navigation("AddedByUser");

                    b.Navigation("LastModifiedByUser");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.LocationV2", b =>
                {
                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", "AddedByUser")
                        .WithMany("LocationV2AddedByUsers")
                        .HasForeignKey("AddedByUserId")
                        .HasConstraintName("FK_LocationV2_AddedByUserId_User_Id")
                        .IsRequired();

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", "LastModifiedByUser")
                        .WithMany("LocationV2LastModifiedByUsers")
                        .HasForeignKey("LastModifiedByUserId")
                        .HasConstraintName("FK_LocationV2_LastModifiedByUserId_User_Id");

                    b.Navigation("AddedByUser");

                    b.Navigation("LastModifiedByUser");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.MenuPage", b =>
                {
                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", "AddedByUser")
                        .WithMany("MenuPageAddedByUsers")
                        .HasForeignKey("AddedByUserId")
                        .HasConstraintName("FK_MenuPage_AddedByUserId_User_Id")
                        .IsRequired();

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", "LastModifiedByUser")
                        .WithMany("MenuPageLastModifiedByUsers")
                        .HasForeignKey("LastModifiedByUserId")
                        .HasConstraintName("FK_MenuPage_LastModifiedByUserId_User_Id");

                    b.Navigation("AddedByUser");

                    b.Navigation("LastModifiedByUser");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.MenuPageV2", b =>
                {
                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", "AddedByUser")
                        .WithMany("MenuPageV2AddedByUsers")
                        .HasForeignKey("AddedByUserId")
                        .HasConstraintName("FK_MenuPageV2_AddedByUserId_User_Id")
                        .IsRequired();

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", "LastModifiedByUser")
                        .WithMany("MenuPageV2LastModifiedByUsers")
                        .HasForeignKey("LastModifiedByUserId")
                        .HasConstraintName("FK_MenuPageV2_LastModifiedByUserId_User_Id");

                    b.Navigation("AddedByUser");

                    b.Navigation("LastModifiedByUser");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.PeriodicTicket", b =>
                {
                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", "AddedByUser")
                        .WithMany("PeriodicTicketAddedByUsers")
                        .HasForeignKey("AddedByUserId")
                        .HasConstraintName("FK_PeriodicTicket_AddedByUserId_User_Id")
                        .IsRequired();

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", "LastModifiedByUser")
                        .WithMany("PeriodicTicketLastModifiedByUsers")
                        .HasForeignKey("LastModifiedByUserId")
                        .HasConstraintName("FK_PeriodicTicket_LastModifiedByUserId_User_Id");

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.TicketRelatedLocation", "Location")
                        .WithMany("PeriodicTickets")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK_periodicticketdefinitions_place");

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.TicketReason", "TicketReason")
                        .WithMany("PeriodicTickets")
                        .HasForeignKey("TicketReasonId")
                        .HasConstraintName("FK_periodicticketdefinitions_reason")
                        .IsRequired();

                    b.Navigation("AddedByUser");

                    b.Navigation("LastModifiedByUser");

                    b.Navigation("Location");

                    b.Navigation("TicketReason");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.ResolutionForm", b =>
                {
                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", "AddedByUser")
                        .WithMany("ResolutionFormAddedByUsers")
                        .HasForeignKey("AddedByUserId")
                        .HasConstraintName("FK_ResolutionForm_AddedByUserId_User_Id")
                        .IsRequired();

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", "LastModifiedByUser")
                        .WithMany("ResolutionFormLastModifiedByUsers")
                        .HasForeignKey("LastModifiedByUserId")
                        .HasConstraintName("FK_ResolutionForm_LastModifiedByUserId_User_Id");

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.TicketReasonCategoryV2", "TicketReasonCategory")
                        .WithMany("ResolutionForms")
                        .HasForeignKey("TicketReasonCategoryId")
                        .HasConstraintName("FK_ResolutionForm_TicketReasonCategoryId_TicketReasonCategoryV2_Id");

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.TicketReason", "TicketReason")
                        .WithMany("ResolutionForms")
                        .HasForeignKey("TicketReasonId")
                        .HasConstraintName("FK_ticketforms_reason");

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.TicketState", "TicketState")
                        .WithMany("ResolutionForms")
                        .HasForeignKey("TicketStateId")
                        .HasConstraintName("FK_ticketforms_ticketstate")
                        .IsRequired();

                    b.Navigation("AddedByUser");

                    b.Navigation("LastModifiedByUser");

                    b.Navigation("TicketReason");

                    b.Navigation("TicketReasonCategory");

                    b.Navigation("TicketState");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.ResolutionFormAnswer", b =>
                {
                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", "AddedByUser")
                        .WithMany("ResolutionFormAnswerAddedByUsers")
                        .HasForeignKey("AddedByUserId")
                        .HasConstraintName("FK_ResolutionFormAnswer_AddedByUserId_User_Id")
                        .IsRequired();

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", "LastModifiedByUser")
                        .WithMany("ResolutionFormAnswerLastModifiedByUsers")
                        .HasForeignKey("LastModifiedByUserId")
                        .HasConstraintName("FK_ResolutionFormAnswer_LastModifiedByUserId_User_Id");

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.ResolutionFormV2", "ResolutionForm")
                        .WithMany("ResolutionFormAnswers")
                        .HasForeignKey("ResolutionFormId")
                        .HasConstraintName("FK_ResolutionFormAnswer_ResolutionFormId_ResolutionForm_Id")
                        .IsRequired();

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.ResolutionFormQuestion", "ResolutionFormQuestion")
                        .WithMany("ResolutionFormAnswers")
                        .HasForeignKey("ResolutionFormQuestionId")
                        .HasConstraintName("FK_ResolutionFormAnswer_ResolutionFormQuestionId_ResolutionFormQuestion_Id")
                        .IsRequired();

                    b.Navigation("AddedByUser");

                    b.Navigation("LastModifiedByUser");

                    b.Navigation("ResolutionForm");

                    b.Navigation("ResolutionFormQuestion");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.ResolutionFormChoiceOption", b =>
                {
                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", "AddedByUser")
                        .WithMany("ResolutionFormChoiceOptionAddedByUsers")
                        .HasForeignKey("AddedByUserId")
                        .HasConstraintName("FK_ResolutionFormChoiceOption_AddedByUserId_User_Id")
                        .IsRequired();

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", "LastModifiedByUser")
                        .WithMany("ResolutionFormChoiceOptionLastModifiedByUsers")
                        .HasForeignKey("LastModifiedByUserId")
                        .HasConstraintName("FK_ResolutionFormChoiceOption_LastModifiedByUserId_User_Id");

                    b.Navigation("AddedByUser");

                    b.Navigation("LastModifiedByUser");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.ResolutionFormMultipleChoice", b =>
                {
                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", "AddedByUser")
                        .WithMany("ResolutionFormMultipleChoiceAddedByUsers")
                        .HasForeignKey("AddedByUserId")
                        .HasConstraintName("FK_ResolutionFormMultipleChoice_AddedByUserId_User_Id")
                        .IsRequired();

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", "LastModifiedByUser")
                        .WithMany("ResolutionFormMultipleChoiceLastModifiedByUsers")
                        .HasForeignKey("LastModifiedByUserId")
                        .HasConstraintName("FK_ResolutionFormMultipleChoice_LastModifiedByUserId_User_Id");

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.ResolutionForm", "TicketForm")
                        .WithMany("ResolutionFormMultipleChoices")
                        .HasForeignKey("TicketFormId")
                        .HasConstraintName("FK_ticketformQwithMultiple_ticketformQwithMultiple")
                        .IsRequired();

                    b.Navigation("AddedByUser");

                    b.Navigation("LastModifiedByUser");

                    b.Navigation("TicketForm");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.ResolutionFormQuestion", b =>
                {
                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", "AddedByUser")
                        .WithMany("ResolutionFormQuestionAddedByUsers")
                        .HasForeignKey("AddedByUserId")
                        .HasConstraintName("FK_ResolutionFormQuestion_AddedByUserId_User_Id")
                        .IsRequired();

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", "LastModifiedByUser")
                        .WithMany("ResolutionFormQuestionLastModifiedByUsers")
                        .HasForeignKey("LastModifiedByUserId")
                        .HasConstraintName("FK_ResolutionFormQuestion_LastModifiedByUserId_User_Id");

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.ResolutionFormQuestionType", "ResolutionFormQuestionType")
                        .WithMany("ResolutionFormQuestions")
                        .HasForeignKey("ResolutionFormQuestionTypeId")
                        .HasConstraintName("FK_ResolutionFormQuestion_ResolutionFormQuestionTypeId_ResolutionFormQuestionType_Id")
                        .IsRequired();

                    b.Navigation("AddedByUser");

                    b.Navigation("LastModifiedByUser");

                    b.Navigation("ResolutionFormQuestionType");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.ResolutionFormQuestionAnswer", b =>
                {
                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", "AddedByUser")
                        .WithMany("ResolutionFormQuestionAnswerAddedByUsers")
                        .HasForeignKey("AddedByUserId")
                        .HasConstraintName("FK_ResolutionFormQuestionAnswer_AddedByUserId_User_Id")
                        .IsRequired();

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", "LastModifiedByUser")
                        .WithMany("ResolutionFormQuestionAnswerLastModifiedByUsers")
                        .HasForeignKey("LastModifiedByUserId")
                        .HasConstraintName("FK_ResolutionFormQuestionAnswer_LastModifiedByUserId_User_Id");

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.ResolutionForm", "ResolutionForm")
                        .WithMany("ResolutionFormQuestionAnswers")
                        .HasForeignKey("ResolutionFormId")
                        .HasConstraintName("FK_ticketformQAnswers_ticketforms")
                        .IsRequired();

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.Ticket", "Ticket")
                        .WithMany("ResolutionFormQuestionAnswers")
                        .HasForeignKey("TicketId")
                        .HasConstraintName("FK_ticketformQAnswers_ticket")
                        .IsRequired();

                    b.Navigation("AddedByUser");

                    b.Navigation("LastModifiedByUser");

                    b.Navigation("ResolutionForm");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.ResolutionFormQuestionType", b =>
                {
                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", "AddedByUser")
                        .WithMany("ResolutionFormQuestionTypeAddedByUsers")
                        .HasForeignKey("AddedByUserId")
                        .HasConstraintName("FK_ResolutionFormQuestionType_AddedByUserId_User_Id")
                        .IsRequired();

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", "LastModifiedByUser")
                        .WithMany("ResolutionFormQuestionTypeLastModifiedByUsers")
                        .HasForeignKey("LastModifiedByUserId")
                        .HasConstraintName("FK_ResolutionFormQuestionType_LastModifiedByUserId_User_Id");

                    b.Navigation("AddedByUser");

                    b.Navigation("LastModifiedByUser");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.ResolutionFormSingleQuestion", b =>
                {
                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", "AddedByUser")
                        .WithMany("ResolutionFormSingleQuestionAddedByUsers")
                        .HasForeignKey("AddedByUserId")
                        .HasConstraintName("FK_ResolutionFormSingleQuestion_AddedByUserId_User_Id")
                        .IsRequired();

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", "LastModifiedByUser")
                        .WithMany("ResolutionFormSingleQuestionLastModifiedByUsers")
                        .HasForeignKey("LastModifiedByUserId")
                        .HasConstraintName("FK_ResolutionFormSingleQuestion_LastModifiedByUserId_User_Id");

                    b.Navigation("AddedByUser");

                    b.Navigation("LastModifiedByUser");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.ResolutionFormV2", b =>
                {
                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", "AddedByUser")
                        .WithMany("ResolutionFormV2AddedByUsers")
                        .HasForeignKey("AddedByUserId")
                        .HasConstraintName("FK_ResolutionFormV2_AddedByUserId_User_Id")
                        .IsRequired();

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", "LastModifiedByUser")
                        .WithMany("ResolutionFormV2LastModifiedByUsers")
                        .HasForeignKey("LastModifiedByUserId")
                        .HasConstraintName("FK_ResolutionFormV2_LastModifiedByUserId_User_Id");

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.TicketReasonCategoryV2", "TicketReasonCategory")
                        .WithMany("ResolutionFormV2s")
                        .HasForeignKey("TicketReasonCategoryId")
                        .HasConstraintName("FK_ResolutionFormV2_TicketReasonCategoryId_TicketReasonCategoryV2_Id");

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.TicketReason", "TicketReason")
                        .WithMany("ResolutionFormV2s")
                        .HasForeignKey("TicketReasonId")
                        .HasConstraintName("FK_ResolutionFormV2_TicketReasonId_TicketReason_Id");

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.TicketState", "TicketState")
                        .WithMany("ResolutionFormV2s")
                        .HasForeignKey("TicketStateId")
                        .HasConstraintName("FK_ResolutionFormV2_TicketStateId_TicketState_Id")
                        .IsRequired();

                    b.Navigation("AddedByUser");

                    b.Navigation("LastModifiedByUser");

                    b.Navigation("TicketReason");

                    b.Navigation("TicketReasonCategory");

                    b.Navigation("TicketState");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.ResolutionFormYesNo", b =>
                {
                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", "AddedByUser")
                        .WithMany("ResolutionFormYesNoAddedByUsers")
                        .HasForeignKey("AddedByUserId")
                        .HasConstraintName("FK_ResolutionFormYesNo_AddedByUserId_User_Id")
                        .IsRequired();

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", "LastModifiedByUser")
                        .WithMany("ResolutionFormYesNoLastModifiedByUsers")
                        .HasForeignKey("LastModifiedByUserId")
                        .HasConstraintName("FK_ResolutionFormYesNo_LastModifiedByUserId_User_Id");

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.ResolutionForm", "TicketForm")
                        .WithMany("ResolutionFormYesNos")
                        .HasForeignKey("TicketFormId")
                        .HasConstraintName("FK_ticketformQwithYesNo_ticketforms")
                        .IsRequired();

                    b.Navigation("AddedByUser");

                    b.Navigation("LastModifiedByUser");

                    b.Navigation("TicketForm");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.Ticket", b =>
                {
                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", "AddedByUser")
                        .WithMany("TicketAddedByUsers")
                        .HasForeignKey("AddedByUserId")
                        .HasConstraintName("FK_Ticket_AddedByUserId_User_Id")
                        .IsRequired();

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.BasicTicket", "BasicTicket")
                        .WithMany("Tickets")
                        .HasForeignKey("BasicTicketId")
                        .HasConstraintName("FK_Ticket_Basic_Tickets");

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", "LastModifiedByUser")
                        .WithMany("TicketLastModifiedByUsers")
                        .HasForeignKey("LastModifiedByUserId")
                        .HasConstraintName("FK_Ticket_LastModifiedByUserId_User_Id");

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.AssignmentGroup", "TickedAssignedAssignmentGroup")
                        .WithMany("Tickets")
                        .HasForeignKey("TickedAssignedAssignmentGroupId")
                        .HasConstraintName("FK_ticket_assignmentgroup");

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", "TicketAssignedUser")
                        .WithMany("TicketTicketAssignedUsers")
                        .HasForeignKey("TicketAssignedUserId")
                        .HasConstraintName("FK_ticket_hr");

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.TicketReason", "TicketReason")
                        .WithMany("Tickets")
                        .HasForeignKey("TicketReasonId")
                        .HasConstraintName("FK_ticket_reason")
                        .IsRequired();

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.TicketState", "TicketStatus")
                        .WithMany("Tickets")
                        .HasForeignKey("TicketStatusId")
                        .HasConstraintName("FK_ticket_ticketstate")
                        .IsRequired();

                    b.Navigation("AddedByUser");

                    b.Navigation("BasicTicket");

                    b.Navigation("LastModifiedByUser");

                    b.Navigation("TickedAssignedAssignmentGroup");

                    b.Navigation("TicketAssignedUser");

                    b.Navigation("TicketReason");

                    b.Navigation("TicketStatus");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.TicketAuditHistory", b =>
                {
                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", "AddedByUser")
                        .WithMany("TicketAuditHistoryAddedByUsers")
                        .HasForeignKey("AddedByUserId")
                        .HasConstraintName("FK_TicketAuditHistory_AddedByUserId_User_Id")
                        .IsRequired();

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", "LastModifiedByUser")
                        .WithMany("TicketAuditHistoryLastModifiedByUsers")
                        .HasForeignKey("LastModifiedByUserId")
                        .HasConstraintName("FK_TicketAuditHistory_LastModifiedByUserId_User_Id");

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.LocationV2", "Location")
                        .WithMany("TicketAuditHistories")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK_TicketAuditHistory_LocationId_LocationV2_Id");

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.AssignmentGroup", "NextAssignedAssignmentGroup")
                        .WithMany("TicketAuditHistoryNextAssignedAssignmentGroups")
                        .HasForeignKey("NextAssignedAssignmentGroupId")
                        .HasConstraintName("FK_ticketHistory_assignmentgroup1");

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", "NextTicketAssignedUser")
                        .WithMany("TicketAuditHistoryNextTicketAssignedUsers")
                        .HasForeignKey("NextTicketAssignedUserId")
                        .HasConstraintName("FK_ticketHistory_hr2");

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.TicketState", "NextTicketState")
                        .WithMany("TicketAuditHistoryNextTicketStates")
                        .HasForeignKey("NextTicketStateId")
                        .HasConstraintName("FK_ticketHistory_ticketstate1");

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.AssignmentGroup", "PreviousAssignedAssignmentGroup")
                        .WithMany("TicketAuditHistoryPreviousAssignedAssignmentGroups")
                        .HasForeignKey("PreviousAssignedAssignmentGroupId")
                        .HasConstraintName("FK_ticketHistory_assignmentgroup");

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", "PreviousTicketAssignedUser")
                        .WithMany("TicketAuditHistoryPreviousTicketAssignedUsers")
                        .HasForeignKey("PreviousTicketAssignedUserId")
                        .HasConstraintName("FK_ticketHistory_hr1");

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.TicketState", "PreviousTicketState")
                        .WithMany("TicketAuditHistoryPreviousTicketStates")
                        .HasForeignKey("PreviousTicketStateId")
                        .HasConstraintName("FK_ticketHistory_ticketstate");

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.Ticket", "Ticket")
                        .WithMany("TicketAuditHistories")
                        .HasForeignKey("TicketId")
                        .HasConstraintName("FK_ticketHistory_ticket")
                        .IsRequired();

                    b.Navigation("AddedByUser");

                    b.Navigation("LastModifiedByUser");

                    b.Navigation("Location");

                    b.Navigation("NextAssignedAssignmentGroup");

                    b.Navigation("NextTicketAssignedUser");

                    b.Navigation("NextTicketState");

                    b.Navigation("PreviousAssignedAssignmentGroup");

                    b.Navigation("PreviousTicketAssignedUser");

                    b.Navigation("PreviousTicketState");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.TicketNote", b =>
                {
                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", "AddedByUser")
                        .WithMany("TicketNoteAddedByUsers")
                        .HasForeignKey("AddedByUserId")
                        .HasConstraintName("FK_TicketNote_AddedByUserId_User_Id")
                        .IsRequired();

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", "LastModifiedByUser")
                        .WithMany("TicketNoteLastModifiedByUsers")
                        .HasForeignKey("LastModifiedByUserId")
                        .HasConstraintName("FK_TicketNote_LastModifiedByUserId_User_Id");

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.Ticket", "Ticket")
                        .WithMany("TicketNotes")
                        .HasForeignKey("TicketId")
                        .HasConstraintName("FK_Ticket_Notes_Ticket")
                        .IsRequired();

                    b.Navigation("AddedByUser");

                    b.Navigation("LastModifiedByUser");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.TicketReason", b =>
                {
                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", "AddedByUser")
                        .WithMany("TicketReasonAddedByUsers")
                        .HasForeignKey("AddedByUserId")
                        .HasConstraintName("FK_TicketReason_AddedByUserId_User_Id")
                        .IsRequired();

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", "LastModifiedByUser")
                        .WithMany("TicketReasonLastModifiedByUsers")
                        .HasForeignKey("LastModifiedByUserId")
                        .HasConstraintName("FK_TicketReason_LastModifiedByUserId_User_Id");

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.TicketReasonCategoryV2", "TicketReasonCategory")
                        .WithMany("TicketReasons")
                        .HasForeignKey("TicketReasonCategoryId")
                        .HasConstraintName("FK_TicketReason_TicketReasonCategoryId_TicketReasonCategoryV2_Id")
                        .IsRequired();

                    b.Navigation("AddedByUser");

                    b.Navigation("LastModifiedByUser");

                    b.Navigation("TicketReasonCategory");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.TicketReasonCategory", b =>
                {
                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", "AddedByUser")
                        .WithMany("TicketReasonCategoryAddedByUsers")
                        .HasForeignKey("AddedByUserId")
                        .HasConstraintName("FK_TicketReasonCategory_AddedByUserId_User_Id")
                        .IsRequired();

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", "LastModifiedByUser")
                        .WithMany("TicketReasonCategoryLastModifiedByUsers")
                        .HasForeignKey("LastModifiedByUserId")
                        .HasConstraintName("FK_TicketReasonCategory_LastModifiedByUserId_User_Id");

                    b.Navigation("AddedByUser");

                    b.Navigation("LastModifiedByUser");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.TicketReasonCategoryV2", b =>
                {
                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", "AddedByUser")
                        .WithMany("TicketReasonCategoryV2AddedByUsers")
                        .HasForeignKey("AddedByUserId")
                        .HasConstraintName("FK_TicketReasonCategoryV2_AddedByUserId_User_Id")
                        .IsRequired();

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", "LastModifiedByUser")
                        .WithMany("TicketReasonCategoryV2LastModifiedByUsers")
                        .HasForeignKey("LastModifiedByUserId")
                        .HasConstraintName("FK_TicketReasonCategoryV2_LastModifiedByUserId_User_Id");

                    b.Navigation("AddedByUser");

                    b.Navigation("LastModifiedByUser");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.TicketRelatedLocation", b =>
                {
                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", "AddedByUser")
                        .WithMany("TicketRelatedLocationAddedByUsers")
                        .HasForeignKey("AddedByUserId")
                        .HasConstraintName("FK_TicketRelatedLocation_AddedByUserId_User_Id")
                        .IsRequired();

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", "LastModifiedByUser")
                        .WithMany("TicketRelatedLocationLastModifiedByUsers")
                        .HasForeignKey("LastModifiedByUserId")
                        .HasConstraintName("FK_TicketRelatedLocation_LastModifiedByUserId_User_Id");

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.Ticket", "Ticket")
                        .WithMany("TicketRelatedLocations")
                        .HasForeignKey("TicketId")
                        .HasConstraintName("FK_ticketRelations_ticket")
                        .IsRequired();

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.LocationV2", "TicketLocation")
                        .WithMany("TicketRelatedLocations")
                        .HasForeignKey("TicketLocationId")
                        .HasConstraintName("FK_TicketRelatedLocation_TicketLocationId_LocationV2_Id")
                        .IsRequired();

                    b.Navigation("AddedByUser");

                    b.Navigation("LastModifiedByUser");

                    b.Navigation("Ticket");

                    b.Navigation("TicketLocation");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.TicketState", b =>
                {
                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", "AddedByUser")
                        .WithMany("TicketStateAddedByUsers")
                        .HasForeignKey("AddedByUserId")
                        .HasConstraintName("FK_TicketState_AddedByUserId_User_Id")
                        .IsRequired();

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", "LastModifiedByUser")
                        .WithMany("TicketStateLastModifiedByUsers")
                        .HasForeignKey("LastModifiedByUserId")
                        .HasConstraintName("FK_TicketState_LastModifiedByUserId_User_Id");

                    b.Navigation("AddedByUser");

                    b.Navigation("LastModifiedByUser");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.TicketStateTransition", b =>
                {
                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", "AddedByUser")
                        .WithMany("TicketStateTransitionAddedByUsers")
                        .HasForeignKey("AddedByUserId")
                        .HasConstraintName("FK_TicketStateTransition_AddedByUserId_User_Id")
                        .IsRequired();

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.TicketState", "DestinationTicketState")
                        .WithMany("TicketStateTransitionDestinationTicketStates")
                        .HasForeignKey("DestinationTicketStateId")
                        .HasConstraintName("FK_ticketstatelevel_ticketstate")
                        .IsRequired();

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", "LastModifiedByUser")
                        .WithMany("TicketStateTransitionLastModifiedByUsers")
                        .HasForeignKey("LastModifiedByUserId")
                        .HasConstraintName("FK_TicketStateTransition_LastModifiedByUserId_User_Id");

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.TicketState", "SourceTicketState")
                        .WithMany("TicketStateTransitionSourceTicketStates")
                        .HasForeignKey("SourceTicketStateId")
                        .HasConstraintName("FK_ticketstatelevel_ticketstate1")
                        .IsRequired();

                    b.Navigation("AddedByUser");

                    b.Navigation("DestinationTicketState");

                    b.Navigation("LastModifiedByUser");

                    b.Navigation("SourceTicketState");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.UserMenuPage", b =>
                {
                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", "AddedByUser")
                        .WithMany("UserMenuPageAddedByUsers")
                        .HasForeignKey("AddedByUserId")
                        .HasConstraintName("FK_UserMenuPage_AddedByUserId_User_Id")
                        .IsRequired();

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", "LastModifiedByUser")
                        .WithMany("UserMenuPageLastModifiedByUsers")
                        .HasForeignKey("LastModifiedByUserId")
                        .HasConstraintName("FK_UserMenuPage_LastModifiedByUserId_User_Id");

                    b.Navigation("AddedByUser");

                    b.Navigation("LastModifiedByUser");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.WorkShift", b =>
                {
                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", "AddedByUser")
                        .WithMany("WorkShiftAddedByUsers")
                        .HasForeignKey("AddedByUserId")
                        .HasConstraintName("FK_WorkShift_AddedByUserId_User_Id")
                        .IsRequired();

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", "LastModifiedByUser")
                        .WithMany("WorkShiftLastModifiedByUsers")
                        .HasForeignKey("LastModifiedByUserId")
                        .HasConstraintName("FK_WorkShift_LastModifiedByUserId_User_Id");

                    b.Navigation("AddedByUser");

                    b.Navigation("LastModifiedByUser");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", b =>
                {
                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", "AddedByUser")
                        .WithMany("InverseAddedByUser")
                        .HasForeignKey("AddedByUserId")
                        .HasConstraintName("FK_User_AddedByUserId_User_Id")
                        .IsRequired();

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", "LastModifiedByUser")
                        .WithMany("InverseLastModifiedByUser")
                        .HasForeignKey("LastModifiedByUserId")
                        .HasConstraintName("FK_User_LastModifiedByUserId_User_Id");

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.WorkShift", "WorkShift")
                        .WithMany("Users")
                        .HasForeignKey("WorkShiftId")
                        .HasConstraintName("FK_hr_shift")
                        .IsRequired();

                    b.Navigation("AddedByUser");

                    b.Navigation("LastModifiedByUser");

                    b.Navigation("WorkShift");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.CompanyRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.CompanyRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.AssignmentGroup", b =>
                {
                    b.Navigation("AssignmentGroupAuthorizedLocations");

                    b.Navigation("AssignmentGroupEmployees");

                    b.Navigation("TicketAuditHistoryNextAssignedAssignmentGroups");

                    b.Navigation("TicketAuditHistoryPreviousAssignedAssignmentGroups");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.BasicTicket", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.BasicTicketState", b =>
                {
                    b.Navigation("BasicTicketStateFK");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.LocationV2", b =>
                {
                    b.Navigation("AssignmentGroupAuthorizedLocations");

                    b.Navigation("TicketAuditHistories");

                    b.Navigation("TicketRelatedLocations");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.ResolutionForm", b =>
                {
                    b.Navigation("ResolutionFormMultipleChoices");

                    b.Navigation("ResolutionFormQuestionAnswers");

                    b.Navigation("ResolutionFormYesNos");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.ResolutionFormQuestion", b =>
                {
                    b.Navigation("ResolutionFormAnswers");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.ResolutionFormQuestionType", b =>
                {
                    b.Navigation("ResolutionFormQuestions");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.ResolutionFormV2", b =>
                {
                    b.Navigation("ResolutionFormAnswers");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.Ticket", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("ResolutionFormQuestionAnswers");

                    b.Navigation("TicketAuditHistories");

                    b.Navigation("TicketNotes");

                    b.Navigation("TicketRelatedLocations");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.TicketNote", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.TicketReason", b =>
                {
                    b.Navigation("AssignmentGroups");

                    b.Navigation("PeriodicTickets");

                    b.Navigation("ResolutionForms");

                    b.Navigation("ResolutionFormV2s");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.TicketReasonCategoryV2", b =>
                {
                    b.Navigation("ResolutionForms");

                    b.Navigation("ResolutionFormV2s");

                    b.Navigation("TicketReasons");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.TicketRelatedLocation", b =>
                {
                    b.Navigation("PeriodicTickets");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.TicketState", b =>
                {
                    b.Navigation("ResolutionForms");

                    b.Navigation("ResolutionFormV2s");

                    b.Navigation("TicketAuditHistoryNextTicketStates");

                    b.Navigation("TicketAuditHistoryPreviousTicketStates");

                    b.Navigation("Tickets");

                    b.Navigation("TicketStateTransitionDestinationTicketStates");

                    b.Navigation("TicketStateTransitionSourceTicketStates");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.DiasFacilityManagementTemplate.SqlServer.Development.Models.WorkShift", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("DiasDataAccessLayer.DataAccessLayers.EF_Layers.IdentityManagementV2.SqlServer.Development.Models.User", b =>
                {
                    b.Navigation("AssignmentGroupAddedByUsers");

                    b.Navigation("AssignmentGroupAuthorizedLocationAddedByUsers");

                    b.Navigation("AssignmentGroupAuthorizedLocationLastModifiedByUsers");

                    b.Navigation("AssignmentGroupEmployeeAddedByUsers");

                    b.Navigation("AssignmentGroupEmployeeEmployeeUsers");

                    b.Navigation("AssignmentGroupEmployeeLastModifiedByUsers");

                    b.Navigation("AssignmentGroupGroupManagerUsers");

                    b.Navigation("AssignmentGroupLastModifiedByUsers");

                    b.Navigation("AttachmentAddedByUsers");

                    b.Navigation("AttachmentLastModifiedByUsers");

                    b.Navigation("BasicTicketAddedByUsers");

                    b.Navigation("BasicTicketLastModifiedByUsers");

                    b.Navigation("InverseAddedByUser");

                    b.Navigation("InverseLastModifiedByUser");

                    b.Navigation("LocationAddedByUsers");

                    b.Navigation("LocationLastModifiedByUsers");

                    b.Navigation("LocationV2AddedByUsers");

                    b.Navigation("LocationV2LastModifiedByUsers");

                    b.Navigation("MenuPageAddedByUsers");

                    b.Navigation("MenuPageLastModifiedByUsers");

                    b.Navigation("MenuPageV2AddedByUsers");

                    b.Navigation("MenuPageV2LastModifiedByUsers");

                    b.Navigation("PeriodicTicketAddedByUsers");

                    b.Navigation("PeriodicTicketLastModifiedByUsers");

                    b.Navigation("ResolutionFormAddedByUsers");

                    b.Navigation("ResolutionFormAnswerAddedByUsers");

                    b.Navigation("ResolutionFormAnswerLastModifiedByUsers");

                    b.Navigation("ResolutionFormChoiceOptionAddedByUsers");

                    b.Navigation("ResolutionFormChoiceOptionLastModifiedByUsers");

                    b.Navigation("ResolutionFormLastModifiedByUsers");

                    b.Navigation("ResolutionFormMultipleChoiceAddedByUsers");

                    b.Navigation("ResolutionFormMultipleChoiceLastModifiedByUsers");

                    b.Navigation("ResolutionFormQuestionAddedByUsers");

                    b.Navigation("ResolutionFormQuestionAnswerAddedByUsers");

                    b.Navigation("ResolutionFormQuestionAnswerLastModifiedByUsers");

                    b.Navigation("ResolutionFormQuestionLastModifiedByUsers");

                    b.Navigation("ResolutionFormQuestionTypeAddedByUsers");

                    b.Navigation("ResolutionFormQuestionTypeLastModifiedByUsers");

                    b.Navigation("ResolutionFormSingleQuestionAddedByUsers");

                    b.Navigation("ResolutionFormSingleQuestionLastModifiedByUsers");

                    b.Navigation("ResolutionFormV2AddedByUsers");

                    b.Navigation("ResolutionFormV2LastModifiedByUsers");

                    b.Navigation("ResolutionFormYesNoAddedByUsers");

                    b.Navigation("ResolutionFormYesNoLastModifiedByUsers");

                    b.Navigation("TicketAddedByUsers");

                    b.Navigation("TicketAuditHistoryAddedByUsers");

                    b.Navigation("TicketAuditHistoryLastModifiedByUsers");

                    b.Navigation("TicketAuditHistoryNextTicketAssignedUsers");

                    b.Navigation("TicketAuditHistoryPreviousTicketAssignedUsers");

                    b.Navigation("TicketLastModifiedByUsers");

                    b.Navigation("TicketNoteAddedByUsers");

                    b.Navigation("TicketNoteLastModifiedByUsers");

                    b.Navigation("TicketReasonAddedByUsers");

                    b.Navigation("TicketReasonCategoryAddedByUsers");

                    b.Navigation("TicketReasonCategoryLastModifiedByUsers");

                    b.Navigation("TicketReasonCategoryV2AddedByUsers");

                    b.Navigation("TicketReasonCategoryV2LastModifiedByUsers");

                    b.Navigation("TicketReasonLastModifiedByUsers");

                    b.Navigation("TicketRelatedLocationAddedByUsers");

                    b.Navigation("TicketRelatedLocationLastModifiedByUsers");

                    b.Navigation("TicketStateAddedByUsers");

                    b.Navigation("TicketStateLastModifiedByUsers");

                    b.Navigation("TicketStateTransitionAddedByUsers");

                    b.Navigation("TicketStateTransitionLastModifiedByUsers");

                    b.Navigation("TicketTicketAssignedUsers");

                    b.Navigation("UserMenuPageAddedByUsers");

                    b.Navigation("UserMenuPageLastModifiedByUsers");

                    b.Navigation("WorkShiftAddedByUsers");

                    b.Navigation("WorkShiftLastModifiedByUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
